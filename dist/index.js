!function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=4)}([function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(){function e(t){r(this,e),this.name=t}return i(e,[{key:"w",value:function(){for(var e,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];(e=console).warn.apply(e,["["+this.name+"]====> "+(new Date).toTimeString()+"\n              : "].concat(n))}},{key:"l",value:function(e){console.log("["+this.name+"]====> "+(new Date).toTimeString()+"\n              : "+e)}},{key:"e",value:function(e){console.error("["+this.name+"]====> "+(new Date).toTimeString()+"\n              : "+e)}},{key:"i",value:function(e){console.info("["+this.name+"]====> "+(new Date).toTimeString()+"\n              : "+e)}}]),e}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.mergeBuffer=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t.reduce(function(e,t){return e+t.byteLength},0),i=new Uint8Array(r),a=0;return t.forEach(function(e){i.set(new Uint8Array(e),a),a+=e.byteLength}),i.buffer},t.mergeTypedArray=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t.reduce(function(e,t){return e+t.byteLength},0),i=new Uint8Array(r),a=0;return t.forEach(function(e){i.set(e,a),a+=e.byteLength}),i}},function(e,t,n){"use strict";t.download=function(e){var t=new Blob(e,{type:"application/octet-binary"}),n=window.URL.createObjectURL(t),r=document.createElement("a");r.style.display="none",r.href=n,r.download="test.mp4",document.body.appendChild(r),r.click(),setTimeout(function(){document.body.removeChild(r),window.URL.revokeObjectURL(n)},100)},t.downfile=function(e,t){var n=new File([e],"ce.mp4",{type:"video/mp4"}),r=window.URL.createObjectURL(n),i=document.createElement("a");i.style.display="none",i.href=r,i.download=t+".mp4",document.body.appendChild(i),i.click(),setTimeout(function(){document.body.removeChild(i),window.URL.revokeObjectURL(r)},100)},t.downFLV=function(e,t){var n=new File([e],"ce.flv",{type:"video/x-flv"}),r=window.URL.createObjectURL(n),i=document.createElement("a");i.style.display="none",i.href=r,i.download=t+".flv",document.body.appendChild(i),i.click(),setTimeout(function(){document.body.removeChild(i),window.URL.revokeObjectURL(r)},100)},t.downAudio=function(e){var t=new File([e],"ce.mpeg",{type:"audio/mpeg"}),n=window.URL.createObjectURL(t),r=document.createElement("a");r.style.display="none",r.href=n,r.download="test.mp3",document.body.appendChild(r),r.click(),setTimeout(function(){document.body.removeChild(r),window.URL.revokeObjectURL(n)},100)},t.mergebox=function(){var e=Array.prototype.slice.call(arguments),t=e.reduce(function(e,t){return e+t.byteLength},0),n=new Uint8Array(t),r=0;return e.forEach(function(e){e=new Uint8Array(e),n.set(e,r),r+=e.byteLength}),n},t.concatBuffer=function(){var e=new ArrayBuffer(0),n=t;return function(t,r){e=n.mergebox(e,t.buffer),e.byteLength>r&&n.downfile(e,"video")}}(),t.stop=function(){var e=0;return function(t){return console.log(e),t<=e++}}()},function(e,t,n){"use strict";(function(e,r){function i(e,n){var r={seen:[],stylize:o};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),y(n)?r.showHidden=n:n&&t._extend(r,n),w(r.showHidden)&&(r.showHidden=!1),w(r.depth)&&(r.depth=2),w(r.colors)&&(r.colors=!1),w(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=a),s(r,e,r.depth)}function a(e,t){var n=i.styles[t];return n?"["+i.colors[n][0]+"m"+e+"["+i.colors[n][1]+"m":e}function o(e,t){return e}function u(e){var t={};return e.forEach(function(e,n){t[e]=!0}),t}function s(e,n,r){if(e.customInspect&&n&&A(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,e);return _(i)||(i=s(e,i,r)),i}var a=c(e,n);if(a)return a;var o=Object.keys(n),y=u(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(n)),T(n)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return f(n);if(0===o.length){if(A(n)){var v=n.name?": "+n.name:"";return e.stylize("[Function"+v+"]","special")}if(k(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(U(n))return e.stylize(Date.prototype.toString.call(n),"date");if(T(n))return f(n)}var m="",b=!1,g=["{","}"];if(h(n)&&(b=!0,g=["[","]"]),A(n)){m=" [Function"+(n.name?": "+n.name:"")+"]"}if(k(n)&&(m=" "+RegExp.prototype.toString.call(n)),U(n)&&(m=" "+Date.prototype.toUTCString.call(n)),T(n)&&(m=" "+f(n)),0===o.length&&(!b||0==n.length))return g[0]+m+g[1];if(r<0)return k(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special");e.seen.push(n);var w;return w=b?l(e,n,r,y,o):o.map(function(t){return d(e,n,r,y,t,b)}),e.seen.pop(),p(w,m,g)}function c(e,t){if(w(t))return e.stylize("undefined","undefined");if(_(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return b(t)?e.stylize(""+t,"number"):y(t)?e.stylize(""+t,"boolean"):v(t)?e.stylize("null","null"):void 0}function f(e){return"["+Error.prototype.toString.call(e)+"]"}function l(e,t,n,r,i){for(var a=[],o=0,u=t.length;o<u;++o)C(t,String(o))?a.push(d(e,t,n,r,String(o),!0)):a.push("");return i.forEach(function(i){i.match(/^\d+$/)||a.push(d(e,t,n,r,i,!0))}),a}function d(e,t,n,r,i,a){var o,u,c;if(c=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]},c.get?u=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(u=e.stylize("[Setter]","special")),C(r,i)||(o="["+i+"]"),u||(e.seen.indexOf(c.value)<0?(u=v(n)?s(e,c.value,null):s(e,c.value,n-1),u.indexOf("\n")>-1&&(u=a?u.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+u.split("\n").map(function(e){return"   "+e}).join("\n"))):u=e.stylize("[Circular]","special")),w(o)){if(a&&i.match(/^\d+$/))return u;o=JSON.stringify(""+i),o.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.substr(1,o.length-2),o=e.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=e.stylize(o,"string"))}return o+": "+u}function p(e,t,n){var r=0;return e.reduce(function(e,t){return r++,t.indexOf("\n")>=0&&r++,e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}function h(e){return Array.isArray(e)}function y(e){return"boolean"==typeof e}function v(e){return null===e}function m(e){return null==e}function b(e){return"number"==typeof e}function _(e){return"string"==typeof e}function g(e){return"symbol"===(void 0===e?"undefined":L(e))}function w(e){return void 0===e}function k(e){return S(e)&&"[object RegExp]"===x(e)}function S(e){return"object"===(void 0===e?"undefined":L(e))&&null!==e}function U(e){return S(e)&&"[object Date]"===x(e)}function T(e){return S(e)&&("[object Error]"===x(e)||e instanceof Error)}function A(e){return"function"==typeof e}function E(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"===(void 0===e?"undefined":L(e))||void 0===e}function x(e){return Object.prototype.toString.call(e)}function D(e){return e<10?"0"+e.toString(10):e.toString(10)}function O(){var e=new Date,t=[D(e.getHours()),D(e.getMinutes()),D(e.getSeconds())].join(":");return[e.getDate(),M[e.getMonth()],t].join(" ")}function C(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},j=/%[sdj%]/g;t.format=function(e){if(!_(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(i(arguments[n]));return t.join(" ")}for(var n=1,r=arguments,a=r.length,o=String(e).replace(j,function(e){if("%%"===e)return"%";if(n>=a)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}}),u=r[n];n<a;u=r[++n])v(u)||!S(u)?o+=" "+u:o+=" "+i(u);return o},t.deprecate=function(n,i){function a(){if(!o){if(r.throwDeprecation)throw new Error(i);r.traceDeprecation?console.trace(i):console.error(i),o=!0}return n.apply(this,arguments)}if(w(e.process))return function(){return t.deprecate(n,i).apply(this,arguments)};if(!0===r.noDeprecation)return n;var o=!1;return a};var V,R={};t.debuglog=function(e){if(w(V)&&(V=r.env.NODE_DEBUG||""),e=e.toUpperCase(),!R[e])if(new RegExp("\\b"+e+"\\b","i").test(V)){var n=r.pid;R[e]=function(){var r=t.format.apply(t,arguments);console.error("%s %d: %s",e,n,r)}}else R[e]=function(){};return R[e]},t.inspect=i,i.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},i.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=h,t.isBoolean=y,t.isNull=v,t.isNullOrUndefined=m,t.isNumber=b,t.isString=_,t.isSymbol=g,t.isUndefined=w,t.isRegExp=k,t.isObject=S,t.isDate=U,t.isError=T,t.isFunction=A,t.isPrimitive=E,t.isBuffer=n(11);var M=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];t.log=function(){console.log("%s - %s",O(),t.format.apply(t,arguments))},t.inherits=n(12),t._extend=function(e,t){if(!t||!S(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}}).call(t,n(9),n(10))},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var i=n(5),a=r(i),o=n(13),u=r(o),s=(n(2),new a.default("http://6721.liveplay.myqcloud.com/live/6721_2d77594951b1679c2940eb7feaa05d37.flv")),c=new u.default;s.bind("stream",function(e,t){c.parse(e,t)})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(6),c=r(s),f=n(7),l=n(1),d=n(8),p=r(d),h=(n(3),n(2)),y=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";i(this,t);var n=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));if(!window.fetch)throw new Error('your browser don"t support fetch API, please use modern Browser');return n._emitter=(0,c.default)(),n._url=e,n._CALCEL=!1,n._ERROR=!1,n._chunk=new ArrayBuffer(0),n._bufferLen,n._readLen=0,n._returnArr=[],e&&n._fetch(e),n}return o(t,e),u(t,[{key:"_fetch",value:function(e){var t=this;this._start(),fetch(e).then(function(n){var r=n.body.getReader();r.read().then(function t(i){var a=i.done,o=i.value;if(this._CALCEL&&!a)try{return console.log("drop this url, ",e),r.releaseLock(),n.body.cancel("the user decide to drop"),this._emit(f.HTTPCANCEL),void this._emit(f.CHUNKEDEND)}catch(e){console.warn('dont"t support drop(). because you brower don"t support reader.releaseLock() API \n',e)}return a?(console.log("the chunked connection has stopped"),void this._emit(f.CHUNKEDEND)):(console.log("every segment len is ",o.length),this.readChunk(o.buffer),(0,h.stop)(500)&&this.drop(),r.read().then(t.bind(this)))}.bind(t))}).catch(function(e){throw t._ERROR=!0,t._emit(f.CHUNKEDERR,e),new Error(e)})}},{key:"readChunk",value:function(e){this._chunk=(0,l.mergeBuffer)(this._chunk,e);var t=void 0,n=void 0,r=void 0;this._bufferLen=this._chunk.byteLength,this._readLen=0,this._returnArr=[];for(var i="MS";this._bufferLen-this._readLen>11;)if(n=new Uint8Array(this._chunk),70!==n[0]||76!==n[1]||86!==n[2]){r=new DataView(this._chunk);var a=(r.getUint32(0),16777215&r.getUint32(4));if(console.log(a),this._bufferLen-this._readLen<11+a)break;console.log(this._returnArr),t=this._flvTag(this._chunk.slice(4)),this._returnArr.push({buffer:t.buffer,info:{type:t.type,dataOffset:t.dataOffset,dataSize:t.dataSize,timeStamp:t.timeStamp,tagLen:t.tagLen}}),this._chunk=this._chunk.slice(t.tagLen+4),this._readLen+=t.tagLen+4}else t=this._flvHeader(this._chunk.slice(0,9)),this._returnArr.push({buffer:t.buffer,info:{type:t.type,version:t.version,tagOffset:t.tagOffset,hasAudio:t.hasAudio,hasVideo:t.hasVideo}}),this._readLen+=9,this._chunk=this._chunk.slice(9),i="IS";this._returnArr.length&&this._emit(f.CHUNKEDSTREAM,this._returnArr,i)}},{key:"replace",value:function(e){var t=this;this._url=e,this.drop().then(function(){t._fetch(e)})}},{key:"retry",value:function(){var e=this;if(console.log("retry"),this._ERROR)return this._fetch(this._url);this.drop().then(function(){e._fetch(e._url)})}},{key:"_start",value:function(){this._CALCEL=!1,this._ERROR=!1}},{key:"drop",value:function(){var e=this;return this._CALCEL=!0,new Promise(function(t,n){e._on(f.HTTPCANCEL,function(){t()})})}},{key:"addEventListener",value:function(e,t){switch(e){case"stream":this._on(f.CHUNKEDSTREAM,function(){t.apply(void 0,arguments)});break;case"end":this._on(f.CHUNKEDEND,function(){t.apply(void 0,arguments)});break;case"error":this._on(f.CHUNKEDERR,function(){t.apply(void 0,arguments)});break;default:this._on(e,function(){t.apply(void 0,arguments)})}}},{key:"bind",value:function(){this.addEventListener.apply(this,arguments)}},{key:"on",value:function(){this.addEventListener.apply(this,arguments)}},{key:"_on",value:function(){var e;(e=this._emitter).on.apply(e,arguments)}},{key:"_emit",value:function(){var e;(e=this._emitter).emit.apply(e,arguments)}}]),t}(p.default);t.default=y},function(e,t,n){"use strict";function r(){var e=Object.create(null);return{on:function(t,n){(e[t]||(e[t]=[])).push(n)},off:function(t,n){e[t]&&e[t].splice(e[t].indexOf(n)>>>0,1)},emit:function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];(e[t]||[]).slice().map(function(e){e.apply(void 0,r)}),(e["*"]||[]).slice().map(function(e){e.apply(void 0,[t].concat(r))})}}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.HTTPCANCEL="HTTPCANCEL",t.CHUNKEDSTREAM="CHUNKEDSTREAM",t.CHUNKEDEND="CHUNKEDEND",t.CHUNKEDERR="CHUNKEDERR"},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=(n(3),function(){function e(){r(this,e),this._type={8:"audio",9:"video",18:"script"}}return i(e,[{key:"_flvHeader",value:function(e){var t=e.slice(3),n=new DataView(t),r=n.getUint8(0),i=n.getUint8(1),a=n.getUint32(2),o=!0,u=!0;return 5!==i&&(u=!!(1&i),o=!!(1&i)),{type:"header",version:r,tagOffset:a,hasAudio:u,hasVideo:o,buffer:e}}},{key:"_flvTag",value:function(e){var t=new DataView(e),n=this._type[t.getUint8(0)],r=16777215&t.getUint32(0),i=t.getUint32(4)>>8,a=t.getUint8(7);return 0!==a&&(i|=a<<24),{type:n,dataSize:r,timeStamp:i,dataOffset:11,tagLen:r+11,buffer:e.slice(0,r+11)}}}]),e}());t.default=a},function(e,t,n){"use strict";var r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(e){"object"===("undefined"==typeof window?"undefined":i(window))&&(r=window)}e.exports=r},function(e,t,n){"use strict";function r(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(l===setTimeout)return setTimeout(e,0);if((l===r||!l)&&setTimeout)return l=setTimeout,setTimeout(e,0);try{return l(e,0)}catch(t){try{return l.call(null,e,0)}catch(t){return l.call(this,e,0)}}}function o(e){if(d===clearTimeout)return clearTimeout(e);if((d===i||!d)&&clearTimeout)return d=clearTimeout,clearTimeout(e);try{return d(e)}catch(t){try{return d.call(null,e)}catch(t){return d.call(this,e)}}}function u(){v&&h&&(v=!1,h.length?y=h.concat(y):m=-1,y.length&&s())}function s(){if(!v){var e=a(u);v=!0;for(var t=y.length;t;){for(h=y,y=[];++m<t;)h&&h[m].run();m=-1,t=y.length}h=null,v=!1,o(e)}}function c(e,t){this.fun=e,this.array=t}function f(){}var l,d,p=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:r}catch(e){l=r}try{d="function"==typeof clearTimeout?clearTimeout:i}catch(e){d=i}}();var h,y=[],v=!1,m=-1;p.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];y.push(new c(e,t)),1!==y.length||v||a(s)},c.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=f,p.addListener=f,p.once=f,p.off=f,p.removeListener=f,p.removeAllListeners=f,p.emit=f,p.prependListener=f,p.prependOnceListener=f,p.listeners=function(e){return[]},p.binding=function(e){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(e){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=function(e){return e&&"object"===(void 0===e?"undefined":r(e))&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t,n){"use strict";"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(14),u=r(o),s=n(21),c=r(s),f=n(2),l=function(){function e(){i(this,e),this._flvDemux=new u.default,this._mp4Remux=new c.default({audioTrack:this._flvDemux.audioTrack,videoTrack:this._flvDemux.videoTrack,mediaInfo:this._flvDemux.mediaInfo})}return a(e,[{key:"parse",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"MS";this._flvDemux.parse(e);var n=void 0;n="IS"===t?this._mp4Remux.generateIS():this._mp4Remux.generateMS(),(0,f.concatBuffer)(n,102400)}}]),e}();t.default=l},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(0),c=r(s),f=n(15),l=r(f),d=n(16),p=r(d),h=n(17),y=r(h),v=n(20),m=r(v),b=new c.default("FLVDemux"),_=function(e){function t(){i(this,t);var e=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._type={header:"header",video:"video",audio:"audio",script:"script"},e.AVC=new y.default({videoTrack:e._videoTrack,mediaInfo:e._mediaInfo}),e.AAC=new m.default({audioTrack:e._audioTrack,mediaInfo:e._mediaInfo}),e}return o(t,e),u(t,[{key:"parse",value:function(e){var t=!0,n=!1,r=void 0;try{for(var i,a=e[Symbol.iterator]();!(t=(i=a.next()).done);t=!0){var o=i.value,u=o.info;switch(u.type){case this._type.header:this._mediaInfo.hasVideo=u.hasVideo,this._mediaInfo.hasAudio=u.hasAudio;break;case this._type.video:if(!this._mediaInfo.hasVideo)return b.w("The FLVheader indicates hasVideo ",this._hasVideo," but accidentally enounter a video tag",o);this._parseVideo(o);break;case this._type.audio:if(!this._mediaInfo.hasAudio)return b.w("The FLVheader indicates hasVideo ",this._hasAudio," but accidentally enounter a audio tag",o);this._parseAudio(o);break;case this._type.script:this._parseScript(o)}}}catch(e){n=!0,r=e}finally{try{!t&&a.return&&a.return()}finally{if(n)throw r}}}},{key:"_parseVideo",value:function(e){var t=e.buffer,n=e.info;t=t.slice(n.dataOffset);var r=new DataView(t).getUint8(0),i=(240&r)>>>4,a=15&r;if(7!==a)return void b.e("It is only support AVC format(7), but you type code is "+a);this.AVC.parse(t.slice(1),i,a,n.timeStamp)}},{key:"_parseAudio",value:function(e){var t=e.buffer,n=e.info;t=t.slice(n.dataOffset);var r=new DataView(t),i=r.getUint8(0),a=i>>>4;if(2!==a&&10!==a)return void b.e("we do not support this type"+a);var o=(12&i)>>>2;if(!(o>=0&&o<=4))return void b.e("Invalid soundRate: "+o);o=this._flvSoundRateTable[o];var u=1&i,s=this._audioTrack.meta;s.audioSampleRate=o,s.channelCount=0===u?1:2,r=null,t=t.slice(1),2===a||10===a&&this.AAC.parse(t)}},{key:"_parseScript",value:function(e){var t=e.buffer,n=e.info,r=p.default.parseScriptData(t,n.dataOffset,n.dataSize);Object.assign(this._mediaInfo,r.onMetaData)}}]),t}(l.default);t.default=_},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(){i(this,e),this._videoTrack={type:"video",id:1,samples:[],length:0,meta:{type:"video",id:1,timescale:1e3,duration:0,codec:"",refSampleDuration:null,avcc:"",codecWidth:"",codecHeight:"",presentWidth:0,presentHeight:0}},this._audioTrack={type:"audio",id:2,sequenceNumber:0,samples:[],length:0,meta:r({type:"audio",id:2,timescale:1e3,duration:0,codec:"",refSampleDuration:null,audioSampleRate:null,config:null,channelCount:null},"codec",null)},this._flvSoundRateTable=[5500,11025,22050,44100,48e3],this._hasVideo,this._hasAudio,this._mediaInfo={audiocodecid:10,audiodatarate:62.5,audiosamplerate:48e3,audiosamplesize:16,duration:0,encoder:"Lavf57.56.101",filesize:0,height:640,stereo:!0,videocodecid:7,videodatarate:1171.875,width:368,hasVideo:!1,hasAudio:!1}}return a(e,[{key:"videoTrack",get:function(){return this._videoTrack}},{key:"audioTrack",get:function(){return this._audioTrack}},{key:"mediaInfo",get:function(){return this._mediaInfo}},{key:"MIME",get:function(){return'video/mp4; codecs="'+this._videoTrack.meta.codec+","+this._audioTrack.meta.codec+'"'}},{key:"videoMIME",get:function(){return'video/mp4; codecs="'+this._videoTrack.meta.codec+'"'}},{key:"audioMIME",get:function(){return'video/mp4; codecs="'+this._audioTrack.meta.codec+'"'}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(r),a=new i.default("AMF"),o={parseScriptData:function(e,t,n){var r={};try{var i=o.parseValue(e,t,n),u=o.parseValue(e,t+i.size,n-i.size);r[i.data]=u.data}catch(e){a.e("AMF",e.toString())}return r},parseObject:function(e,t,n){if(n<3)throw new Error("Data not enough when parse ScriptDataObject");var r=o.parseString(e,t,n),i=o.parseValue(e,t+r.size,n-r.size),a=i.objectEnd;return{data:{name:r.data,value:i.data},size:r.size+i.size,objectEnd:a}},parseVariable:function(e,t,n){return o.parseObject(e,t,n)},parseString:function(e,t,n){if(n<2)throw new Error("Data not enough when parse String");var r=new DataView(e,t,n),i=r.getUint16(0),a=void 0;return a=i>0?o.decodeUTF8(new Uint8Array(e,t+2,i)):"",{data:a,size:2+i}},parseLongString:function(e,t,n){if(n<4)throw new Error("Data not enough when parse LongString");var r=new DataView(e,t,n),i=r.getUint32(0),a=void 0;return a=i>0?o.decodeUTF8(new Uint8Array(e,t+4,i)):"",{data:a,size:4+i}},parseDate:function(e,t,n){if(n<10)throw new Error("Data size invalid when parse Date");var r=new DataView(e,t,n),i=r.getFloat64(0);return i+=60*r.getInt16(8)*1e3,{data:new Date(i),size:10}},parseValue:function(e,t,n){if(n<1)throw new Error("Data not enough when parse Value");var r=new DataView(e,t,n),i=1,u=r.getUint8(0),s=void 0,c=!1;try{switch(u){case 0:s=r.getFloat64(1),i+=8;break;case 1:s=!!r.getUint8(1),i+=1;break;case 2:var f=o.parseString(e,t+1,n-1);s=f.data,i+=f.size;break;case 3:s={};var l=0;for(9==(16777215&r.getUint32(n-4))&&(l=3);i<n-4;){var d=o.parseObject(e,t+i,n-i-l);if(d.objectEnd)break;s[d.data.name]=d.data.value,i+=d.size}if(i<=n-3){9===(16777215&r.getUint32(i-1))&&(i+=3)}break;case 8:s={},i+=4;var p=0;for(9==(16777215&r.getUint32(n-4))&&(p=3);i<n-8;){var h=o.parseVariable(e,t+i,n-i-p);if(h.objectEnd)break;s[h.data.name]=h.data.value,i+=h.size}if(i<=n-3){9===(16777215&r.getUint32(i-1))&&(i+=3)}break;case 9:s=void 0,i=1,c=!0;break;case 10:s=[];var y=r.getUint32(1);i+=4;for(var v=0;v<y;v++){var m=o.parseValue(e,t+i,n-i);s.push(m.data),i+=m.size}break;case 11:var b=o.parseDate(e,t+1,n-1);s=b.data,i+=b.size;break;case 12:var _=o.parseString(e,t+1,n-1);s=_.data,i+=_.size;break;default:i=n,a.w("AMF","Unsupported AMF value type "+u)}}catch(e){a.e("AMF",e.toString())}return{data:s,size:i,objectEnd:c}},decodeUTF8:function(e){var t="",n=0,r=0,i=0;for(e.length>=3&&239===e[0]&&187===e[1]&&191===e[2]&&(n=3);n<e.length;)if((r=e[n])<128)t+=String.fromCharCode(r),n++;else if(r>191&&r<224){if(n+1>=e.length)throw"UTF-8 Decode failed. Two byte character was truncated.";i=e[n+1],t+=String.fromCharCode((31&r)<<6|63&i),n+=2}else{if(n+2>=e.length)throw"UTF-8 Decode failed. Multi byte character was truncated.";i=e[n+1],c3=e[n+2],t+=String.fromCharCode((15&r)<<12|(63&i)<<6|63&c3),n+=3}return t}};t.default=o},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),u=r(o),s=n(1),c=n(18),f=r(c),l=new u.default("AVCDemux"),d=function(){function e(t){var n=t.videoTrack,r=t.mediaInfo;i(this,e),this._videoTrack=n,this._mediaInfo=r,this._referenceFrameRate={fixed:!0,fps:23.976,fps_num:23976,fps_den:1e3},this._naluLengthSize=4,this._timestampBase=0,this._keyFrame={1:!0,2:!1}}return a(e,[{key:"parse",value:function(e,t,n,r){var i=new DataView(e),a=i.getUint8(0),o=16777215&i.getUint32(0);switch(i=null,e=e.slice(4),a){case 0:this._parseConfig(e);break;case 1:this._parseAVC(e,{cts:o,frameType:t,timeStamp:r})}}},{key:"_parseAVC",value:function(e,t){var n=t.cts,r=t.frameType,i=t.timeStamp,a=new DataView(e),o=[],u=e.byteLength,c=0,f=!!this._keyFrame[r],d=this._naluLengthSize;this._timestampBase;for(this._timestampBase+=this._videoTrack.meta.refSampleDuration;c<u;){if(c+4>=u){l.w("not enought data to parse");break}var p=a.getUint32(c);if(3===d&&(p>>>=8),p>u-d)return void l.w("invalid nalu value");5===(31&a.getUint8(c+d))&&(f=!0);var h=new Uint8Array(e,c,d+p);o.push(h),c+=d+p}o=s.mergeTypedArray.apply(null,o),o.length&&(this._videoTrack.samples.push({slices:o,length:c,keyFrame:f,timeStamp:i,cts:n}),this._videoTrack.length+=c)}},{key:"_parseConfig",value:function(e){var t=new DataView(e),n=t.getUint8(0),r=t.getUint8(1);t.getUint8(2),t.getUint8(3);if(1!==n||0===r)return void l.e("Invalid AVCDecoderConfigurationRecord");var i=this._naluLengthSize=1+(3&t.getUint8(4));if(3!==i&&4!==i)return void l.e("Invalid NaluLengthSizeMinusOne: "+i);var a=31&t.getUint8(5);if(0===a)return void l.e('the SequenceParameterSets count couldn"t be 0');a>1&&l.e("strange count of SPS, it should be 1 as usual");for(var o=6,u=0;u<a;u++)if(!(u>0)){var s=t.getUint16(o);if(o+=2,s){var c=new Uint8Array(e,o,s);o+=s;var d=f.default.parseSPS(c);this._extrackInfo(d,c)}}this._videoTrack.meta.avcc=new Uint8Array(e),console.log("parsed already, ",this._videoTrack)}},{key:"_extrackInfo",value:function(e,t){var n=this._videoTrack.meta;n.spsInfo=e,n.codecWidth=e.codec_size.width,n.codecHeight=e.codec_size.height,n.presentWidth=e.present_size.width,n.presentHeight=e.present_size.height,console.log(e),!1!==e.frame_rate.fixed&&0!==e.frame_rate.fps_num&&0!==e.frame_rate.fps_den||(n.frameRate=this._referenceFrameRate);var r=n.frameRate,i=r.fps_den,a=r.fps_num;n.refSampleDuration=Math.floor(n.timescale*(i/a));for(var o=t.subarray(1,4),u="avc1.",s=0;s<3;s++){var c=o[s].toString(16);c.length<2&&(c="0"+c),u+=c}n.codec=u}}]),e}();t.default=d},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(19),o=function(e){return e&&e.__esModule?e:{default:e}}(a),u=function(){function e(){r(this,e)}return i(e,null,[{key:"_ebsp2rbsp",value:function(e){for(var t=e,n=t.byteLength,r=new Uint8Array(n),i=0,a=0;a<n;a++)a>=2&&3===t[a]&&0===t[a-1]&&0===t[a-2]||(r[i]=t[a],i++);return new Uint8Array(r.buffer,0,i)}},{key:"parseSPS",value:function(t){var n=e._ebsp2rbsp(t),r=new o.default(n);r.readByte();var i=r.readByte();r.readByte();var a=r.readByte();r.readUEG();var u=e.getProfileString(i),s=e.getLevelString(a),c=1,f=420,l=[0,420,422,444],d=8;if((100===i||110===i||122===i||244===i||44===i||83===i||86===i||118===i||128===i||138===i||144===i)&&(c=r.readUEG(),3===c&&r.readBits(1),c<=3&&(f=l[c]),d=r.readUEG()+8,r.readUEG(),r.readBits(1),r.readBool()))for(var p=3!==c?8:12,h=0;h<p;h++)r.readBool()&&(h<6?e._skipScalingList(r,16):e._skipScalingList(r,64));r.readUEG();var y=r.readUEG();if(0===y)r.readUEG();else if(1===y){r.readBits(1),r.readSEG(),r.readSEG();for(var v=r.readUEG(),m=0;m<v;m++)r.readSEG()}r.readUEG(),r.readBits(1);var b=r.readUEG(),_=r.readUEG(),g=r.readBits(1);0===g&&r.readBits(1),r.readBits(1);var w=0,k=0,S=0,U=0;r.readBool()&&(w=r.readUEG(),k=r.readUEG(),S=r.readUEG(),U=r.readUEG());var T=1,A=1,E=0,x=!0,D=0,O=0;if(r.readBool()){if(r.readBool()){var C=r.readByte(),L=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],j=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];C>0&&C<16?(T=L[C-1],A=j[C-1]):255===C&&(T=r.readByte()<<8|r.readByte(),A=r.readByte()<<8|r.readByte())}if(r.readBool()&&r.readBool(),r.readBool()&&(r.readBits(4),r.readBool()&&r.readBits(24)),r.readBool()&&(r.readUEG(),r.readUEG()),r.readBool()){var V=r.readBits(32),R=r.readBits(32);x=r.readBool(),D=R,O=2*V,E=D/O}}var M=1;1===T&&1===A||(M=T/A);var B=0,z=0;if(0===c)B=1,z=2-g;else{var P=3===c?1:2,F=1===c?2:1;B=P,z=F*(2-g)}var I=16*(b+1),H=16*(_+1)*(2-g);I-=(w+k)*B,H-=(S+U)*z;var N=Math.ceil(I*M);return r.destroy(),r=null,{profile_string:u,level_string:s,bit_depth:d,chroma_format:f,chroma_format_string:e.getChromaFormatString(f),frame_rate:{fixed:x,fps:E,fps_den:O,fps_num:D},sar_ratio:{width:T,height:A},codec_size:{width:I,height:H},present_size:{width:N,height:H}}}},{key:"_skipScalingList",value:function(e,t){for(var n=8,r=8,i=0,a=0;a<t;a++)0!==r&&(i=e.readSEG(),r=(n+i+256)%256),n=0===r?n:r}},{key:"getProfileString",value:function(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}},{key:"getLevelString",value:function(e){return(e/10).toFixed(1)}},{key:"getChromaFormatString",value:function(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}}]),e}();t.default=u},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(){function e(t){r(this,e),this.TAG="ExpGolomb",this._buffer=t,this._buffer_index=0,this._total_bytes=t.byteLength,this._total_bits=8*t.byteLength,this._current_word=0,this._current_word_bits_left=0}return i(e,[{key:"destroy",value:function(){this._buffer=null}},{key:"_fillCurrentWord",value:function(){var e=this._total_bytes-this._buffer_index;if(e<=0)throw new Error("ExpGolomb: _fillCurrentWord() but no bytes available");var t=Math.min(4,e),n=new Uint8Array(4);n.set(this._buffer.subarray(this._buffer_index,this._buffer_index+t)),this._current_word=new DataView(n.buffer).getUint32(0,!1),this._buffer_index+=t,this._current_word_bits_left=8*t}},{key:"readBits",value:function(e){if(e>32)throw new Error("ExpGolomb: readBits() bits exceeded max 32bits!");if(e<=this._current_word_bits_left){var t=this._current_word>>>32-e;return this._current_word<<=e,this._current_word_bits_left-=e,t}var n=this._current_word_bits_left?this._current_word:0;n>>>=32-this._current_word_bits_left;var r=e-this._current_word_bits_left;this._fillCurrentWord();var i=Math.min(r,this._current_word_bits_left),a=this._current_word>>>32-i;return this._current_word<<=i,this._current_word_bits_left-=i,n=n<<i|a}},{key:"readBool",value:function(){return 1===this.readBits(1)}},{key:"readByte",value:function(){return this.readBits(8)}},{key:"_skipLeadingZero",value:function(){var e=void 0;for(e=0;e<this._current_word_bits_left;e++)if(0!=(this._current_word&2147483648>>>e))return this._current_word<<=e,this._current_word_bits_left-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}},{key:"readUEG",value:function(){var e=this._skipLeadingZero();return this.readBits(e+1)-1}},{key:"readSEG",value:function(){var e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}]),e}();t.default=a},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),o=function(e){return e&&e.__esModule?e:{default:e}}(a),u=new o.default("AACDemux"),s=function(){function e(t){var n=t.audioTrack,i=t.mediaInfo;r(this,e),this._audioTrack=n,this._mediaInfo=i,this._mpegSamplingRates=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350],this._timestampBase=0}return i(e,[{key:"parse",value:function(e){0===new DataView(e).getUint8(0)?this._parseConfig(e.slice(1)):this._parseAAC(e.slice(1))}},{key:"_parseAAC",value:function(e){var t=new Uint8Array(e),n=this._timestampBase;this._timestampBase+=this._audioTrack.meta.refSampleDuration,this._audioTrack.samples.push({unit:t,dts:n,pts:n,length:t.byteLength}),this._audioTrack.length+=t.byteLength}},{key:"_parseConfig",value:function(e){var t=new Uint8Array(e),n=this._audioTrack.meta,r=void 0,i=navigator.userAgent.toLowerCase(),a=t[0]>>>3,o=(7&t[0])<<1|t[1]>>>7,s=null;if(o<0||o>=this._mpegSamplingRates.length)return void u.e("invalid samplingFreIndex: "+o);var c=this._mpegSamplingRates[o],f=(120&t[1])>>>3;if(f<0||f>7)return void u.e("invalid channel Count: "+f);5===a&&(s=(7&t[1])<<1|t[2]>>>7,audioExtensionObjectType=(124&t[2])>>>2),u.i("userAgent is "+i),u.i("the audioObjectType in AAC is "+a),-1!==i.indexOf("firefox")?o>=6?(a=5,r=new Array(4),s=o-3):(a=2,r=new Array(2),s=o):-1!==i.indexOf("android")?(a=2,r=new Array(2),s=o):(a=5,s=o,r=new Array(4),o>=6?s=o-3:1===f&&(a=2,r=new Array(2),s=o),r[0]=a<<3,r[0]|=(15&o)>>>1,r[1]=(15&o)<<7,r[1]|=(15&f)<<3),r[0]=a<<3,r[0]|=(15&o)>>>1,r[1]=(15&o)<<7,r[1]|=(15&f)<<3,5===a&&(r[1]|=(15&s)>>>1,r[2]=(1&s)<<7,r[2]|=8,r[3]=0),n.config=r,n.audioSampleRate=c,n.channelCount=f,n.codec="mp4a.40."+a,n.refSampleDuration=Math.floor(1024/n.audioSampleRate*n.timescale)}}]),e}();t.default=s},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(22),o=function(e){return e&&e.__esModule?e:{default:e}}(a),u=n(1),s=function(){function e(t){var n=t.audioTrack,i=t.videoTrack,a=t.mediaInfo;r(this,e),this._audioTrack=n,this._videoTrack=i,this._mediaInfo=a,this._seq=0,this._lastTimeStamp,this._lastDuration}return i(e,[{key:"generateIS",value:function(){var e=this._mediaInfo,t=e.hasVideo,n=e.hasAudio;if(t&&n)return o.default.initBox(this._videoTrack.meta,this._audioTrack.meta)}},{key:"generateMS",value:function(){var e=(new Uint8Array(0),new Uint8Array(0));return this._videoTrack.samples.length&&this._remuxVideo(),this._audioTrack.samples.length&&(e=this._remuxAudio()),this._videoTrack.samples=[],this._audioTrack.samples=[],this._videoTrack.length=this._audioTrack.length=0,(0,u.mergeTypedArray)(e)}},{key:"_remuxVideoMdat",value:function(){var e=this,t=o.default.mdat(this._videoTrack.length),n=8,r=this._videoTrack,i=r.meta,a=r.samples,u=[],s=a[0].dts,c=void 0,f=void 0,l=void 0,d=void 0;return console.log(this._videoTrack),console.log(this._audioTrack),a.forEach(function(r,o){var s=r.dts,p=r.cts,h=s+p,y=r.slices.byteLength;t.set(r.slices,n);var v=r.keyFrame;e._lastTimeStamp?(f=i.refSampleDuration,e._lastDuration=f,e._lastTimeStamp=r.timeStamp):a[o+1]&&0!==o?f=a[o+1].timeStamp-r.timeStamp:(d=a.length>1&&o!==a.length-1?a[1].timeStamp-a[0].timeStamp:e._lastDuration,c=r-e._lastTimeStamp,l=c-e._lastDuration,f=d+l,e._lastDuration=f,e._lastTimeStamp=r.timeStamp),i.duration+=f,u.push({dts:s,pts:h,cts:p,length:r.length,keyFrame:v,sampleSize:y,duration:f,chunkOffset:n,flags:{isLeading:0,dependsOn:v?2:1,isDepended:v?1:0,hasRedundancy:0,isNonSync:v?0:1}}),n+=r.length}),console.log(u),r.samples=u,this._seq++,{videoMdat:t,baseDts:s}}},{key:"_remuxAudio",value:function(){var e=this._remuxAudioMdat(),t=e.audioMdat,n=e.baseDts,r=o.default.moof(this._audioTrack,n,this._seq);return(0,u.mergeTypedArray)(r,t)}},{key:"_remuxVideo",value:function(){var e=this._remuxVideoMdat(),t=e.videoMdat,n=e.baseDts,r=o.default.moof(this._videoTrack,n,this._seq);return(0,u.mergeTypedArray)(r,t)}},{key:"_remuxAudioMdat",value:function(){var e=o.default.mdat(this._audioTrack.length),t=8,n=this._audioTrack,r=n.meta,i=r.refSampleDuration,a=n.samples,u=a[0].dts,s=[];return a.forEach(function(n,r){var a=n.dts,o=n.pts;e.set(n.unit,t);var u=n.unit.byteLength;s.push({dts:a,pts:o,cts:0,sampleSize:u,duration:i,chunkOffset:t,flags:{isLeading:0,dependsOn:1,isDepended:0,hasRedundancy:0}}),t+=u}),n.samples=s,this._seq++,{baseDts:u,audioMdat:e}}}]),e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={};r.types={avc1:[],avcC:[],btrt:[],dinf:[],dref:[],esds:[],ftyp:[],hdlr:[],mdat:[],mdhd:[],mdia:[],mfhd:[],minf:[],moof:[],moov:[],mp4a:[],".mp3":[],mvex:[],mvhd:[],pasp:[],sdtp:[],stbl:[],stco:[],stsc:[],stsd:[],stsz:[],stts:[],tfdt:[],tfhd:[],traf:[],trak:[],trun:[],trex:[],tkhd:[],vmhd:[],smhd:[],free:[],stss:[],ctts:[]},r.symbolValue={FTYP:new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]),HDLR_VIDEO:new Uint8Array([0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0]),HDLR_AUDIO:new Uint8Array([0,0,0,0,0,0,0,0,115,111,117,110,0,0,0,0,0,0,0,0,0,0,0,0,83,111,117,110,100,72,97,110,100,108,101,114,0]),STSC:new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1]),FSTTS:new Uint8Array([0,0,0,0,0,0,0,0]),FSTSC:new Uint8Array([0,0,0,0,0,0,0,0]),FSTSZ:new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]),FSTCO:new Uint8Array([0,0,0,0,0,0,0,0]),STTS:new Uint8Array([0,0,0,0]),CTTS:new Uint8Array([0,0,0,0]),STCO:new Uint8Array([0,0,0,0]),STSZ:new Uint8Array([0,0,0,0]),STSD:new Uint8Array([0,0,0,0,0,0,0,1]),DREF:new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1]),VMHD:new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]),SMHD:new Uint8Array([0,0,0,0,0,0,0,0]),STSS:new Uint8Array([0,0,0,0])},r.box=function(e){var t=8,n=Array.prototype.slice.call(arguments,1);n.forEach(function(e){t+=e.byteLength});var r=new Uint8Array(t);r[0]=t>>24&255,r[1]=t>>16&255,r[2]=t>>8&255,r[3]=255&t,r.set(e,4);var i=8;return n.forEach(function(e){r.set(e,i),i+=e.byteLength}),r},r.free=function(){return r.box(r.types.free)},r.moof=function(e,t,n){return r.box(r.types.moof,r.mfhd(n),r.traf(e,t))},r.mfhd=function(e){return r.fragmentBox(r.types.mfhd,e)},r.mdat=function(e){e+=8;var t=new Uint8Array(e);return new DataView(t.buffer).setUint32(0,e),t.set(r.types.mdat,4),t},r.traf=function(e,t){var n=r.tfhd(e.id),i=r.tfdt(t),a=r.sdtp(e),o=r.trun(e,64+a.byteLength+8);return r.box(r.types.traf,n,i,o,a)},r.trun=function(e,t){var n=e.samples||[],i=n.length,a=12+16*i,o=new Uint8Array(a);return t+=8+a,o.set([0,0,15,1,i>>>24&255,i>>>16&255,i>>>8&255,255&i,t>>>24&255,t>>>16&255,t>>>8&255,255&t],0),n.forEach(function(e,t){var n=e.duration,r=e.sampleSize,i=e.flags,a=e.cts;o.set([n>>>24&255,n>>>16&255,n>>>8&255,255&n,r>>>24&255,r>>>16&255,r>>>8&255,255&r,i.isLeading<<2|i.dependsOn,i.isDepended<<6|i.hasRedundancy<<4|i.isNonSync,0,0,a>>>24&255,a>>>16&255,a>>>8&255,255&a],12+16*t)}),r.box(r.types.trun,o)},r.sdtp=function(e){for(var t,n=e.samples||[],i=n.length,a=new Uint8Array(i+4),o=0;o<i;o++)t=n[o].flags,a[o+4]=t.dependsOn<<4|t.isDepended<<2|t.hasRedundancy;return r.box(r.types.sdtp,a)},r.tfhd=function(e){return r.fragmentBox(r.types.tfhd,e)},r.tfdt=function(e){return r.fragmentBox(r.types.tfdt,e)},r.fragmentBox=function(e,t){var n=new Uint8Array([0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t]);return r.box(e,n)},r.ftyp=function(){return r.box(r.types.ftyp,r.symbolValue.FTYP)},r.initBox=function(e,t){var n=r.box(r.types.ftyp,r.symbolValue.FTYP),i=r.fmoov(e,t),a=new Uint8Array(n.byteLength+i.byteLength);return a.set(n,0),a.set(i,n.byteLength),a},r.fmoov=function(e,t){var n=r.mvhd(e.timescale,e.duration);return t?r.box(r.types.moov,n,r.trak(e),r.trak(t),r.mvex(1,2)):r.box(r.types.moov,n,r.trak(e),r.mvex(1))},r.moov=function(e,t,n){return r.box(r.types.moov,e,t)},r.mvex=function(e,t){return t?r.box(r.types.mvex,r.trex(e),r.trex(t)):r.box(r.types.mvex,r.trex(e))},r.trex=function(e){var t=new Uint8Array([0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return r.box(r.types.trex,t)},r.trak=function(e){return r.box(r.types.trak,r.tkhd(e),r.mdia(e))},r.mdia=function(e){return r.box(r.types.mdia,r.mdhd(e),r.hdlr(e),r.minf(e))},r.hdlr=function(e){return"video"===e.type?r.box(r.types.hdlr,r.symbolValue.HDLR_VIDEO):r.box(r.types.hdlr,r.symbolValue.HDLR_AUDIO)},r.minf=function(e){var t="video"===e.type?r.box(r.types.vmhd,r.symbolValue.VMHD):r.box(r.types.smhd,r.symbolValue.SMHD);return r.box(r.types.minf,t,r.dinf(),r.fstbl(e))},r.dinf=function(){var e=r.box(r.types.dref,r.symbolValue.DREF);return r.box(r.types.dinf,e)},r.stss=function(e){var t=e.track,n=t.samples,i=[];n.forEach(function(e,t){e.keyframe&&i.push(t)});var a=new DataView(new ArrayBuffer(4+4*i.length));a.setUint32(0,i.length);var o=4;return i.forEach(function(e){a.setUint32(o,e+1),o+=4}),r.box(r.types.stss,r.symbolValue.STSS,new Uint8Array(a.buffer))},r.stbl=function(e){return"audio"===e.type?r.box(r.types.stbl,r.stsd(e),r.stts(e),r.stsc(e),r.stsz(e),r.stco(e)):r.box(r.types.stbl,r.stsd(e),r.stts(e),r.ctts(e),r.stsc(e),r.stss(e),r.stsz(e),r.stco(e))},r.fstbl=function(e){return r.box(r.types.stbl,r.stsd(e),r.box(r.types.stts,r.symbolValue.FSTTS),r.box(r.types.stsc,r.symbolValue.FSTSC),r.box(r.types.stsz,r.symbolValue.FSTSZ),r.box(r.types.stco,r.symbolValue.FSTCO))},r.stts=function(e){var t=e.track,n=[],i=t.samples,a=i[0].duration,o=0,u=i.length;i.forEach(function(e,t){var r=e.duration;r===a?o++:(n.push([o,a]),a=r,o=1),t===u-1&&n.push([o,a])});var s=new DataView(new ArrayBuffer(8*n.length+4));s.setUint32(0,n.length);var c=4;return n.forEach(function(e){s.setUint32(c,e[0]),s.setUint32(c+4,e[1]),c+=8}),r.box(r.types.stts,r.symbolValue.STTS,new Uint8Array(s.buffer))},r.ctts=function(e){var t=e.track,n=[],i=t.samples,a=i[0].cts,o=0,u=i.length;i.forEach(function(e,t){var r=e.cts;r===a?o++:(n.push([o,a]),a=r,o=1),t===u-1&&n.push([o,a])});var s=new DataView(new ArrayBuffer(8*n.length+4));s.setUint32(0,n.length);var c=4;return n.forEach(function(e){s.setUint32(c,e[0]),s.setUint32(c+4,e[1]),c+=8}),r.box(r.types.ctts,r.symbolValue.CTTS,new Uint8Array(s.buffer))},r.stco=function(e){var t=e.track.samples,n=new DataView(new ArrayBuffer(4*t.length+4));n.setUint32(0,t.length);var i=4;return t.forEach(function(e){n.setUint32(i,e.chunkOffset),i+=4}),r.box(r.types.stco,r.symbolValue.STCO,new Uint8Array(n.buffer))},r.stsc=function(e){return r.box(r.types.stsc,r.symbolValue.STSC)},r.stsz=function(e){var t=e.track.samples,n=new DataView(new ArrayBuffer(4*t.length+8));n.setUint32(0,0),n.setUint32(4,t.length);var i=8;return t.forEach(function(e){var t=e.sampleSize;n.setUint32(i,t),i+=4}),r.box(r.types.stsz,r.symbolValue.STSZ,new Uint8Array(n.buffer))},r.stsd=function(e){return"video"===e.type?r.box(r.types.stsd,r.symbolValue.STSD,r.avc1(e)):"mp3"===e.codec?r.box(r.types.stsd,r.symbolValue.STSD,r.mp3(e)):r.box(r.types.stsd,r.symbolValue.STSD,r.mp4a(e))},r.mp3=function(e){var t=e.channelCount,n=(e.audioSampleRate,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,t,0,16,0,0,0,0,sampleRate>>>8&255,255&sampleRate,0,0]));return r.box(r.types[".mp3"],n)},r.mp4a=function(e){var t=e.channelCount,n=e.audioSampleRate,i=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,t,0,16,0,0,0,0,n>>>8&255,255&n,0,0]);return r.box(r.types.mp4a,i,r.esds(e))},r.esds=function(e){var t=e.config||[],n=t.length,i=new Uint8Array([0,0,0,0,3,23+n,0,1,0,4,15+n,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([n]).concat(t).concat([6,1,2]));return r.box(r.types.esds,i)},r.avc1=function(e){var t=e.avcc,n=e.codecWidth,i=e.codecHeight,a=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n>>>8&255,255&n,i>>>8&255,255&i,0,72,0,0,0,72,0,0,0,0,0,0,0,1,15,118,105,108,108,97,105,110,104,114,47,97,118,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,255,255]);return r.box(r.types.avc1,a,r.box(r.types.avcC,t))},r.mdhd=function(e){var t=e.timescale,n=e.duration;return r.box(r.types.mdhd,new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,n>>>24&255,n>>>16&255,n>>>8&255,255&n,85,196,0,0]))},r.tkhd=function(e){var t=e.id,n=e.presentWidth,i=(e.track,e.duration),a=e.presentHeight,o=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,n>>>8&255,255&n,0,0,a>>>8&255,255&a,0,0]),u=new DataView(o.buffer);return"video"===e.type&&(u.setUint16(34,0),u.setUint16(36,0)),r.box(r.types.tkhd,o)},r.mvhd=function(e,t){return r.box(r.types.mvhd,new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]))},r.init=function(){Object.keys(r.types).forEach(function(e){r.types[e]=[e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]})},r.init(),t.default=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,