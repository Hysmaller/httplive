!function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=7)}([function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t){r(this,e),this.name=t}return i(e,[{key:"w",value:function(){for(var e,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];(e=console).warn.apply(e,["["+this.name+"]====> "+(new Date).toTimeString()+"\n              : "].concat(n))}},{key:"l",value:function(e){console.log("["+this.name+"]====> "+(new Date).toTimeString()+"\n              : "+e)}},{key:"e",value:function(e){console.error("["+this.name+"]====> "+(new Date).toTimeString()+"\n              : "+e)}},{key:"i",value:function(e){console.info("["+this.name+"]====> "+(new Date).toTimeString()+"\n              : "+e)}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.HTTPCANCEL="HTTPCANCEL",t.CHUNKEDPROGRESS="CHUNKEDPROGRESS",t.CHUNKEDSTREAM="CHUNKEDSTREAM",t.CHUNKEDEND="CHUNKEDEND",t.CHUNKEDERR="CHUNKEDERR"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.mergeBuffer=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t.reduce(function(e,t){return e+t.byteLength},0),i=new Uint8Array(r),o=0;return t.forEach(function(e){i.set(new Uint8Array(e),o),o+=e.byteLength}),i.buffer},t.mergeTypedArray=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t.reduce(function(e,t){return e+t.byteLength},0),i=new Uint8Array(r),o=0;return t.forEach(function(e){i.set(e,o),o+=e.byteLength}),i},t.mergeUnit8Array=function(e){var t=e.reduce(function(e,t){return e+t.byteLength},0),n=new Uint8Array(t),r=0;return e.forEach(function(e){n.set(e,r),r+=e.byteLength}),n}},function(e,t,n){"use strict";t.download=function(e){var t=new Blob(e,{type:"application/octet-binary"}),n=window.URL.createObjectURL(t),r=document.createElement("a");r.style.display="none",r.href=n,r.download="test.mp4",document.body.appendChild(r),r.click(),setTimeout(function(){document.body.removeChild(r),window.URL.revokeObjectURL(n)},100)},t.downfile=function(e,t){var n=new File([e],"ce.mp4",{type:"video/mp4"}),r=window.URL.createObjectURL(n),i=document.createElement("a");i.style.display="none",i.href=r,i.download=t+".mp4",document.body.appendChild(i),i.click(),setTimeout(function(){document.body.removeChild(i),window.URL.revokeObjectURL(r)},100)},t.downFLV=function(e,t){var n=new File([e],"ce.flv",{type:"video/x-flv"}),r=window.URL.createObjectURL(n),i=document.createElement("a");i.style.display="none",i.href=r,i.download=t+".flv",document.body.appendChild(i),i.click(),setTimeout(function(){document.body.removeChild(i),window.URL.revokeObjectURL(r)},100)},t.downAudio=function(e){var t=new File([e],"ce.mpeg",{type:"audio/mpeg"}),n=window.URL.createObjectURL(t),r=document.createElement("a");r.style.display="none",r.href=n,r.download="test.mp3",document.body.appendChild(r),r.click(),setTimeout(function(){document.body.removeChild(r),window.URL.revokeObjectURL(n)},100)},t.mergebox=function(){var e=Array.prototype.slice.call(arguments),t=e.reduce(function(e,t){return e+t.byteLength},0),n=new Uint8Array(t),r=0;return e.forEach(function(e){e=new Uint8Array(e),n.set(e,r),r+=e.byteLength}),n},t.concatBuffer=function(){var e=new ArrayBuffer(0),n=t;return function(t,r){e=n.mergebox(e,t.buffer),e.byteLength>r&&n.downfile(e,"video")}}(),t.stop=function(){var e=0;return function(t){return t<=e++}}()},function(e,t,n){"use strict";function r(){var e=Object.create(null);return{on:function(t,n){(e[t]||(e[t]=[])).push(n)},off:function(t,n){e[t]&&e[t].splice(e[t].indexOf(n)>>>0,1)},emit:function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];(e[t]||[]).slice().map(function(e){e.apply(void 0,r)}),(e["*"]||[]).slice().map(function(e){e.apply(void 0,[t].concat(r))})}}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r},function(e,t,n){"use strict";function r(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function o(e){if(l===setTimeout)return setTimeout(e,0);if((l===r||!l)&&setTimeout)return l=setTimeout,setTimeout(e,0);try{return l(e,0)}catch(t){try{return l.call(null,e,0)}catch(t){return l.call(this,e,0)}}}function a(e){if(d===clearTimeout)return clearTimeout(e);if((d===i||!d)&&clearTimeout)return d=clearTimeout,clearTimeout(e);try{return d(e)}catch(t){try{return d.call(null,e)}catch(t){return d.call(this,e)}}}function u(){v&&p&&(v=!1,p.length?y=p.concat(y):m=-1,y.length&&s())}function s(){if(!v){var e=o(u);v=!0;for(var t=y.length;t;){for(p=y,y=[];++m<t;)p&&p[m].run();m=-1,t=y.length}p=null,v=!1,a(e)}}function c(e,t){this.fun=e,this.array=t}function f(){}var l,d,h=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:r}catch(e){l=r}try{d="function"==typeof clearTimeout?clearTimeout:i}catch(e){d=i}}();var p,y=[],v=!1,m=-1;h.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];y.push(new c(e,t)),1!==y.length||v||o(s)},c.prototype.run=function(){this.fun.apply(null,this.array)},h.title="browser",h.browser=!0,h.env={},h.argv=[],h.version="",h.versions={},h.on=f,h.addListener=f,h.once=f,h.off=f,h.removeListener=f,h.removeAllListeners=f,h.emit=f,h.prependListener=f,h.prependOnceListener=f,h.listeners=function(e){return[]},h.binding=function(e){throw new Error("process.binding is not supported")},h.cwd=function(){return"/"},h.chdir=function(e){throw new Error("process.chdir is not supported")},h.umask=function(){return 0}},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(4),a=function(e){return e&&e.__esModule?e:{default:e}}(o),u=n(1),s=function(){function e(t){r(this,e),this._config=Object.assign({withCredentials:!0,timeout:0,retry:1,cors:!0,chunkResolve:function(){}},t),this._url,this._xhr,this._len=0,this._retry=this._config.retry,this._cors=this._config.cors,this._retryTimer,this._emitter=new a.default}return i(e,[{key:"addEventListener",value:function(e,t){switch(e){case"chunk":this._on(u.CHUNKEDPROGRESS,function(){t.apply(void 0,arguments)});break;case"end":this._on(u.CHUNKEDEND,function(){t.apply(void 0,arguments)});break;case"error":this._on(u.CHUNKEDERR,function(){t.apply(void 0,arguments)});break;default:this._on(e,function(){t.apply(void 0,arguments)})}}},{key:"bind",value:function(){this.addEventListener.apply(this,arguments)}},{key:"on",value:function(){this.addEventListener.apply(this,arguments)}},{key:"_on",value:function(){var e;(e=this._emitter).on.apply(e,arguments)}},{key:"_emit",value:function(){var e;(e=this._emitter).emit.apply(e,arguments)}},{key:"withCredentials",get:function(){return this._config.withCredentials}},{key:"timeout",get:function(){return this._config.timeout}},{key:"reconnection",get:function(){return this._config.reconnection}}]),e}();t.default=s},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var i=n(8),o=r(i),a=n(18),u=r(a),s=n(28),c=r(s),f=(n(3),new o.default("http://6721.liveplay.myqcloud.com/live/6721_4a3bb6d2266e0b8903b31af6389e78f1.flv")),l=new u.default,d=new c.default(document.getElementById("videoTag"));document.getElementById("videoTag").addEventListener("error",function(e){console.error(e)},!1);var h=void 0,p=void 0;f.bind("stream",function(e,t){if("IS"===t){var n=l.parse(e,t),r=n.videoIS,i=n.audioIS,o=n.videoMime,a=n.audioMime;h=d._addSourceBuffer(o),p=d._addSourceBuffer(a),h.appendBuffer(r),p.appendBuffer(i)}else{var u=l.parse(e,t),s=u.audioMS,c=u.videoMS;s&&p.appendBuffer(s),c&&h.appendBuffer(c),document.getElementById("videoTag").play()}})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),c=n(4),f=(r(c),n(1)),l=n(2),d=n(9),h=r(d),p=(n(3),n(14)),y=r(p),v=n(15),m=r(v),_=n(16),b=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments[1];i(this,t);var r=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this)),a=void 0===e?"undefined":u(e);switch("object"===a?n=e:"string"===a&&(r._url=e),r._browser=(0,_.detect)(),r._browser&&r._browser.name){case"chrome":r._xhr=new m.default(n);break;case"firefox":r._xhr=new y.default(n);break;case"edge":default:throw new Error('your browser don"t support fetch API, please use modern Browser')}return r._xhr.on("chunk",r.readChunk.bind(r)),r._emitter=r._xhr._emitter,r._chunk=new ArrayBuffer(0),r._bufferLen,r._readLen=0,r._returnArr=[],e&&r.send(e),r}return a(t,e),s(t,[{key:"send",value:function(e){console.log(this._xhr),this._xhr.send(e||this._url)}},{key:"readChunk",value:function(e){this._chunk=(0,l.mergeBuffer)(this._chunk,e);var t=void 0,n=void 0,r=void 0;this._bufferLen=this._chunk.byteLength,this._readLen=0,this._returnArr=[];for(var i="MS";this._bufferLen-this._readLen>11;)if(n=new Uint8Array(this._chunk),70!==n[0]||76!==n[1]||86!==n[2]){r=new DataView(this._chunk);r.getUint32(0);if(this._readLen+=4,this._bufferLen<11+this._readLen)break;var o=16777215&r.getUint32(4);if(console.log("dataLength is",r),console.log("dataSize is",o),this._bufferLen-this._readLen<11+o)break;console.log(this._returnArr),t=this._flvTag(this._chunk.slice(4)),this._returnArr.push({buffer:t.buffer,info:{type:t.type,dataOffset:t.dataOffset,dataSize:t.dataSize,timeStamp:t.timeStamp,tagLen:t.tagLen}}),this._chunk=this._chunk.slice(t.tagLen+4),this._readLen+=t.tagLen}else t=this._flvHeader(this._chunk.slice(0,9)),this._returnArr.push({buffer:t.buffer,info:{type:t.type,version:t.version,tagOffset:t.tagOffset,hasAudio:t.hasAudio,hasVideo:t.hasVideo}}),this._readLen+=9,this._chunk=this._chunk.slice(9),i="IS";this._returnArr.length&&this._emitter.emit(f.CHUNKEDSTREAM,this._returnArr,i)}},{key:"replace",value:function(e){this._xhr.replace(e)}},{key:"retry",value:function(){this._xhr.retry()}},{key:"drop",value:function(){this._xhr.drop()}},{key:"addEventListener",value:function(e,t){switch(e){case"stream":this._emitter.on(f.CHUNKEDSTREAM,function(){t.apply(void 0,arguments)});break;case"chunk":this._emitter.on(f.CHUNKEDPROGRESS,function(){t.apply(void 0,arguments)});break;case"end":this._emitter.on(f.CHUNKEDEND,function(){t.apply(void 0,arguments)});break;case"error":this._emitter.on(f.CHUNKEDERR,function(){t.apply(void 0,arguments)});break;default:this._emitter.on(e,function(){t.apply(void 0,arguments)})}}},{key:"bind",value:function(){this.addEventListener.apply(this,arguments)}},{key:"on",value:function(){this.addEventListener.apply(this,arguments)}}]),t}(h.default);t.default=b},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=(n(10),function(){function e(){r(this,e),this._type={8:"audio",9:"video",18:"script"}}return i(e,[{key:"_flvHeader",value:function(e){var t=e.slice(3),n=new DataView(t),r=n.getUint8(0),i=n.getUint8(1),o=n.getUint32(2),a=!0,u=!0;return 5!==i&&(u=!!(1&i),a=!!(1&i)),{type:"header",version:r,tagOffset:o,hasAudio:u,hasVideo:a,buffer:e}}},{key:"_flvTag",value:function(e){var t=new DataView(e),n=this._type[t.getUint8(0)],r=16777215&t.getUint32(0),i=t.getUint32(4)>>8,o=t.getUint8(7);return 0!==o&&(i|=o<<24),{type:n,dataSize:r,timeStamp:i,dataOffset:11,tagLen:r+11,buffer:e.slice(0,r+11)}}}]),e}());t.default=o},function(e,t,n){"use strict";(function(e,r){function i(e,n){var r={seen:[],stylize:a};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),y(n)?r.showHidden=n:n&&t._extend(r,n),w(r.showHidden)&&(r.showHidden=!1),w(r.depth)&&(r.depth=2),w(r.colors)&&(r.colors=!1),w(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=o),s(r,e,r.depth)}function o(e,t){var n=i.styles[t];return n?"["+i.colors[n][0]+"m"+e+"["+i.colors[n][1]+"m":e}function a(e,t){return e}function u(e){var t={};return e.forEach(function(e,n){t[e]=!0}),t}function s(e,n,r){if(e.customInspect&&n&&O(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,e);return b(i)||(i=s(e,i,r)),i}var o=c(e,n);if(o)return o;var a=Object.keys(n),y=u(a);if(e.showHidden&&(a=Object.getOwnPropertyNames(n)),T(n)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return f(n);if(0===a.length){if(O(n)){var v=n.name?": "+n.name:"";return e.stylize("[Function"+v+"]","special")}if(S(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(E(n))return e.stylize(Date.prototype.toString.call(n),"date");if(T(n))return f(n)}var m="",_=!1,g=["{","}"];if(p(n)&&(_=!0,g=["[","]"]),O(n)){m=" [Function"+(n.name?": "+n.name:"")+"]"}if(S(n)&&(m=" "+RegExp.prototype.toString.call(n)),E(n)&&(m=" "+Date.prototype.toUTCString.call(n)),T(n)&&(m=" "+f(n)),0===a.length&&(!_||0==n.length))return g[0]+m+g[1];if(r<0)return S(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special");e.seen.push(n);var w;return w=_?l(e,n,r,y,a):a.map(function(t){return d(e,n,r,y,t,_)}),e.seen.pop(),h(w,m,g)}function c(e,t){if(w(t))return e.stylize("undefined","undefined");if(b(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return _(t)?e.stylize(""+t,"number"):y(t)?e.stylize(""+t,"boolean"):v(t)?e.stylize("null","null"):void 0}function f(e){return"["+Error.prototype.toString.call(e)+"]"}function l(e,t,n,r,i){for(var o=[],a=0,u=t.length;a<u;++a)D(t,String(a))?o.push(d(e,t,n,r,String(a),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(d(e,t,n,r,i,!0))}),o}function d(e,t,n,r,i,o){var a,u,c;if(c=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]},c.get?u=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(u=e.stylize("[Setter]","special")),D(r,i)||(a="["+i+"]"),u||(e.seen.indexOf(c.value)<0?(u=v(n)?s(e,c.value,null):s(e,c.value,n-1),u.indexOf("\n")>-1&&(u=o?u.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+u.split("\n").map(function(e){return"   "+e}).join("\n"))):u=e.stylize("[Circular]","special")),w(a)){if(o&&i.match(/^\d+$/))return u;a=JSON.stringify(""+i),a.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=e.stylize(a,"string"))}return a+": "+u}function h(e,t,n){var r=0;return e.reduce(function(e,t){return r++,t.indexOf("\n")>=0&&r++,e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}function p(e){return Array.isArray(e)}function y(e){return"boolean"==typeof e}function v(e){return null===e}function m(e){return null==e}function _(e){return"number"==typeof e}function b(e){return"string"==typeof e}function g(e){return"symbol"===(void 0===e?"undefined":L(e))}function w(e){return void 0===e}function S(e){return k(e)&&"[object RegExp]"===A(e)}function k(e){return"object"===(void 0===e?"undefined":L(e))&&null!==e}function E(e){return k(e)&&"[object Date]"===A(e)}function T(e){return k(e)&&("[object Error]"===A(e)||e instanceof Error)}function O(e){return"function"==typeof e}function U(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"===(void 0===e?"undefined":L(e))||void 0===e}function A(e){return Object.prototype.toString.call(e)}function x(e){return e<10?"0"+e.toString(10):e.toString(10)}function C(){var e=new Date,t=[x(e.getHours()),x(e.getMinutes()),x(e.getSeconds())].join(":");return[e.getDate(),R[e.getMonth()],t].join(" ")}function D(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},j=/%[sdj%]/g;t.format=function(e){if(!b(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(i(arguments[n]));return t.join(" ")}for(var n=1,r=arguments,o=r.length,a=String(e).replace(j,function(e){if("%%"===e)return"%";if(n>=o)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}}),u=r[n];n<o;u=r[++n])v(u)||!k(u)?a+=" "+u:a+=" "+i(u);return a},t.deprecate=function(n,i){function o(){if(!a){if(r.throwDeprecation)throw new Error(i);r.traceDeprecation?console.trace(i):console.error(i),a=!0}return n.apply(this,arguments)}if(w(e.process))return function(){return t.deprecate(n,i).apply(this,arguments)};if(!0===r.noDeprecation)return n;var a=!1;return o};var M,B={};t.debuglog=function(e){if(w(M)&&(M=r.env.NODE_DEBUG||""),e=e.toUpperCase(),!B[e])if(new RegExp("\\b"+e+"\\b","i").test(M)){var n=r.pid;B[e]=function(){var r=t.format.apply(t,arguments);console.error("%s %d: %s",e,n,r)}}else B[e]=function(){};return B[e]},t.inspect=i,i.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},i.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=p,t.isBoolean=y,t.isNull=v,t.isNullOrUndefined=m,t.isNumber=_,t.isString=b,t.isSymbol=g,t.isUndefined=w,t.isRegExp=S,t.isObject=k,t.isDate=E,t.isError=T,t.isFunction=O,t.isPrimitive=U,t.isBuffer=n(12);var R=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];t.log=function(){console.log("%s - %s",C(),t.format.apply(t,arguments))},t.inherits=n(13),t._extend=function(e,t){if(!t||!k(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}}).call(t,n(11),n(5))},function(e,t,n){"use strict";var r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(e){"object"===("undefined"==typeof window?"undefined":i(window))&&(r=window)}e.exports=r},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=function(e){return e&&"object"===(void 0===e?"undefined":r(e))&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t,n){"use strict";"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;if(void 0!==a)return a.call(r)},s=n(6),c=function(e){return e&&e.__esModule?e:{default:e}}(s),f=n(1),l=function(e){function t(e){return r(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return o(t,e),a(t,[{key:"send",value:function(e){this._xhr&&this.drop();var t=this._xhr=new XMLHttpRequest;this._url=e,t.open("GET",e,!0),t.responseType="moz-chunked-arraybuffer",t.onerror=this._onError.bind(this),t.onprogress=this._onProgress.bind(this),t.withCredentials=this.withCredentials,t.timeout=this.timeout,t.send()}},{key:"_onProgress",value:function(e){var n=this._xhr.response;n||console.error("the chunked buffer is null ",n),u(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"_emit",this).call(this,f.CHUNKEDPROGRESS,n.slice(this._len)),this._len+=n.length}},{key:"_onError",value:function(e){var t=this;throw clearTimeout(this._retryTimer),this._retryTimer=this._retry>0&&setTimeout(function(){t.retry()},3e3),this._retry--,new Error(e)}},{key:"drop",value:function(){this._xhr.abort()}},{key:"retry",value:function(){this.drop(),this.send(this._url)}},{key:"replace",value:function(e){this.drop(),this.send(e)}}]),t}(c.default);t.default=l},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n(6),s=function(e){return e&&e.__esModule?e:{default:e}}(u),c=n(1),f=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._CANCEL=!1,n._ERROR=!1,n._reader,console.log("FETCH chunked"),n}return o(t,e),a(t,[{key:"send",value:function(e){var t=this;this._url=e,console.log("FETCH SEND url ",e),fetch(e,{mode:this._cors}).then(function(e){var n=e.body.getReader();return t._xhr=e,t._reader=n,t._readerTmpFn()}).then(function(e){console.log("all done")}).catch(function(e){throw t._ERROR=!0,t._emit(c.CHUNKEDERR,e),new Error(e)})}},{key:"_readerTmpFn",value:function(){return this._reader.read().then(this._chunkDecode.bind(this))}},{key:"_chunkDecode",value:function(e){var t=e.done,n=e.value;{if(!this._CANCEL)return t?(console.log("===================================="),console.log("the chunked connection has stopped"),console.log("===================================="),void this._emit(c.CHUNKEDEND)):(this._emit(c.CHUNKEDPROGRESS,n.buffer),this._readerTmpFn());if(!t)try{console.log("drop this url, ",url),this._reader.releaseLock(),this._xhr.body.cancel("the user decide to drop"),this._emit(c.HTTPCANCEL),this._emit(c.CHUNKEDEND)}catch(e){throw new Error('dont"t support drop(). because you brower don"t support reader.releaseLock() API \n',e)}}}},{key:"retry",value:function(){var e=this;if(console.log("retry to connect the url,",this._url),this._ERROR)return this.send(this._url);this.drop().then(function(){e.send(e._url)})}},{key:"drop",value:function(){var e=this;return this._CANCEL=!0,new Promise(function(t,n){e._on(c.HTTPCANCEL,function(){t()})})}},{key:"replace",value:function(e){var t=this;console.log("replace the url: ",e),this.drop().then(function(){t.send(e)})}},{key:"_init",value:function(){this._CANCEL=!1,this._ERROR=!1}}]),t}(s.default);t.default=f},function(e,t,n){"use strict";(function(t){function r(){var e=o();return e||("undefined"!=typeof navigator?a(navigator.userAgent):null)}function i(e){var t=s(),n=t.filter(function(t){return t.rule&&t.rule.test(e)})[0];return n?n.name:null}function o(){return"undefined"==typeof navigator&&void 0!==t?{name:"node",version:t.version.slice(1),os:n(17).type().toLowerCase()}:null}function a(e){var t=u();if(!e)return null;var n=t.map(function(t){var n=t.rule.exec(e),r=n&&n[1].split(/[._]/).slice(0,3);return r&&r.length<3&&(r=r.concat(1==r.length?[0,0]:[0])),n&&{name:t.name,version:r.join(".")}}).filter(Boolean)[0]||null;return n&&(n.os=i(e)),n}function u(){return c([["edge",/Edge\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["vivaldi",/Vivaldi\/([0-9\.]+)/],["kakaotalk",/KAKAOTALK\s([0-9\.]+)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["phantomjs",/PhantomJS\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["fxios",/FxiOS\/([0-9\.]+)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)$/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/]])}function s(){return c([["iOS",/iP(hone|od|ad)/],["Android OS",/Android/],["BlackBerry OS",/BlackBerry|BB10/],["Windows Mobile",/IEMobile/],["Amazon OS",/Kindle/],["Windows 3.11",/Win16/],["Windows 95",/(Windows 95)|(Win95)|(Windows_95)/],["Windows 98",/(Windows 98)|(Win98)/],["Windows 2000",/(Windows NT 5.0)|(Windows 2000)/],["Windows XP",/(Windows NT 5.1)|(Windows XP)/],["Windows Server 2003",/(Windows NT 5.2)/],["Windows Vista",/(Windows NT 6.0)/],["Windows 7",/(Windows NT 6.1)/],["Windows 8",/(Windows NT 6.2)/],["Windows 8.1",/(Windows NT 6.3)/],["Windows 10",/(Windows NT 10.0)/],["Windows ME",/Windows ME/],["Open BSD",/OpenBSD/],["Sun OS",/SunOS/],["Linux",/(Linux)|(X11)/],["Mac OS",/(Mac_PowerPC)|(Macintosh)/],["QNX",/QNX/],["BeOS",/BeOS/],["OS/2",/OS\/2/],["Search Bot",/(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\/Teoma)|(ia_archiver)/]])}function c(e){return e.map(function(e){return{name:e[0],rule:e[1]}})}e.exports={detect:r,detectOS:i,getNodeVersion:o,parseUserAgent:a}}).call(t,n(5))},function(e,t,n){"use strict";t.endianness=function(){return"LE"},t.hostname=function(){return"undefined"!=typeof location?location.hostname:""},t.loadavg=function(){return[]},t.uptime=function(){return 0},t.freemem=function(){return Number.MAX_VALUE},t.totalmem=function(){return Number.MAX_VALUE},t.cpus=function(){return[]},t.type=function(){return"Browser"},t.release=function(){return"undefined"!=typeof navigator?navigator.appVersion:""},t.networkInterfaces=t.getNetworkInterfaces=function(){return{}},t.arch=function(){return"javascript"},t.platform=function(){return"browser"},t.tmpdir=t.tmpDir=function(){return"/tmp"},t.EOL="\n"},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(19),u=r(a),s=n(26),c=r(s),f=(n(3),function(){function e(){i(this,e),this._flvDemux=new u.default,this._mp4Remux=new c.default({audioTrack:this._flvDemux.audioTrack,videoTrack:this._flvDemux.videoTrack,mediaInfo:this._flvDemux.mediaInfo}),this._lastVideoSample,this._videoTrack=this._flvDemux.videoTrack,this._audioTrack=this._flvDemux.audioTrack}return o(e,[{key:"parse",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"MS";if(this._flvDemux.parse(e),"IS"===t){var n=this._mp4Remux.generateIS();return{videoIS:n.videoIS,audioIS:n.audioIS,videoMime:this._flvDemux.videoMIME,audioMime:this._flvDemux.audioMIME}}if(this._videoTrack.samples.length>1){this._lastVideoSample=this._videoTrack.samples.pop(),this._videoTrack.length-=this._lastVideoSample.length;var r=this._mp4Remux.generateMS(this._lastVideoSample.timeStamp),i=r.audioMS,o=r.videoMS;return this._videoTrack.samples=[this._lastVideoSample],this._videoTrack.length=this._lastVideoSample.length,this._audioTrack.samples=[],this._audioTrack.length=0,{audioMS:i,videoMS:o}}return{}}}]),e}());t.default=f},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(0),c=r(s),f=n(20),l=r(f),d=n(21),h=r(d),p=n(22),y=r(p),v=n(25),m=r(v),_=new c.default("FLVDemux"),b=function(e){function t(){i(this,t);var e=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._type={header:"header",video:"video",audio:"audio",script:"script"},e.AVC=new y.default({videoTrack:e._videoTrack,mediaInfo:e._mediaInfo}),e.AAC=new m.default({audioTrack:e._audioTrack,mediaInfo:e._mediaInfo}),e}return a(t,e),u(t,[{key:"parse",value:function(e){var t=!0,n=!1,r=void 0;try{for(var i,o=e[Symbol.iterator]();!(t=(i=o.next()).done);t=!0){var a=i.value,u=a.info;switch(u.type){case this._type.header:this._mediaInfo.hasVideo=u.hasVideo,this._mediaInfo.hasAudio=u.hasAudio;break;case this._type.video:if(!this._mediaInfo.hasVideo)return _.w("The FLVheader indicates hasVideo ",this._hasVideo," but accidentally enounter a video tag",a);this._parseVideo(a);break;case this._type.audio:if(!this._mediaInfo.hasAudio)return _.w("The FLVheader indicates hasVideo ",this._hasAudio," but accidentally enounter a audio tag",a);this._parseAudio(a);break;case this._type.script:this._parseScript(a)}}}catch(e){n=!0,r=e}finally{try{!t&&o.return&&o.return()}finally{if(n)throw r}}}},{key:"_parseVideo",value:function(e){var t=e.buffer,n=e.info;t=t.slice(n.dataOffset);var r=new DataView(t).getUint8(0),i=(240&r)>>>4,o=15&r;if(7!==o)return void _.e("It is only support AVC format(7), but you type code is "+o);this.AVC.parse(t.slice(1),i,o,n.timeStamp)}},{key:"_parseAudio",value:function(e){var t=e.buffer,n=e.info;t=t.slice(n.dataOffset);var r=new DataView(t),i=r.getUint8(0),o=i>>>4;if(2!==o&&10!==o)return void _.e("we do not support this type"+o);var a=(12&i)>>>2;if(!(a>=0&&a<=4))return void _.e("Invalid soundRate: "+a);a=this._flvSoundRateTable[a];var u=1&i,s=this._audioTrack.meta;s.audioSampleRate=a,s.channelCount=0===u?1:2,r=null,t=t.slice(1),2===o||10===o&&this.AAC.parse(t)}},{key:"_parseScript",value:function(e){var t=e.buffer,n=e.info,r=h.default.parseScriptData(t,n.dataOffset,n.dataSize);Object.assign(this._mediaInfo,r.onMetaData)}}]),t}(l.default);t.default=b},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(){function e(){i(this,e),this._videoTrack={type:"video",id:1,samples:[],length:0,meta:{type:"video",id:1,timescale:1e3,duration:0,codec:"",refSampleDuration:null,avcc:"",codecWidth:"",codecHeight:"",presentWidth:0,presentHeight:0}},this._audioTrack={type:"audio",id:2,sequenceNumber:0,samples:[],length:0,meta:r({type:"audio",id:2,timescale:1e3,duration:0,codec:"",refSampleDuration:null,audioSampleRate:null,config:null,channelCount:null},"codec",null)},this._flvSoundRateTable=[5500,11025,22050,44100,48e3],this._hasVideo,this._hasAudio,this._mediaInfo={audiocodecid:10,audiodatarate:62.5,audiosamplerate:48e3,audiosamplesize:16,duration:0,encoder:"Lavf57.56.101",filesize:0,height:640,stereo:!0,videocodecid:7,videodatarate:1171.875,width:368,hasVideo:!1,hasAudio:!1}}return o(e,[{key:"videoTrack",get:function(){return this._videoTrack}},{key:"audioTrack",get:function(){return this._audioTrack}},{key:"mediaInfo",get:function(){return this._mediaInfo}},{key:"MIME",get:function(){return'video/mp4; codecs="'+this._videoTrack.meta.codec+","+this._audioTrack.meta.codec+'"'}},{key:"videoMIME",get:function(){return'video/mp4; codecs="'+this._videoTrack.meta.codec+'"'}},{key:"audioMIME",get:function(){return'audio/mp4; codecs="'+this._audioTrack.meta.codec+'"'}}]),e}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(r),o=new i.default("AMF"),a={parseScriptData:function(e,t,n){var r={};try{var i=a.parseValue(e,t,n),u=a.parseValue(e,t+i.size,n-i.size);r[i.data]=u.data}catch(e){o.e("AMF",e.toString())}return r},parseObject:function(e,t,n){if(n<3)throw new Error("Data not enough when parse ScriptDataObject");var r=a.parseString(e,t,n),i=a.parseValue(e,t+r.size,n-r.size),o=i.objectEnd;return{data:{name:r.data,value:i.data},size:r.size+i.size,objectEnd:o}},parseVariable:function(e,t,n){return a.parseObject(e,t,n)},parseString:function(e,t,n){if(n<2)throw new Error("Data not enough when parse String");var r=new DataView(e,t,n),i=r.getUint16(0),o=void 0;return o=i>0?a.decodeUTF8(new Uint8Array(e,t+2,i)):"",{data:o,size:2+i}},parseLongString:function(e,t,n){if(n<4)throw new Error("Data not enough when parse LongString");var r=new DataView(e,t,n),i=r.getUint32(0),o=void 0;return o=i>0?a.decodeUTF8(new Uint8Array(e,t+4,i)):"",{data:o,size:4+i}},parseDate:function(e,t,n){if(n<10)throw new Error("Data size invalid when parse Date");var r=new DataView(e,t,n),i=r.getFloat64(0);return i+=60*r.getInt16(8)*1e3,{data:new Date(i),size:10}},parseValue:function(e,t,n){if(n<1)throw new Error("Data not enough when parse Value");var r=new DataView(e,t,n),i=1,u=r.getUint8(0),s=void 0,c=!1;try{switch(u){case 0:s=r.getFloat64(1),i+=8;break;case 1:s=!!r.getUint8(1),i+=1;break;case 2:var f=a.parseString(e,t+1,n-1);s=f.data,i+=f.size;break;case 3:s={};var l=0;for(9==(16777215&r.getUint32(n-4))&&(l=3);i<n-4;){var d=a.parseObject(e,t+i,n-i-l);if(d.objectEnd)break;s[d.data.name]=d.data.value,i+=d.size}if(i<=n-3){9===(16777215&r.getUint32(i-1))&&(i+=3)}break;case 8:s={},i+=4;var h=0;for(9==(16777215&r.getUint32(n-4))&&(h=3);i<n-8;){var p=a.parseVariable(e,t+i,n-i-h);if(p.objectEnd)break;s[p.data.name]=p.data.value,i+=p.size}if(i<=n-3){9===(16777215&r.getUint32(i-1))&&(i+=3)}break;case 9:s=void 0,i=1,c=!0;break;case 10:s=[];var y=r.getUint32(1);i+=4;for(var v=0;v<y;v++){var m=a.parseValue(e,t+i,n-i);s.push(m.data),i+=m.size}break;case 11:var _=a.parseDate(e,t+1,n-1);s=_.data,i+=_.size;break;case 12:var b=a.parseString(e,t+1,n-1);s=b.data,i+=b.size;break;default:i=n,o.w("AMF","Unsupported AMF value type "+u)}}catch(e){o.e("AMF",e.toString())}return{data:s,size:i,objectEnd:c}},decodeUTF8:function(e){var t="",n=0,r=0,i=0;for(e.length>=3&&239===e[0]&&187===e[1]&&191===e[2]&&(n=3);n<e.length;)if((r=e[n])<128)t+=String.fromCharCode(r),n++;else if(r>191&&r<224){if(n+1>=e.length)throw"UTF-8 Decode failed. Two byte character was truncated.";i=e[n+1],t+=String.fromCharCode((31&r)<<6|63&i),n+=2}else{if(n+2>=e.length)throw"UTF-8 Decode failed. Multi byte character was truncated.";i=e[n+1],c3=e[n+2],t+=String.fromCharCode((15&r)<<12|(63&i)<<6|63&c3),n+=3}return t}};t.default=a},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),u=r(a),s=n(2),c=n(23),f=r(c),l=new u.default("AVCDemux"),d=function(){function e(t){var n=t.videoTrack,r=t.mediaInfo;i(this,e),this._videoTrack=n,this._mediaInfo=r,this._referenceFrameRate={fixed:!0,fps:23.976,fps_num:23976,fps_den:1e3},this._naluLengthSize=4,this._timestampBase=0,this._keyFrame={1:!0,2:!1}}return o(e,[{key:"parse",value:function(e,t,n,r){var i=new DataView(e),o=i.getUint8(0),a=16777215&i.getUint32(0);switch(i=null,e=e.slice(4),o){case 0:this._parseConfig(e);break;case 1:this._parseAVC(e,{cts:a,frameType:t,timeStamp:r})}}},{key:"_parseAVC",value:function(e,t){var n=t.cts,r=t.frameType,i=t.timeStamp,o=new DataView(e),a=[],u=e.byteLength,c=0,f=!!this._keyFrame[r],d=this._naluLengthSize;this._timestampBase;for(this._timestampBase+=23;c<u;){if(c+4>=u){l.w("not enought data to parse");break}var h=o.getUint32(c);if(3===d&&(h>>>=8),h>u-d)return void l.w("invalid nalu value");5===(31&o.getUint8(c+d))&&(f=!0);var p=new Uint8Array(e,c,d+h);a.push(p),c+=d+h}a=s.mergeTypedArray.apply(null,a),a.length&&(this._videoTrack.samples.push({slices:a,length:c,keyFrame:f,timeStamp:i,cts:n}),this._videoTrack.length+=c)}},{key:"_parseConfig",value:function(e){var t=new DataView(e),n=t.getUint8(0),r=t.getUint8(1);t.getUint8(2),t.getUint8(3);if(1!==n||0===r)return void l.e("Invalid AVCDecoderConfigurationRecord");var i=this._naluLengthSize=1+(3&t.getUint8(4));if(3!==i&&4!==i)return void l.e("Invalid NaluLengthSizeMinusOne: "+i);var o=31&t.getUint8(5);if(0===o)return void l.e('the SequenceParameterSets count couldn"t be 0');o>1&&l.e("strange count of SPS, it should be 1 as usual");for(var a=6,u=0;u<o;u++)if(!(u>0)){var s=t.getUint16(a);if(a+=2,s){var c=new Uint8Array(e,a,s);a+=s;var d=f.default.parseSPS(c);this._extrackInfo(d,c)}}this._videoTrack.meta.avcc=new Uint8Array(e),console.log("parsed already, ",this._videoTrack)}},{key:"_extrackInfo",value:function(e,t){var n=this._videoTrack.meta;n.spsInfo=e,n.codecWidth=e.codec_size.width,n.codecHeight=e.codec_size.height,n.presentWidth=e.present_size.width,n.presentHeight=e.present_size.height,console.log(e),!1!==e.frame_rate.fixed&&0!==e.frame_rate.fps_num&&0!==e.frame_rate.fps_den||(n.frameRate=this._referenceFrameRate);var r=n.frameRate,i=r.fps_den,o=r.fps_num;n.refSampleDuration=Math.floor(n.timescale*(i/o));for(var a=t.subarray(1,4),u="avc1.",s=0;s<3;s++){var c=a[s].toString(16);c.length<2&&(c="0"+c),u+=c}n.codec=u}}]),e}();t.default=d},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(24),a=function(e){return e&&e.__esModule?e:{default:e}}(o),u=function(){function e(){r(this,e)}return i(e,null,[{key:"_ebsp2rbsp",value:function(e){for(var t=e,n=t.byteLength,r=new Uint8Array(n),i=0,o=0;o<n;o++)o>=2&&3===t[o]&&0===t[o-1]&&0===t[o-2]||(r[i]=t[o],i++);return new Uint8Array(r.buffer,0,i)}},{key:"parseSPS",value:function(t){var n=e._ebsp2rbsp(t),r=new a.default(n);r.readByte();var i=r.readByte();r.readByte();var o=r.readByte();r.readUEG();var u=e.getProfileString(i),s=e.getLevelString(o),c=1,f=420,l=[0,420,422,444],d=8;if((100===i||110===i||122===i||244===i||44===i||83===i||86===i||118===i||128===i||138===i||144===i)&&(c=r.readUEG(),3===c&&r.readBits(1),c<=3&&(f=l[c]),d=r.readUEG()+8,r.readUEG(),r.readBits(1),r.readBool()))for(var h=3!==c?8:12,p=0;p<h;p++)r.readBool()&&(p<6?e._skipScalingList(r,16):e._skipScalingList(r,64));r.readUEG();var y=r.readUEG();if(0===y)r.readUEG();else if(1===y){r.readBits(1),r.readSEG(),r.readSEG();for(var v=r.readUEG(),m=0;m<v;m++)r.readSEG()}r.readUEG(),r.readBits(1);var _=r.readUEG(),b=r.readUEG(),g=r.readBits(1);0===g&&r.readBits(1),r.readBits(1);var w=0,S=0,k=0,E=0;r.readBool()&&(w=r.readUEG(),S=r.readUEG(),k=r.readUEG(),E=r.readUEG());var T=1,O=1,U=0,A=!0,x=0,C=0;if(r.readBool()){if(r.readBool()){var D=r.readByte(),L=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],j=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];D>0&&D<16?(T=L[D-1],O=j[D-1]):255===D&&(T=r.readByte()<<8|r.readByte(),O=r.readByte()<<8|r.readByte())}if(r.readBool()&&r.readBool(),r.readBool()&&(r.readBits(4),r.readBool()&&r.readBits(24)),r.readBool()&&(r.readUEG(),r.readUEG()),r.readBool()){var M=r.readBits(32),B=r.readBits(32);A=r.readBool(),x=B,C=2*M,U=x/C}}var R=1;1===T&&1===O||(R=T/O);var V=0,P=0;if(0===c)V=1,P=2-g;else{var N=3===c?1:2,z=1===c?2:1;V=N,P=z*(2-g)}var I=16*(_+1),F=16*(b+1)*(2-g);I-=(w+S)*V,F-=(k+E)*P;var H=Math.ceil(I*R);return r.destroy(),r=null,{profile_string:u,level_string:s,bit_depth:d,chroma_format:f,chroma_format_string:e.getChromaFormatString(f),frame_rate:{fixed:A,fps:U,fps_den:C,fps_num:x},sar_ratio:{width:T,height:O},codec_size:{width:I,height:F},present_size:{width:H,height:F}}}},{key:"_skipScalingList",value:function(e,t){for(var n=8,r=8,i=0,o=0;o<t;o++)0!==r&&(i=e.readSEG(),r=(n+i+256)%256),n=0===r?n:r}},{key:"getProfileString",value:function(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}},{key:"getLevelString",value:function(e){return(e/10).toFixed(1)}},{key:"getChromaFormatString",value:function(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}}]),e}();t.default=u},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t){r(this,e),this.TAG="ExpGolomb",this._buffer=t,this._buffer_index=0,this._total_bytes=t.byteLength,this._total_bits=8*t.byteLength,this._current_word=0,this._current_word_bits_left=0}return i(e,[{key:"destroy",value:function(){this._buffer=null}},{key:"_fillCurrentWord",value:function(){var e=this._total_bytes-this._buffer_index;if(e<=0)throw new Error("ExpGolomb: _fillCurrentWord() but no bytes available");var t=Math.min(4,e),n=new Uint8Array(4);n.set(this._buffer.subarray(this._buffer_index,this._buffer_index+t)),this._current_word=new DataView(n.buffer).getUint32(0,!1),this._buffer_index+=t,this._current_word_bits_left=8*t}},{key:"readBits",value:function(e){if(e>32)throw new Error("ExpGolomb: readBits() bits exceeded max 32bits!");if(e<=this._current_word_bits_left){var t=this._current_word>>>32-e;return this._current_word<<=e,this._current_word_bits_left-=e,t}var n=this._current_word_bits_left?this._current_word:0;n>>>=32-this._current_word_bits_left;var r=e-this._current_word_bits_left;this._fillCurrentWord();var i=Math.min(r,this._current_word_bits_left),o=this._current_word>>>32-i;return this._current_word<<=i,this._current_word_bits_left-=i,n=n<<i|o}},{key:"readBool",value:function(){return 1===this.readBits(1)}},{key:"readByte",value:function(){return this.readBits(8)}},{key:"_skipLeadingZero",value:function(){var e=void 0;for(e=0;e<this._current_word_bits_left;e++)if(0!=(this._current_word&2147483648>>>e))return this._current_word<<=e,this._current_word_bits_left-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}},{key:"readUEG",value:function(){var e=this._skipLeadingZero();return this.readBits(e+1)-1}},{key:"readSEG",value:function(){var e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}]),e}();t.default=o},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=function(e){return e&&e.__esModule?e:{default:e}}(o),u=new a.default("AACDemux"),s=function(){function e(t){var n=t.audioTrack,i=t.mediaInfo;r(this,e),this._audioTrack=n,this._mediaInfo=i,this._mpegSamplingRates=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350]}return i(e,[{key:"parse",value:function(e){0===new DataView(e).getUint8(0)?this._parseConfig(e.slice(1)):this._parseAAC(e.slice(1))}},{key:"_parseAAC",value:function(e){var t=new Uint8Array(e);this._audioTrack.samples.push({unit:t,length:t.byteLength}),this._audioTrack.length+=t.byteLength}},{key:"_parseConfig",value:function(e){var t=new Uint8Array(e),n=this._audioTrack.meta,r=void 0,i=navigator.userAgent.toLowerCase(),o=t[0]>>>3,a=(7&t[0])<<1|t[1]>>>7,s=null;if(a<0||a>=this._mpegSamplingRates.length)return void u.e("invalid samplingFreIndex: "+a);var c=this._mpegSamplingRates[a],f=(120&t[1])>>>3;if(f<0||f>7)return void u.e("invalid channel Count: "+f);5===o&&(s=(7&t[1])<<1|t[2]>>>7,audioExtensionObjectType=(124&t[2])>>>2),u.i("userAgent is "+i),u.i("the audioObjectType in AAC is "+o),-1!==i.indexOf("firefox")?a>=6?(o=5,r=new Array(4),s=a-3):(o=2,r=new Array(2),s=a):-1!==i.indexOf("android")?(o=2,r=new Array(2),s=a):(o=5,s=a,r=new Array(4),a>=6?s=a-3:1===f&&(o=2,r=new Array(2),s=a),r[0]=o<<3,r[0]|=(15&a)>>>1,r[1]=(15&a)<<7,r[1]|=(15&f)<<3),r[0]=o<<3,r[0]|=(15&a)>>>1,r[1]=(15&a)<<7,r[1]|=(15&f)<<3,5===o&&(r[1]|=(15&s)>>>1,r[2]=(1&s)<<7,r[2]|=8,r[3]=0),n.config=r,n.audioSampleRate=c,n.channelCount=f,n.codec="mp4a.40."+o,n.refSampleDuration=Math.floor(1024/n.audioSampleRate*n.timescale)}}]),e}();t.default=s},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(27),a=function(e){return e&&e.__esModule?e:{default:e}}(o),u=n(2),s=function(){function e(t){var n=t.audioTrack,i=t.videoTrack,o=t.mediaInfo;r(this,e),this._audioTrack=n,this._videoTrack=i,this._mediaInfo=o,this._videoSeq=0,this._audioSeg=0,this._lastTimeStamp,this._lastDuration,this._videoTimebase=0,this._audioTimebase=0}return i(e,[{key:"generateIS",value:function(){var e=this._mediaInfo,t=e.hasVideo,n=e.hasAudio;if(t&&n)return{videoIS:a.default.initBox(this._videoTrack.meta),audioIS:a.default.initBox(this._audioTrack.meta)}}},{key:"generateMS",value:function(e){var t=new Uint8Array(0),n=new Uint8Array(0);return this._videoTrack.samples.length&&(this._lastTimeStamp=e,t=this._remuxVideo()),this._audioTrack.samples.length&&(n=this._remuxAudio()),console.log("the diff time is ",this._videoTimebase-this._audioTimebase),{audioMS:n,videoMS:t}}},{key:"_remuxVideoMdat",value:function(){var e=this,t=a.default.mdat(this._videoTrack.length),n=8,r=this._videoTrack,i=r.meta,o=r.samples,u=[],s=this._videoTimebase,c=void 0;return o.forEach(function(r,a){var s=r.cts,f=void 0,l=void 0,d=r.slices.byteLength;t.set(r.slices,n);var h=r.keyFrame;c=o.length>1&&o.length!==a+1?o[a+1].timeStamp-r.timeStamp:e._lastTimeStamp-r.timeStamp,f=e._videoTimebase,l=f+s,e._videoTimebase+=c,i.duration+=c,u.push({dts:f,pts:l,cts:s,length:r.length,keyFrame:h,sampleSize:d,duration:c,chunkOffset:n,flags:{isLeading:0,dependsOn:h?2:1,isDepended:h?1:0,hasRedundancy:0,isNonSync:h?0:1}}),n+=r.length}),r.samples=u,this._videoSeq++,{videoMdat:t,baseDts:s}}},{key:"_remuxAudio",value:function(){var e=this._remuxAudioMdat(),t=e.audioMdat,n=e.baseDts,r=a.default.moof(this._audioTrack,n,this._audioSeg);return(0,u.mergeTypedArray)(r,t)}},{key:"_remuxVideo",value:function(){var e=this._remuxVideoMdat(),t=e.videoMdat,n=e.baseDts,r=a.default.moof(this._videoTrack,n,this._videoSeq);return(0,u.mergeTypedArray)(r,t)}},{key:"_remuxAudioMdat",value:function(){var e=this,t=a.default.mdat(this._audioTrack.length),n=8,r=this._audioTrack,i=r.meta,o=i.refSampleDuration,u=r.samples,s=this._audioTimebase,c=[];return u.forEach(function(r,i){var a=e._audioTimebase,u=a+0;t.set(r.unit,n);var s=r.unit.byteLength;e._audioTimebase+=o,c.push({dts:a,pts:u,cts:0,sampleSize:s,duration:o,chunkOffset:n,flags:{isLeading:0,dependsOn:1,isDepended:0,hasRedundancy:0}}),n+=s}),r.samples=c,this._audioSeg++,{baseDts:s,audioMdat:t}}}]),e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={};r.types={avc1:[],avcC:[],btrt:[],dinf:[],dref:[],esds:[],ftyp:[],hdlr:[],mdat:[],mdhd:[],mdia:[],mfhd:[],minf:[],moof:[],moov:[],mp4a:[],".mp3":[],mvex:[],mvhd:[],pasp:[],sdtp:[],stbl:[],stco:[],stsc:[],stsd:[],stsz:[],stts:[],tfdt:[],tfhd:[],traf:[],trak:[],trun:[],trex:[],tkhd:[],vmhd:[],smhd:[],free:[],stss:[],ctts:[]},r.symbolValue={FTYP:new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]),HDLR_VIDEO:new Uint8Array([0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0]),HDLR_AUDIO:new Uint8Array([0,0,0,0,0,0,0,0,115,111,117,110,0,0,0,0,0,0,0,0,0,0,0,0,83,111,117,110,100,72,97,110,100,108,101,114,0]),STSC:new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1]),FSTTS:new Uint8Array([0,0,0,0,0,0,0,0]),FSTSC:new Uint8Array([0,0,0,0,0,0,0,0]),FSTSZ:new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]),FSTCO:new Uint8Array([0,0,0,0,0,0,0,0]),STTS:new Uint8Array([0,0,0,0]),CTTS:new Uint8Array([0,0,0,0]),STCO:new Uint8Array([0,0,0,0]),STSZ:new Uint8Array([0,0,0,0]),STSD:new Uint8Array([0,0,0,0,0,0,0,1]),DREF:new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1]),VMHD:new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]),SMHD:new Uint8Array([0,0,0,0,0,0,0,0]),STSS:new Uint8Array([0,0,0,0])},r.box=function(e){var t=8,n=Array.prototype.slice.call(arguments,1);n.forEach(function(e){t+=e.byteLength});var r=new Uint8Array(t);r[0]=t>>24&255,r[1]=t>>16&255,r[2]=t>>8&255,r[3]=255&t,r.set(e,4);var i=8;return n.forEach(function(e){r.set(e,i),i+=e.byteLength}),r},r.free=function(){return r.box(r.types.free)},r.moof=function(e,t,n){return r.box(r.types.moof,r.mfhd(n),r.traf(e,t))},r.mfhd=function(e){return r.fragmentBox(r.types.mfhd,e)},r.mdat=function(e){e+=8;var t=new Uint8Array(e);return new DataView(t.buffer).setUint32(0,e),t.set(r.types.mdat,4),t},r.traf=function(e,t){var n=r.tfhd(e.id),i=r.tfdt(t),o=r.sdtp(e),a=r.trun(e,64+o.byteLength+8);return r.box(r.types.traf,n,i,a,o)},r.trun=function(e,t){var n=e.samples||[],i=n.length,o=12+16*i,a=new Uint8Array(o);return t+=8+o,a.set([0,0,15,1,i>>>24&255,i>>>16&255,i>>>8&255,255&i,t>>>24&255,t>>>16&255,t>>>8&255,255&t],0),n.forEach(function(e,t){var n=e.duration,r=e.sampleSize,i=e.flags,o=e.cts;a.set([n>>>24&255,n>>>16&255,n>>>8&255,255&n,r>>>24&255,r>>>16&255,r>>>8&255,255&r,i.isLeading<<2|i.dependsOn,i.isDepended<<6|i.hasRedundancy<<4|i.isNonSync,0,0,o>>>24&255,o>>>16&255,o>>>8&255,255&o],12+16*t)}),r.box(r.types.trun,a)},r.sdtp=function(e){for(var t,n=e.samples||[],i=n.length,o=new Uint8Array(i+4),a=0;a<i;a++)t=n[a].flags,o[a+4]=t.dependsOn<<4|t.isDepended<<2|t.hasRedundancy;return r.box(r.types.sdtp,o)},r.tfhd=function(e){return r.fragmentBox(r.types.tfhd,e)},r.tfdt=function(e){return r.fragmentBox(r.types.tfdt,e)},r.fragmentBox=function(e,t){var n=new Uint8Array([0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t]);return r.box(e,n)},r.ftyp=function(){return r.box(r.types.ftyp,r.symbolValue.FTYP)},r.initBox=function(e,t){var n=r.box(r.types.ftyp,r.symbolValue.FTYP),i=r.fmoov(e,t),o=new Uint8Array(n.byteLength+i.byteLength);return o.set(n,0),o.set(i,n.byteLength),o},r.fmoov=function(e,t){var n=r.mvhd(e.timescale,e.duration);return t?r.box(r.types.moov,n,r.trak(e),r.trak(t),r.mvex(1,2)):r.box(r.types.moov,n,r.trak(e),r.mvex(e.id))},r.moov=function(e,t,n){return r.box(r.types.moov,e,t)},r.mvex=function(e,t){return t?r.box(r.types.mvex,r.trex(e),r.trex(t)):r.box(r.types.mvex,r.trex(e))},r.trex=function(e){var t=new Uint8Array([0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return r.box(r.types.trex,t)},r.trak=function(e){return r.box(r.types.trak,r.tkhd(e),r.mdia(e))},r.mdia=function(e){return r.box(r.types.mdia,r.mdhd(e),r.hdlr(e),r.minf(e))},r.hdlr=function(e){return"video"===e.type?r.box(r.types.hdlr,r.symbolValue.HDLR_VIDEO):r.box(r.types.hdlr,r.symbolValue.HDLR_AUDIO)},r.minf=function(e){var t="video"===e.type?r.box(r.types.vmhd,r.symbolValue.VMHD):r.box(r.types.smhd,r.symbolValue.SMHD);return r.box(r.types.minf,t,r.dinf(),r.fstbl(e))},r.dinf=function(){var e=r.box(r.types.dref,r.symbolValue.DREF);return r.box(r.types.dinf,e)},r.stss=function(e){var t=e.track,n=t.samples,i=[];n.forEach(function(e,t){e.keyframe&&i.push(t)});var o=new DataView(new ArrayBuffer(4+4*i.length));o.setUint32(0,i.length);var a=4;return i.forEach(function(e){o.setUint32(a,e+1),a+=4}),r.box(r.types.stss,r.symbolValue.STSS,new Uint8Array(o.buffer))},r.stbl=function(e){return"audio"===e.type?r.box(r.types.stbl,r.stsd(e),r.stts(e),r.stsc(e),r.stsz(e),r.stco(e)):r.box(r.types.stbl,r.stsd(e),r.stts(e),r.ctts(e),r.stsc(e),r.stss(e),r.stsz(e),r.stco(e))},r.fstbl=function(e){return r.box(r.types.stbl,r.stsd(e),r.box(r.types.stts,r.symbolValue.FSTTS),r.box(r.types.stsc,r.symbolValue.FSTSC),r.box(r.types.stsz,r.symbolValue.FSTSZ),r.box(r.types.stco,r.symbolValue.FSTCO))},r.stts=function(e){var t=e.track,n=[],i=t.samples,o=i[0].duration,a=0,u=i.length;i.forEach(function(e,t){var r=e.duration;r===o?a++:(n.push([a,o]),o=r,a=1),t===u-1&&n.push([a,o])});var s=new DataView(new ArrayBuffer(8*n.length+4));s.setUint32(0,n.length);var c=4;return n.forEach(function(e){s.setUint32(c,e[0]),s.setUint32(c+4,e[1]),c+=8}),r.box(r.types.stts,r.symbolValue.STTS,new Uint8Array(s.buffer))},r.ctts=function(e){var t=e.track,n=[],i=t.samples,o=i[0].cts,a=0,u=i.length;i.forEach(function(e,t){var r=e.cts;r===o?a++:(n.push([a,o]),o=r,a=1),t===u-1&&n.push([a,o])});var s=new DataView(new ArrayBuffer(8*n.length+4));s.setUint32(0,n.length);var c=4;return n.forEach(function(e){s.setUint32(c,e[0]),s.setUint32(c+4,e[1]),c+=8}),r.box(r.types.ctts,r.symbolValue.CTTS,new Uint8Array(s.buffer))},r.stco=function(e){var t=e.track.samples,n=new DataView(new ArrayBuffer(4*t.length+4));n.setUint32(0,t.length);var i=4;return t.forEach(function(e){n.setUint32(i,e.chunkOffset),i+=4}),r.box(r.types.stco,r.symbolValue.STCO,new Uint8Array(n.buffer))},r.stsc=function(e){return r.box(r.types.stsc,r.symbolValue.STSC)},r.stsz=function(e){var t=e.track.samples,n=new DataView(new ArrayBuffer(4*t.length+8));n.setUint32(0,0),n.setUint32(4,t.length);var i=8;return t.forEach(function(e){var t=e.sampleSize;n.setUint32(i,t),i+=4}),r.box(r.types.stsz,r.symbolValue.STSZ,new Uint8Array(n.buffer))},r.stsd=function(e){return"video"===e.type?r.box(r.types.stsd,r.symbolValue.STSD,r.avc1(e)):"mp3"===e.codec?r.box(r.types.stsd,r.symbolValue.STSD,r.mp3(e)):r.box(r.types.stsd,r.symbolValue.STSD,r.mp4a(e))},r.mp3=function(e){var t=e.channelCount,n=(e.audioSampleRate,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,t,0,16,0,0,0,0,sampleRate>>>8&255,255&sampleRate,0,0]));return r.box(r.types[".mp3"],n)},r.mp4a=function(e){var t=e.channelCount,n=e.audioSampleRate,i=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,t,0,16,0,0,0,0,n>>>8&255,255&n,0,0]);return r.box(r.types.mp4a,i,r.esds(e))},r.esds=function(e){var t=e.config||[],n=t.length,i=new Uint8Array([0,0,0,0,3,23+n,0,1,0,4,15+n,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([n]).concat(t).concat([6,1,2]));return r.box(r.types.esds,i)},r.avc1=function(e){var t=e.avcc,n=e.codecWidth,i=e.codecHeight,o=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n>>>8&255,255&n,i>>>8&255,255&i,0,72,0,0,0,72,0,0,0,0,0,0,0,1,15,118,105,108,108,97,105,110,104,114,47,97,118,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,255,255]);return r.box(r.types.avc1,o,r.box(r.types.avcC,t))},r.mdhd=function(e){var t=e.timescale,n=e.duration;return r.box(r.types.mdhd,new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,n>>>24&255,n>>>16&255,n>>>8&255,255&n,85,196,0,0]))},r.tkhd=function(e){var t=e.id,n=e.presentWidth,i=(e.track,e.duration),o=e.presentHeight,a=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,n>>>8&255,255&n,0,0,o>>>8&255,255&o,0,0]),u=new DataView(a.buffer);return"video"===e.type&&(u.setUint16(34,0),u.setUint16(36,0)),r.box(r.types.tkhd,a)},r.mvhd=function(e,t){return r.box(r.types.mvhd,new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]))},r.init=function(){Object.keys(r.types).forEach(function(e){r.types[e]=[e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]})},r.init(),t.default=r},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(29),u=r(a),s=n(0),c=r(s),f=new c.default("MSEControl"),l=function(){function e(t){i(this,e),this._ms=new MediaSource,this._video=t,this._SUPPORT=this._detect(),this._sbList=[],this._video.src=URL.createObjectURL(this._ms),this._ms.addEventListener("sourceopen",this._msOpenEvent.bind(this),!1),this._ms.addEventListener("sourceended",this._msEndEvent.bind(this),!1),this._ms.addEventListener("sourceclose",this._msCloseEvent.bind(this),!1)}return o(e,[{key:"_detect",value:function(){var e=MediaSource.isTypeSupported;return{mp4:e('video/mp4; codecs="avc1.42E01E, mp4a.40.2"')||e('video/mp4; codecs="avc1.58A01E, mp4a.40.2"')||e('video/mp4; codecs="avc1.4D401E, mp4a.40.2"')||e('video/mp4; codecs="avc1.64001E, mp4a.40.2"'),webm:e("video/webm; codecs=vp8"),vp9:e("video/webm; codecs=vp9")}}},{key:"addSourceBuffer",value:function(e){var t=this;if("string"!=typeof e)throw new Error("addSourceBuffer(): invalid type, only receive string type, "+e);return MediaSource.isTypeSupported(e)||f.e("MSE don't support this mimeType, ",e),this._msOpen().then(function(){var n=new u.default(t._ms,t._ms.addSourceBuffer(e));return t._sbList.push(n),n}).catch(function(e){throw new Error(e)})}},{key:"_addSourceBuffer",value:function(e){MediaSource.isTypeSupported(e)||f.e("MSE don't support this mimeType, ",e);var t=new u.default(this._ms,this._ms.addSourceBuffer(e));return this._sbList.push(t),t}},{key:"_msOpen",value:function(){var e=this;return new Promise(function(t,n){if("open"===e._ms.readyState)return t();e._ms.addEventListener("sourceopen",function(){t()},!1)})}},{key:"_msOpenEvent",value:function(){}},{key:"_msEndEvent",value:function(){}},{key:"_msCloseEvent",value:function(){}}]),e}();t.default=l},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),a=function(e){return e&&e.__esModule?e:{default:e}}(o),u=n(2),s=(n(3),new a.default("SourceBufferControl")),c=function(){function e(t,n,i){r(this,e),this._ms=t,this._sb=n,this._memory=Object.assign({},{release:!0,time:5e3},i),this._isReleasing=!1,this._recursive,this._releasing,this._tmpBuffer=[],n.addEventListener("update",function(){},!1),n.addEventListener("updateend",this._updateEndHandler.bind(this),!1),this.release()}return i(e,[{key:"_updateEndHandler",value:function(){this._tmpBuffer.length&&!this._sb.updating&&(this._sb.appendBuffer((0,u.mergeUnit8Array)(this._tmpBuffer)),this._tmpBuffer=[])}},{key:"_couldRelease",value:function(){var e=this._sb.buffered;return NaN===this._ms.duration?(s.e("the mediaSource duration is NaN, "+this._ms),!1):e.length<=2?(s.w("the buffer length is not enough, ",e.length),!1):!(this._isReleasing||this._sb.updating)}},{key:"clearBuffer",value:function(){if(clearTimeout(this._releasing),this._sb.updating)this._releasing=setTimeout(this.clearBuffer.bind(this),0);else{var e=this._sb.buffered,t=e.length,n=e.start(0),r=e.end(t-2);console.log("clearBuffer is : "),console.log("                  ",n,": ",r),this._sb.remove(n,r),this.release()}}},{key:"release",value:function(){NaN===this._ms.duration&&console.error("the mediaSource duration is NaN, "+this._ms),this._couldRelease()?this.clearBuffer():(clearTimeout(this._recursive),this._recursive=setTimeout(this.release.bind(this),this._memory.time))}},{key:"_updateEnding",value:function(){var e=this;return new Promise(function(t,n){if(!1===e._sb.updating)return t();var r=function n(r){t(),e._sb.removeEventListener("updateend",n)};e._sb.addEventListener("updateend",r.bind(e),!1)})}},{key:"appendBuffer",value:function(e){this._tmpBuffer.push(e),this._sb.updating||(this._sb.appendBuffer((0,u.mergeUnit8Array)(this._tmpBuffer)),this._tmpBuffer=[])}}]),e}();t.default=c}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,