!function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=3)}([function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(){function e(t){r(this,e),this.name=t}return i(e,[{key:"w",value:function(){for(var e,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];(e=console).warn.apply(e,["["+this.name+"]====> "+(new Date).toTimeString()+"\n              : "].concat(n))}},{key:"l",value:function(e){console.log("["+this.name+"]====> "+(new Date).toTimeString()+"\n              : "+e)}},{key:"e",value:function(e){console.error("["+this.name+"]====> "+(new Date).toTimeString()+"\n              : "+e)}},{key:"i",value:function(e){console.info("["+this.name+"]====> "+(new Date).toTimeString()+"\n              : "+e)}}]),e}();t.default=a},function(e,t,n){"use strict";(function(e,r){function i(e,n){var r={seen:[],stylize:o};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),y(n)?r.showHidden=n:n&&t._extend(r,n),w(r.showHidden)&&(r.showHidden=!1),w(r.depth)&&(r.depth=2),w(r.colors)&&(r.colors=!1),w(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=a),s(r,e,r.depth)}function a(e,t){var n=i.styles[t];return n?"["+i.colors[n][0]+"m"+e+"["+i.colors[n][1]+"m":e}function o(e,t){return e}function u(e){var t={};return e.forEach(function(e,n){t[e]=!0}),t}function s(e,n,r){if(e.customInspect&&n&&A(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,e);return _(i)||(i=s(e,i,r)),i}var a=c(e,n);if(a)return a;var o=Object.keys(n),y=u(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(n)),T(n)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return f(n);if(0===o.length){if(A(n)){var v=n.name?": "+n.name:"";return e.stylize("[Function"+v+"]","special")}if(k(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(U(n))return e.stylize(Date.prototype.toString.call(n),"date");if(T(n))return f(n)}var m="",b=!1,g=["{","}"];if(h(n)&&(b=!0,g=["[","]"]),A(n)){m=" [Function"+(n.name?": "+n.name:"")+"]"}if(k(n)&&(m=" "+RegExp.prototype.toString.call(n)),U(n)&&(m=" "+Date.prototype.toUTCString.call(n)),T(n)&&(m=" "+f(n)),0===o.length&&(!b||0==n.length))return g[0]+m+g[1];if(r<0)return k(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special");e.seen.push(n);var w;return w=b?l(e,n,r,y,o):o.map(function(t){return d(e,n,r,y,t,b)}),e.seen.pop(),p(w,m,g)}function c(e,t){if(w(t))return e.stylize("undefined","undefined");if(_(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return b(t)?e.stylize(""+t,"number"):y(t)?e.stylize(""+t,"boolean"):v(t)?e.stylize("null","null"):void 0}function f(e){return"["+Error.prototype.toString.call(e)+"]"}function l(e,t,n,r,i){for(var a=[],o=0,u=t.length;o<u;++o)C(t,String(o))?a.push(d(e,t,n,r,String(o),!0)):a.push("");return i.forEach(function(i){i.match(/^\d+$/)||a.push(d(e,t,n,r,i,!0))}),a}function d(e,t,n,r,i,a){var o,u,c;if(c=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]},c.get?u=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(u=e.stylize("[Setter]","special")),C(r,i)||(o="["+i+"]"),u||(e.seen.indexOf(c.value)<0?(u=v(n)?s(e,c.value,null):s(e,c.value,n-1),u.indexOf("\n")>-1&&(u=a?u.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+u.split("\n").map(function(e){return"   "+e}).join("\n"))):u=e.stylize("[Circular]","special")),w(o)){if(a&&i.match(/^\d+$/))return u;o=JSON.stringify(""+i),o.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.substr(1,o.length-2),o=e.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=e.stylize(o,"string"))}return o+": "+u}function p(e,t,n){var r=0;return e.reduce(function(e,t){return r++,t.indexOf("\n")>=0&&r++,e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}function h(e){return Array.isArray(e)}function y(e){return"boolean"==typeof e}function v(e){return null===e}function m(e){return null==e}function b(e){return"number"==typeof e}function _(e){return"string"==typeof e}function g(e){return"symbol"===(void 0===e?"undefined":L(e))}function w(e){return void 0===e}function k(e){return S(e)&&"[object RegExp]"===x(e)}function S(e){return"object"===(void 0===e?"undefined":L(e))&&null!==e}function U(e){return S(e)&&"[object Date]"===x(e)}function T(e){return S(e)&&("[object Error]"===x(e)||e instanceof Error)}function A(e){return"function"==typeof e}function E(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"===(void 0===e?"undefined":L(e))||void 0===e}function x(e){return Object.prototype.toString.call(e)}function O(e){return e<10?"0"+e.toString(10):e.toString(10)}function D(){var e=new Date,t=[O(e.getHours()),O(e.getMinutes()),O(e.getSeconds())].join(":");return[e.getDate(),M[e.getMonth()],t].join(" ")}function C(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},j=/%[sdj%]/g;t.format=function(e){if(!_(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(i(arguments[n]));return t.join(" ")}for(var n=1,r=arguments,a=r.length,o=String(e).replace(j,function(e){if("%%"===e)return"%";if(n>=a)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}}),u=r[n];n<a;u=r[++n])v(u)||!S(u)?o+=" "+u:o+=" "+i(u);return o},t.deprecate=function(n,i){function a(){if(!o){if(r.throwDeprecation)throw new Error(i);r.traceDeprecation?console.trace(i):console.error(i),o=!0}return n.apply(this,arguments)}if(w(e.process))return function(){return t.deprecate(n,i).apply(this,arguments)};if(!0===r.noDeprecation)return n;var o=!1;return a};var V,R={};t.debuglog=function(e){if(w(V)&&(V=r.env.NODE_DEBUG||""),e=e.toUpperCase(),!R[e])if(new RegExp("\\b"+e+"\\b","i").test(V)){var n=r.pid;R[e]=function(){var r=t.format.apply(t,arguments);console.error("%s %d: %s",e,n,r)}}else R[e]=function(){};return R[e]},t.inspect=i,i.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},i.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=h,t.isBoolean=y,t.isNull=v,t.isNullOrUndefined=m,t.isNumber=b,t.isString=_,t.isSymbol=g,t.isUndefined=w,t.isRegExp=k,t.isObject=S,t.isDate=U,t.isError=T,t.isFunction=A,t.isPrimitive=E,t.isBuffer=n(11);var M=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];t.log=function(){console.log("%s - %s",D(),t.format.apply(t,arguments))},t.inherits=n(12),t._extend=function(e,t){if(!t||!S(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}}).call(t,n(9),n(10))},function(e,t,n){"use strict";t.download=function(e){var t=new Blob(e,{type:"application/octet-binary"}),n=window.URL.createObjectURL(t),r=document.createElement("a");r.style.display="none",r.href=n,r.download="test.mp4",document.body.appendChild(r),r.click(),setTimeout(function(){document.body.removeChild(r),window.URL.revokeObjectURL(n)},100)},t.downfile=function(e,t){var n=new File([e],"ce.mp4",{type:"video/mp4"}),r=window.URL.createObjectURL(n),i=document.createElement("a");i.style.display="none",i.href=r,i.download=t+".mp4",document.body.appendChild(i),i.click(),setTimeout(function(){document.body.removeChild(i),window.URL.revokeObjectURL(r)},100)},t.downFLV=function(e,t){var n=new File([e],"ce.flv",{type:"video/x-flv"}),r=window.URL.createObjectURL(n),i=document.createElement("a");i.style.display="none",i.href=r,i.download=t+".flv",document.body.appendChild(i),i.click(),setTimeout(function(){document.body.removeChild(i),window.URL.revokeObjectURL(r)},100)},t.downAudio=function(e){var t=new File([e],"ce.mpeg",{type:"audio/mpeg"}),n=window.URL.createObjectURL(t),r=document.createElement("a");r.style.display="none",r.href=n,r.download="test.mp3",document.body.appendChild(r),r.click(),setTimeout(function(){document.body.removeChild(r),window.URL.revokeObjectURL(n)},100)},t.mergebox=function(){var e=Array.prototype.slice.call(arguments),t=e.reduce(function(e,t){return e+t.byteLength},0),n=new Uint8Array(t),r=0;return e.forEach(function(e){e=new Uint8Array(e),n.set(e,r),r+=e.byteLength}),n},t.concatBuffer=function(){var e=new ArrayBuffer(0),n=t;return function(t,r){e=n.mergebox(e,t.buffer),e.byteLength>r&&n.downfile(e,"video")}}(),t.stop=function(){var e=0;return function(t){return console.log(e),t<=e++}}()},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var i=n(4),a=r(i),o=n(20),u=r(o),s=(n(2),new a.default("http://6721.liveplay.myqcloud.com/live/6721_98ad430ba390a2caafe5951250cbc67d.flv")),c=new u.default;s.bind("stream",function(e,t){c.parse(e,t)})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(23),c=r(s),f=n(6),l=n(7),d=n(8),p=r(d),h=(n(1),n(2)),y=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";i(this,t);var n=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));if(!window.fetch)throw new Error('your browser don"t support fetch API, please use modern Browser');return n._emitter=(0,c.default)(),n._url=e,n._CALCEL=!1,n._ERROR=!1,n._chunk=new ArrayBuffer(0),n._bufferLen,n._readLen=0,n._returnArr=[],e&&n._fetch(e),n}return o(t,e),u(t,[{key:"_fetch",value:function(e){var t=this;this._start(),fetch(e).then(function(n){var r=n.body.getReader();r.read().then(function t(i){var a=i.done,o=i.value;if(this._CALCEL&&!a)try{return console.log("drop this url, ",e),r.releaseLock(),n.body.cancel("the user decide to drop"),this._emit(f.HTTPCANCEL),void this._emit(f.CHUNKEDEND)}catch(e){console.warn('dont"t support drop(). because you brower don"t support reader.releaseLock() API \n',e)}return a?(console.log("the chunked connection has stopped"),void this._emit(f.CHUNKEDEND)):(console.log("every segment len is ",o.length),this.readChunk(o.buffer),(0,h.stop)(500)&&this.drop(),r.read().then(t.bind(this)))}.bind(t))}).catch(function(e){throw t._ERROR=!0,t._emit(f.CHUNKEDERR,e),new Error(e)})}},{key:"readChunk",value:function(e){this._chunk=(0,l.mergeBuffer)(this._chunk,e);var t=void 0,n=void 0,r=void 0;this._bufferLen=this._chunk.byteLength,this._readLen=0,this._returnArr=[];for(var i="MS";this._bufferLen-this._readLen>11;)if(n=new Uint8Array(this._chunk),70!==n[0]||76!==n[1]||86!==n[2]){r=new DataView(this._chunk);var a=(r.getUint32(0),16777215&r.getUint32(4));if(console.log(a),this._bufferLen-this._readLen<11+a)break;console.log(this._returnArr),t=this._flvTag(this._chunk.slice(4)),this._returnArr.push({buffer:t.buffer,info:{type:t.type,dataOffset:t.dataOffset,dataSize:t.dataSize,timeStamp:t.timeStamp,tagLen:t.tagLen}}),this._chunk=this._chunk.slice(t.tagLen+4),this._readLen+=t.tagLen+4}else t=this._flvHeader(this._chunk.slice(0,9)),this._returnArr.push({buffer:t.buffer,info:{type:t.type,version:t.version,tagOffset:t.tagOffset,hasAudio:t.hasAudio,hasVideo:t.hasVideo}}),this._readLen+=9,this._chunk=this._chunk.slice(9),i="IS";this._returnArr.length&&this._emit(f.CHUNKEDSTREAM,this._returnArr,i)}},{key:"replace",value:function(e){var t=this;this._url=e,this.drop().then(function(){t._fetch(e)})}},{key:"retry",value:function(){var e=this;if(console.log("retry"),this._ERROR)return this._fetch(this._url);this.drop().then(function(){e._fetch(e._url)})}},{key:"_start",value:function(){this._CALCEL=!1,this._ERROR=!1}},{key:"drop",value:function(){var e=this;return this._CALCEL=!0,new Promise(function(t,n){e._on(f.HTTPCANCEL,function(){t()})})}},{key:"addEventListener",value:function(e,t){switch(e){case"stream":this._on(f.CHUNKEDSTREAM,function(){t.apply(void 0,arguments)});break;case"end":this._on(f.CHUNKEDEND,function(){t.apply(void 0,arguments)});break;case"error":this._on(f.CHUNKEDERR,function(){t.apply(void 0,arguments)});break;default:this._on(e,function(){t.apply(void 0,arguments)})}}},{key:"bind",value:function(){this.addEventListener.apply(this,arguments)}},{key:"on",value:function(){this.addEventListener.apply(this,arguments)}},{key:"_on",value:function(){var e;(e=this._emitter).on.apply(e,arguments)}},{key:"_emit",value:function(){var e;(e=this._emitter).emit.apply(e,arguments)}}]),t}(p.default);t.default=y},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.HTTPCANCEL="HTTPCANCEL",t.CHUNKEDSTREAM="CHUNKEDSTREAM",t.CHUNKEDEND="CHUNKEDEND",t.CHUNKEDERR="CHUNKEDERR"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.mergeBuffer=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t.reduce(function(e,t){return e+t.byteLength},0),i=new Uint8Array(r),a=0;return t.forEach(function(e){i.set(new Uint8Array(e),a),a+=e.byteLength}),i.buffer},t.mergeTypedArray=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t.reduce(function(e,t){return e+t.byteLength},0),i=new Uint8Array(r),a=0;return t.forEach(function(e){i.set(e,a),a+=e.byteLength}),i}},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=(n(1),function(){function e(){r(this,e),this._type={8:"audio",9:"video",18:"script"}}return i(e,[{key:"_flvHeader",value:function(e){var t=e.slice(3),n=new DataView(t),r=n.getUint8(0),i=n.getUint8(1),a=n.getUint32(2),o=!0,u=!0;return 5!==i&&(u=!!(1&i),o=!!(1&i)),{type:"header",version:r,tagOffset:a,hasAudio:u,hasVideo:o,buffer:e}}},{key:"_flvTag",value:function(e){var t=new DataView(e),n=this._type[t.getUint8(0)],r=16777215&t.getUint32(0),i=t.getUint32(4)>>8,a=t.getUint8(7);return 0!==a&&(i|=a<<24),{type:n,dataSize:r,timeStamp:i,dataOffset:11,tagLen:r+11,buffer:e.slice(0,r+11)}}}]),e}());t.default=a},function(e,t,n){"use strict";var r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(e){"object"===("undefined"==typeof window?"undefined":i(window))&&(r=window)}e.exports=r},function(e,t,n){"use strict";function r(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(l===setTimeout)return setTimeout(e,0);if((l===r||!l)&&setTimeout)return l=setTimeout,setTimeout(e,0);try{return l(e,0)}catch(t){try{return l.call(null,e,0)}catch(t){return l.call(this,e,0)}}}function o(e){if(d===clearTimeout)return clearTimeout(e);if((d===i||!d)&&clearTimeout)return d=clearTimeout,clearTimeout(e);try{return d(e)}catch(t){try{return d.call(null,e)}catch(t){return d.call(this,e)}}}function u(){v&&h&&(v=!1,h.length?y=h.concat(y):m=-1,y.length&&s())}function s(){if(!v){var e=a(u);v=!0;for(var t=y.length;t;){for(h=y,y=[];++m<t;)h&&h[m].run();m=-1,t=y.length}h=null,v=!1,o(e)}}function c(e,t){this.fun=e,this.array=t}function f(){}var l,d,p=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:r}catch(e){l=r}try{d="function"==typeof clearTimeout?clearTimeout:i}catch(e){d=i}}();var h,y=[],v=!1,m=-1;p.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];y.push(new c(e,t)),1!==y.length||v||a(s)},c.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=f,p.addListener=f,p.once=f,p.off=f,p.removeListener=f,p.removeAllListeners=f,p.emit=f,p.prependListener=f,p.prependOnceListener=f,p.listeners=function(e){return[]},p.binding=function(e){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(e){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=function(e){return e&&"object"===(void 0===e?"undefined":r(e))&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t,n){"use strict";"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=n(0),c=r(s),f=n(14),l=r(f),d=n(15),p=r(d),h=n(16),y=r(h),v=n(19),m=r(v),b=new c.default("FLVDemux"),_=function(e){function t(){i(this,t);var e=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e._type={header:"header",video:"video",audio:"audio",script:"script"},e.AVC=new y.default({videoTrack:e._videoTrack,mediaInfo:e._mediaInfo}),e.AAC=new m.default({audioTrack:e._audioTrack,mediaInfo:e._mediaInfo}),e}return o(t,e),u(t,[{key:"parse",value:function(e){var t=!0,n=!1,r=void 0;try{for(var i,a=e[Symbol.iterator]();!(t=(i=a.next()).done);t=!0){var o=i.value,u=o.info;switch(u.type){case this._type.header:this._mediaInfo.hasVideo=u.hasVideo,this._mediaInfo.hasAudio=u.hasAudio;break;case this._type.video:if(!this._mediaInfo.hasVideo)return b.w("The FLVheader indicates hasVideo ",this._hasVideo," but accidentally enounter a video tag",o);this._parseVideo(o);break;case this._type.audio:if(!this._mediaInfo.hasAudio)return b.w("The FLVheader indicates hasVideo ",this._hasAudio," but accidentally enounter a audio tag",o);this._parseAudio(o);break;case this._type.script:this._parseScript(o)}}}catch(e){n=!0,r=e}finally{try{!t&&a.return&&a.return()}finally{if(n)throw r}}}},{key:"_parseVideo",value:function(e){var t=e.buffer,n=e.info;t=t.slice(n.dataOffset);var r=new DataView(t).getUint8(0),i=(240&r)>>>4,a=15&r;if(7!==a)return void b.e("It is only support AVC format(7), but you type code is "+a);this.AVC.parse(t.slice(1),i,a,n.timeStamp)}},{key:"_parseAudio",value:function(e){var t=e.buffer,n=e.info;t=t.slice(n.dataOffset);var r=new DataView(t),i=r.getUint8(0),a=i>>>4;if(2!==a&&10!==a)return void b.e("we do not support this type"+a);var o=(12&i)>>>2;if(!(o>=0&&o<=4))return void b.e("Invalid soundRate: "+o);o=this._flvSoundRateTable[o];var u=1&i,s=this._audioTrack.meta;s.audioSampleRate=o,s.channelCount=0===u?1:2,r=null,t=t.slice(1),2===a||10===a&&this.AAC.parse(t)}},{key:"_parseScript",value:function(e){var t=e.buffer,n=e.info,r=p.default.parseScriptData(t,n.dataOffset,n.dataSize);Object.assign(this._mediaInfo,r.onMetaData)}}]),t}(l.default);t.default=_},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(){i(this,e),this._videoTrack={type:"video",id:1,samples:[],length:0,meta:{type:"video",id:1,timescale:1e3,duration:0,codec:"",refSampleDuration:null,avcc:"",codecWidth:"",codecHeight:"",presentWidth:0,presentHeight:0}},this._audioTrack={type:"audio",id:2,sequenceNumber:0,samples:[],length:0,meta:r({type:"audio",id:2,timescale:1e3,duration:0,codec:"",refSampleDuration:null,audioSampleRate:null,config:null,channelCount:null},"codec",null)},this._flvSoundRateTable=[5500,11025,22050,44100,48e3],this._hasVideo,this._hasAudio,this._mediaInfo={audiocodecid:10,audiodatarate:62.5,audiosamplerate:48e3,audiosamplesize:16,duration:0,encoder:"Lavf57.56.101",filesize:0,height:640,stereo:!0,videocodecid:7,videodatarate:1171.875,width:368,hasVideo:!1,hasAudio:!1}}return a(e,[{key:"videoTrack",get:function(){return this._videoTrack}},{key:"audioTrack",get:function(){return this._audioTrack}},{key:"mediaInfo",get:function(){return this._mediaInfo}},{key:"MIME",get:function(){return'video/mp4; codecs="'+this._videoTrack.meta.codec+","+this._audioTrack.meta.codec+'"'}},{key:"videoMIME",get:function(){return'video/mp4; codecs="'+this._videoTrack.meta.codec+'"'}},{key:"audioMIME",get:function(){return'video/mp4; codecs="'+this._audioTrack.meta.codec+'"'}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(r),a=new i.default("AMF"),o={parseScriptData:function(e,t,n){var r={};try{var i=o.parseValue(e,t,n),u=o.parseValue(e,t+i.size,n-i.size);r[i.data]=u.data}catch(e){a.e("AMF",e.toString())}return r},parseObject:function(e,t,n){if(n<3)throw new Error("Data not enough when parse ScriptDataObject");var r=o.parseString(e,t,n),i=o.parseValue(e,t+r.size,n-r.size),a=i.objectEnd;return{data:{name:r.data,value:i.data},size:r.size+i.size,objectEnd:a}},parseVariable:function(e,t,n){return o.parseObject(e,t,n)},parseString:function(e,t,n){if(n<2)throw new Error("Data not enough when parse String");var r=new DataView(e,t,n),i=r.getUint16(0),a=void 0;return a=i>0?o.decodeUTF8(new Uint8Array(e,t+2,i)):"",{data:a,size:2+i}},parseLongString:function(e,t,n){if(n<4)throw new Error("Data not enough when parse LongString");var r=new DataView(e,t,n),i=r.getUint32(0),a=void 0;return a=i>0?o.decodeUTF8(new Uint8Array(e,t+4,i)):"",{data:a,size:4+i}},parseDate:function(e,t,n){if(n<10)throw new Error("Data size invalid when parse Date");var r=new DataView(e,t,n),i=r.getFloat64(0);return i+=60*r.getInt16(8)*1e3,{data:new Date(i),size:10}},parseValue:function(e,t,n){if(n<1)throw new Error("Data not enough when parse Value");var r=new DataView(e,t,n),i=1,u=r.getUint8(0),s=void 0,c=!1;try{switch(u){case 0:s=r.getFloat64(1),i+=8;break;case 1:s=!!r.getUint8(1),i+=1;break;case 2:var f=o.parseString(e,t+1,n-1);s=f.data,i+=f.size;break;case 3:s={};var l=0;for(9==(16777215&r.getUint32(n-4))&&(l=3);i<n-4;){var d=o.parseObject(e,t+i,n-i-l);if(d.objectEnd)break;s[d.data.name]=d.data.value,i+=d.size}if(i<=n-3){9===(16777215&r.getUint32(i-1))&&(i+=3)}break;case 8:s={},i+=4;var p=0;for(9==(16777215&r.getUint32(n-4))&&(p=3);i<n-8;){var h=o.parseVariable(e,t+i,n-i-p);if(h.objectEnd)break;s[h.data.name]=h.data.value,i+=h.size}if(i<=n-3){9===(16777215&r.getUint32(i-1))&&(i+=3)}break;case 9:s=void 0,i=1,c=!0;break;case 10:s=[];var y=r.getUint32(1);i+=4;for(var v=0;v<y;v++){var m=o.parseValue(e,t+i,n-i);s.push(m.data),i+=m.size}break;case 11:var b=o.parseDate(e,t+1,n-1);s=b.data,i+=b.size;break;case 12:var _=o.parseString(e,t+1,n-1);s=_.data,i+=_.size;break;default:i=n,a.w("AMF","Unsupported AMF value type "+u)}}catch(e){a.e("AMF",e.toString())}return{data:s,size:i,objectEnd:c}},decodeUTF8:function(e){var t="",n=0,r=0,i=0;for(e.length>=3&&239===e[0]&&187===e[1]&&191===e[2]&&(n=3);n<e.length;)if((r=e[n])<128)t+=String.fromCharCode(r),n++;else if(r>191&&r<224){if(n+1>=e.length)throw"UTF-8 Decode failed. Two byte character was truncated.";i=e[n+1],t+=String.fromCharCode((31&r)<<6|63&i),n+=2}else{if(n+2>=e.length)throw"UTF-8 Decode failed. Multi byte character was truncated.";i=e[n+1],c3=e[n+2],t+=String.fromCharCode((15&r)<<12|(63&i)<<6|63&c3),n+=3}return t}};t.default=o},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0),u=r(o),s=n(7),c=n(17),f=r(c),l=new u.default("AVCDemux"),d=function(){function e(t){var n=t.videoTrack,r=t.mediaInfo;i(this,e),this._videoTrack=n,this._mediaInfo=r,this._referenceFrameRate={fixed:!0,fps:23.976,fps_num:23976,fps_den:1e3},this._naluLengthSize=4,this._timestampBase=0,this._keyFrame={1:!0,2:!1}}return a(e,[{key:"parse",value:function(e,t,n,r){var i=new DataView(e),a=i.getUint8(0),o=16777215&i.getUint32(0);switch(i=null,e=e.slice(4),a){case 0:this._parseConfig(e);break;case 1:this._parseAVC(e,{cts:o,frameType:t,timeStamp:r})}}},{key:"_parseAVC",value:function(e,t){var n=t.cts,r=t.frameType,i=(t.timeStamp,new DataView(e)),a=[],o=e.byteLength,u=0,c=!!this._keyFrame[r],f=this._naluLengthSize,d=this._timestampBase;for(this._timestampBase+=this._videoTrack.meta.refSampleDuration;u<o;){if(u+4>=o){l.w("not enought data to parse");break}var p=i.getUint32(u);if(3===f&&(p>>>=8),p>o-f)return void l.w("invalid nalu value");5===(31&i.getUint8(u+f))&&(c=!0);var h=new Uint8Array(e,u,f+p);a.push(h),u+=f+p}a=s.mergeTypedArray.apply(null,a),a.length&&(this._videoTrack.samples.push({slices:a,length:u,keyFrame:c,dts:d,cts:n,pts:d+n}),this._videoTrack.length+=u)}},{key:"_parseConfig",value:function(e){var t=new DataView(e),n=t.getUint8(0),r=t.getUint8(1);t.getUint8(2),t.getUint8(3);if(1!==n||0===r)return void l.e("Invalid AVCDecoderConfigurationRecord");var i=this._naluLengthSize=1+(3&t.getUint8(4));if(3!==i&&4!==i)return void l.e("Invalid NaluLengthSizeMinusOne: "+i);var a=31&t.getUint8(5);if(0===a)return void l.e('the SequenceParameterSets count couldn"t be 0');a>1&&l.e("strange count of SPS, it should be 1 as usual");for(var o=6,u=0;u<a;u++)if(!(u>0)){var s=t.getUint16(o);if(o+=2,s){var c=new Uint8Array(e,o,s);o+=s;var d=f.default.parseSPS(c);this._extrackInfo(d,c)}}this._videoTrack.meta.avcc=new Uint8Array(e),console.log("parsed already, ",this._videoTrack)}},{key:"_extrackInfo",value:function(e,t){var n=this._videoTrack.meta;n.spsInfo=e,n.codecWidth=e.codec_size.width,n.codecHeight=e.codec_size.height,n.presentWidth=e.present_size.width,n.presentHeight=e.present_size.height,console.log(e),!1!==e.frame_rate.fixed&&0!==e.frame_rate.fps_num&&0!==e.frame_rate.fps_den||(n.frameRate=this._referenceFrameRate);var r=n.frameRate,i=r.fps_den,a=r.fps_num;n.refSampleDuration=Math.floor(n.timescale*(i/a));for(var o=t.subarray(1,4),u="avc1.",s=0;s<3;s++){var c=o[s].toString(16);c.length<2&&(c="0"+c),u+=c}n.codec=u}}]),e}();t.default=d},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(18),o=function(e){return e&&e.__esModule?e:{default:e}}(a),u=function(){function e(){r(this,e)}return i(e,null,[{key:"_ebsp2rbsp",value:function(e){for(var t=e,n=t.byteLength,r=new Uint8Array(n),i=0,a=0;a<n;a++)a>=2&&3===t[a]&&0===t[a-1]&&0===t[a-2]||(r[i]=t[a],i++);return new Uint8Array(r.buffer,0,i)}},{key:"parseSPS",value:function(t){var n=e._ebsp2rbsp(t),r=new o.default(n);r.readByte();var i=r.readByte();r.readByte();var a=r.readByte();r.readUEG();var u=e.getProfileString(i),s=e.getLevelString(a),c=1,f=420,l=[0,420,422,444],d=8;if((100===i||110===i||122===i||244===i||44===i||83===i||86===i||118===i||128===i||138===i||144===i)&&(c=r.readUEG(),3===c&&r.readBits(1),c<=3&&(f=l[c]),d=r.readUEG()+8,r.readUEG(),r.readBits(1),r.readBool()))for(var p=3!==c?8:12,h=0;h<p;h++)r.readBool()&&(h<6?e._skipScalingList(r,16):e._skipScalingList(r,64));r.readUEG();var y=r.readUEG();if(0===y)r.readUEG();else if(1===y){r.readBits(1),r.readSEG(),r.readSEG();for(var v=r.readUEG(),m=0;m<v;m++)r.readSEG()}r.readUEG(),r.readBits(1);var b=r.readUEG(),_=r.readUEG(),g=r.readBits(1);0===g&&r.readBits(1),r.readBits(1);var w=0,k=0,S=0,U=0;r.readBool()&&(w=r.readUEG(),k=r.readUEG(),S=r.readUEG(),U=r.readUEG());var T=1,A=1,E=0,x=!0,O=0,D=0;if(r.readBool()){if(r.readBool()){var C=r.readByte(),L=[1,12,10,16,40,24,20,32,80,18,15,64,160,4,3,2],j=[1,11,11,11,33,11,11,11,33,11,11,33,99,3,2,1];C>0&&C<16?(T=L[C-1],A=j[C-1]):255===C&&(T=r.readByte()<<8|r.readByte(),A=r.readByte()<<8|r.readByte())}if(r.readBool()&&r.readBool(),r.readBool()&&(r.readBits(4),r.readBool()&&r.readBits(24)),r.readBool()&&(r.readUEG(),r.readUEG()),r.readBool()){var V=r.readBits(32),R=r.readBits(32);x=r.readBool(),O=R,D=2*V,E=O/D}}var M=1;1===T&&1===A||(M=T/A);var B=0,z=0;if(0===c)B=1,z=2-g;else{var P=3===c?1:2,F=1===c?2:1;B=P,z=F*(2-g)}var I=16*(b+1),H=16*(_+1)*(2-g);I-=(w+k)*B,H-=(S+U)*z;var N=Math.ceil(I*M);return r.destroy(),r=null,{profile_string:u,level_string:s,bit_depth:d,chroma_format:f,chroma_format_string:e.getChromaFormatString(f),frame_rate:{fixed:x,fps:E,fps_den:D,fps_num:O},sar_ratio:{width:T,height:A},codec_size:{width:I,height:H},present_size:{width:N,height:H}}}},{key:"_skipScalingList",value:function(e,t){for(var n=8,r=8,i=0,a=0;a<t;a++)0!==r&&(i=e.readSEG(),r=(n+i+256)%256),n=0===r?n:r}},{key:"getProfileString",value:function(e){switch(e){case 66:return"Baseline";case 77:return"Main";case 88:return"Extended";case 100:return"High";case 110:return"High10";case 122:return"High422";case 244:return"High444";default:return"Unknown"}}},{key:"getLevelString",value:function(e){return(e/10).toFixed(1)}},{key:"getChromaFormatString",value:function(e){switch(e){case 420:return"4:2:0";case 422:return"4:2:2";case 444:return"4:4:4";default:return"Unknown"}}}]),e}();t.default=u},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(){function e(t){r(this,e),this.TAG="ExpGolomb",this._buffer=t,this._buffer_index=0,this._total_bytes=t.byteLength,this._total_bits=8*t.byteLength,this._current_word=0,this._current_word_bits_left=0}return i(e,[{key:"destroy",value:function(){this._buffer=null}},{key:"_fillCurrentWord",value:function(){var e=this._total_bytes-this._buffer_index;if(e<=0)throw new Error("ExpGolomb: _fillCurrentWord() but no bytes available");var t=Math.min(4,e),n=new Uint8Array(4);n.set(this._buffer.subarray(this._buffer_index,this._buffer_index+t)),this._current_word=new DataView(n.buffer).getUint32(0,!1),this._buffer_index+=t,this._current_word_bits_left=8*t}},{key:"readBits",value:function(e){if(e>32)throw new Error("ExpGolomb: readBits() bits exceeded max 32bits!");if(e<=this._current_word_bits_left){var t=this._current_word>>>32-e;return this._current_word<<=e,this._current_word_bits_left-=e,t}var n=this._current_word_bits_left?this._current_word:0;n>>>=32-this._current_word_bits_left;var r=e-this._current_word_bits_left;this._fillCurrentWord();var i=Math.min(r,this._current_word_bits_left),a=this._current_word>>>32-i;return this._current_word<<=i,this._current_word_bits_left-=i,n=n<<i|a}},{key:"readBool",value:function(){return 1===this.readBits(1)}},{key:"readByte",value:function(){return this.readBits(8)}},{key:"_skipLeadingZero",value:function(){var e=void 0;for(e=0;e<this._current_word_bits_left;e++)if(0!=(this._current_word&2147483648>>>e))return this._current_word<<=e,this._current_word_bits_left-=e,e;return this._fillCurrentWord(),e+this._skipLeadingZero()}},{key:"readUEG",value:function(){var e=this._skipLeadingZero();return this.readBits(e+1)-1}},{key:"readSEG",value:function(){var e=this.readUEG();return 1&e?e+1>>>1:-1*(e>>>1)}}]),e}();t.default=a},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),o=function(e){return e&&e.__esModule?e:{default:e}}(a),u=new o.default("AACDemux"),s=function(){function e(t){var n=t.audioTrack,i=t.mediaInfo;r(this,e),this._audioTrack=n,this._mediaInfo=i,this._mpegSamplingRates=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350],this._timestampBase=0}return i(e,[{key:"parse",value:function(e){0===new DataView(e).getUint8(0)?this._parseConfig(e.slice(1)):this._parseAAC(e.slice(1))}},{key:"_parseAAC",value:function(e){var t=new Uint8Array(e),n=this._timestampBase;this._timestampBase+=this._audioTrack.meta.refSampleDuration,this._audioTrack.samples.push({unit:t,dts:n,pts:n,length:t.byteLength}),this._audioTrack.length+=t.byteLength}},{key:"_parseConfig",value:function(e){var t=new Uint8Array(e),n=this._audioTrack.meta,r=void 0,i=navigator.userAgent.toLowerCase(),a=t[0]>>>3,o=(7&t[0])<<1|t[1]>>>7,s=null;if(o<0||o>=this._mpegSamplingRates.length)return void u.e("invalid samplingFreIndex: "+o);var c=this._mpegSamplingRates[o],f=(120&t[1])>>>3;if(f<0||f>7)return void u.e("invalid channel Count: "+f);5===a&&(s=(7&t[1])<<1|t[2]>>>7,audioExtensionObjectType=(124&t[2])>>>2),u.i("userAgent is "+i),u.i("the audioObjectType in AAC is "+a),-1!==i.indexOf("firefox")?o>=6?(a=5,r=new Array(4),s=o-3):(a=2,r=new Array(2),s=o):-1!==i.indexOf("android")?(a=2,r=new Array(2),s=o):(a=5,s=o,r=new Array(4),o>=6?s=o-3:1===f&&(a=2,r=new Array(2),s=o),r[0]=a<<3,r[0]|=(15&o)>>>1,r[1]=(15&o)<<7,r[1]|=(15&f)<<3),r[0]=a<<3,r[0]|=(15&o)>>>1,r[1]=(15&o)<<7,r[1]|=(15&f)<<3,5===a&&(r[1]|=(15&s)>>>1,r[2]=(1&s)<<7,r[2]|=8,r[3]=0),n.config=r,n.audioSampleRate=c,n.channelCount=f,n.codec="mp4a.40."+a,n.refSampleDuration=Math.floor(1024/n.audioSampleRate*n.timescale)}}]),e}();t.default=s},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(13),u=r(o),s=n(21),c=r(s),f=n(2),l=function(){function e(){i(this,e),this._flvDemux=new u.default,this._mp4Remux=new c.default({audioTrack:this._flvDemux.audioTrack,videoTrack:this._flvDemux.videoTrack,mediaInfo:this._flvDemux.mediaInfo})}return a(e,[{key:"parse",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"MS";this._flvDemux.parse(e);var n=void 0;n="IS"===t?this._mp4Remux.generateIS():this._mp4Remux.generateMS(),(0,f.concatBuffer)(n,102400)}}]),e}();t.default=l},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(22),o=function(e){return e&&e.__esModule?e:{default:e}}(a),u=n(7),s=function(){function e(t){var n=t.audioTrack,i=t.videoTrack,a=t.mediaInfo;r(this,e),this._audioTrack=n,this._videoTrack=i,this._mediaInfo=a,this._seq=0}return i(e,[{key:"generateIS",value:function(){var e=this._mediaInfo,t=e.hasVideo,n=e.hasAudio;if(t&&n)return o.default.initBox(this._videoTrack.meta,this._audioTrack.meta)}},{key:"generateMS",value:function(){var e=(new Uint8Array(0),new Uint8Array(0));return this._videoTrack.samples.length&&this._remuxVideo(),this._audioTrack.samples.length&&(e=this._remuxAudio()),this._videoTrack.samples=[],this._audioTrack.samples=[],this._videoTrack.length=this._audioTrack.length=0,(0,u.mergeTypedArray)(e)}},{key:"_remuxAudio",value:function(){var e=this._remuxAudioMdat(),t=e.audioMdat,n=e.baseDts,r=o.default.moof(this._audioTrack,n,this._seq);return(0,u.mergeTypedArray)(r,t)}},{key:"_remuxVideo",value:function(){var e=this._remuxVideoMdat(),t=e.videoMdat,n=e.baseDts,r=o.default.moof(this._videoTrack,n,this._seq);return(0,u.mergeTypedArray)(r,t)}},{key:"_remuxAudioMdat",value:function(){var e=o.default.mdat(this._audioTrack.length),t=8,n=this._audioTrack,r=n.meta,i=r.refSampleDuration,a=n.samples,u=a[0].dts,s=[];return a.forEach(function(n,r){var a=n.dts,o=n.pts;e.set(n.unit,t);var u=n.unit.byteLength;s.push({dts:a,pts:o,cts:0,sampleSize:u,duration:i,chunkOffset:t,flags:{isLeading:0,dependsOn:1,isDepended:0,hasRedundancy:0}}),t+=u}),n.samples=s,this._seq++,{baseDts:u,audioMdat:e}}},{key:"_remuxVideoMdat",value:function(){var e=o.default.mdat(this._videoTrack.length),t=8,n=this._videoTrack,r=n.meta,i=r.refSampleDuration,a=n.samples,u=[],s=a[0].dts;return console.log(this._videoTrack),console.log(this._audioTrack),a.forEach(function(n,a){var o=n.dts,s=n.cts,c=o+s,f=n.slices.byteLength;e.set(n.slices,t),r.duration+=i;var l=n.keyFrame;u.push({dts:o,pts:c,cts:s,length:n.length,keyFrame:l,sampleSize:f,duration:i,chunkOffset:t,flags:{isLeading:0,dependsOn:l?2:1,isDepended:l?1:0,hasRedundancy:0,isNonSync:l?0:1}}),t+=n.length}),console.log(u),n.samples=u,this._seq++,{videoMdat:e,baseDts:s}}}]),e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={};r.types={avc1:[],avcC:[],btrt:[],dinf:[],dref:[],esds:[],ftyp:[],hdlr:[],mdat:[],mdhd:[],mdia:[],mfhd:[],minf:[],moof:[],moov:[],mp4a:[],".mp3":[],mvex:[],mvhd:[],pasp:[],sdtp:[],stbl:[],stco:[],stsc:[],stsd:[],stsz:[],stts:[],tfdt:[],tfhd:[],traf:[],trak:[],trun:[],trex:[],tkhd:[],vmhd:[],smhd:[],free:[],stss:[],ctts:[]},r.symbolValue={FTYP:new Uint8Array([105,115,111,109,0,0,0,1,105,115,111,109,97,118,99,49]),HDLR_VIDEO:new Uint8Array([0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0]),HDLR_AUDIO:new Uint8Array([0,0,0,0,0,0,0,0,115,111,117,110,0,0,0,0,0,0,0,0,0,0,0,0,83,111,117,110,100,72,97,110,100,108,101,114,0]),STSC:new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1]),FSTTS:new Uint8Array([0,0,0,0,0,0,0,0]),FSTSC:new Uint8Array([0,0,0,0,0,0,0,0]),FSTSZ:new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]),FSTCO:new Uint8Array([0,0,0,0,0,0,0,0]),STTS:new Uint8Array([0,0,0,0]),CTTS:new Uint8Array([0,0,0,0]),STCO:new Uint8Array([0,0,0,0]),STSZ:new Uint8Array([0,0,0,0]),STSD:new Uint8Array([0,0,0,0,0,0,0,1]),DREF:new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1]),VMHD:new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]),SMHD:new Uint8Array([0,0,0,0,0,0,0,0]),STSS:new Uint8Array([0,0,0,0])},r.box=function(e){var t=8,n=Array.prototype.slice.call(arguments,1);n.forEach(function(e){t+=e.byteLength});var r=new Uint8Array(t);r[0]=t>>24&255,r[1]=t>>16&255,r[2]=t>>8&255,r[3]=255&t,r.set(e,4);var i=8;return n.forEach(function(e){r.set(e,i),i+=e.byteLength}),r},r.free=function(){return r.box(r.types.free)},r.moof=function(e,t,n){return r.box(r.types.moof,r.mfhd(n),r.traf(e,t))},r.mfhd=function(e){return r.fragmentBox(r.types.mfhd,e)},r.mdat=function(e){e+=8;var t=new Uint8Array(e);return new DataView(t.buffer).setUint32(0,e),t.set(r.types.mdat,4),t},r.traf=function(e,t){var n=r.tfhd(e.id),i=r.tfdt(t),a=r.sdtp(e),o=r.trun(e,64+a.byteLength+8);return r.box(r.types.traf,n,i,o,a)},r.trun=function(e,t){var n=e.samples||[],i=n.length,a=12+16*i,o=new Uint8Array(a);return t+=8+a,o.set([0,0,15,1,i>>>24&255,i>>>16&255,i>>>8&255,255&i,t>>>24&255,t>>>16&255,t>>>8&255,255&t],0),n.forEach(function(e,t){var n=e.duration,r=e.sampleSize,i=e.flags,a=e.cts;o.set([n>>>24&255,n>>>16&255,n>>>8&255,255&n,r>>>24&255,r>>>16&255,r>>>8&255,255&r,i.isLeading<<2|i.dependsOn,i.isDepended<<6|i.hasRedundancy<<4|i.isNonSync,0,0,a>>>24&255,a>>>16&255,a>>>8&255,255&a],12+16*t)}),r.box(r.types.trun,o)},r.sdtp=function(e){for(var t,n=e.samples||[],i=n.length,a=new Uint8Array(i+4),o=0;o<i;o++)t=n[o].flags,a[o+4]=t.dependsOn<<4|t.isDepended<<2|t.hasRedundancy;return r.box(r.types.sdtp,a)},r.tfhd=function(e){return r.fragmentBox(r.types.tfhd,e)},r.tfdt=function(e){return r.fragmentBox(r.types.tfdt,e)},r.fragmentBox=function(e,t){var n=new Uint8Array([0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t]);return r.box(e,n)},r.ftyp=function(){return r.box(r.types.ftyp,r.symbolValue.FTYP)},r.initBox=function(e,t){var n=r.box(r.types.ftyp,r.symbolValue.FTYP),i=r.fmoov(e,t),a=new Uint8Array(n.byteLength+i.byteLength);return a.set(n,0),a.set(i,n.byteLength),a},r.fmoov=function(e,t){var n=r.mvhd(e.timescale,e.duration);return t?r.box(r.types.moov,n,r.trak(e),r.trak(t),r.mvex(1,2)):r.box(r.types.moov,n,r.trak(e),r.mvex(1))},r.moov=function(e,t,n){return r.box(r.types.moov,e,t)},r.mvex=function(e,t){return t?r.box(r.types.mvex,r.trex(e),r.trex(t)):r.box(r.types.mvex,r.trex(e))},r.trex=function(e){var t=new Uint8Array([0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]);return r.box(r.types.trex,t)},r.trak=function(e){return r.box(r.types.trak,r.tkhd(e),r.mdia(e))},r.mdia=function(e){return r.box(r.types.mdia,r.mdhd(e),r.hdlr(e),r.minf(e))},r.hdlr=function(e){return"video"===e.type?r.box(r.types.hdlr,r.symbolValue.HDLR_VIDEO):r.box(r.types.hdlr,r.symbolValue.HDLR_AUDIO)},r.minf=function(e){var t="video"===e.type?r.box(r.types.vmhd,r.symbolValue.VMHD):r.box(r.types.smhd,r.symbolValue.SMHD);return r.box(r.types.minf,t,r.dinf(),r.fstbl(e))},r.dinf=function(){var e=r.box(r.types.dref,r.symbolValue.DREF);return r.box(r.types.dinf,e)},r.stss=function(e){var t=e.track,n=t.samples,i=[];n.forEach(function(e,t){e.keyframe&&i.push(t)});var a=new DataView(new ArrayBuffer(4+4*i.length));a.setUint32(0,i.length);var o=4;return i.forEach(function(e){a.setUint32(o,e+1),o+=4}),r.box(r.types.stss,r.symbolValue.STSS,new Uint8Array(a.buffer))},r.stbl=function(e){return"audio"===e.type?r.box(r.types.stbl,r.stsd(e),r.stts(e),r.stsc(e),r.stsz(e),r.stco(e)):r.box(r.types.stbl,r.stsd(e),r.stts(e),r.ctts(e),r.stsc(e),r.stss(e),r.stsz(e),r.stco(e))},r.fstbl=function(e){return r.box(r.types.stbl,r.stsd(e),r.box(r.types.stts,r.symbolValue.FSTTS),r.box(r.types.stsc,r.symbolValue.FSTSC),r.box(r.types.stsz,r.symbolValue.FSTSZ),r.box(r.types.stco,r.symbolValue.FSTCO))},r.stts=function(e){var t=e.track,n=[],i=t.samples,a=i[0].duration,o=0,u=i.length;i.forEach(function(e,t){var r=e.duration;r===a?o++:(n.push([o,a]),a=r,o=1),t===u-1&&n.push([o,a])});var s=new DataView(new ArrayBuffer(8*n.length+4));s.setUint32(0,n.length);var c=4;return n.forEach(function(e){s.setUint32(c,e[0]),s.setUint32(c+4,e[1]),c+=8}),r.box(r.types.stts,r.symbolValue.STTS,new Uint8Array(s.buffer))},r.ctts=function(e){var t=e.track,n=[],i=t.samples,a=i[0].cts,o=0,u=i.length;i.forEach(function(e,t){var r=e.cts;r===a?o++:(n.push([o,a]),a=r,o=1),t===u-1&&n.push([o,a])});var s=new DataView(new ArrayBuffer(8*n.length+4));s.setUint32(0,n.length);var c=4;return n.forEach(function(e){s.setUint32(c,e[0]),s.setUint32(c+4,e[1]),c+=8}),r.box(r.types.ctts,r.symbolValue.CTTS,new Uint8Array(s.buffer))},r.stco=function(e){var t=e.track.samples,n=new DataView(new ArrayBuffer(4*t.length+4));n.setUint32(0,t.length);var i=4;return t.forEach(function(e){n.setUint32(i,e.chunkOffset),i+=4}),r.box(r.types.stco,r.symbolValue.STCO,new Uint8Array(n.buffer))},r.stsc=function(e){return r.box(r.types.stsc,r.symbolValue.STSC)},r.stsz=function(e){var t=e.track.samples,n=new DataView(new ArrayBuffer(4*t.length+8));n.setUint32(0,0),n.setUint32(4,t.length);var i=8;return t.forEach(function(e){var t=e.sampleSize;n.setUint32(i,t),i+=4}),r.box(r.types.stsz,r.symbolValue.STSZ,new Uint8Array(n.buffer))},r.stsd=function(e){return"video"===e.type?r.box(r.types.stsd,r.symbolValue.STSD,r.avc1(e)):"mp3"===e.codec?r.box(r.types.stsd,r.symbolValue.STSD,r.mp3(e)):r.box(r.types.stsd,r.symbolValue.STSD,r.mp4a(e))},r.mp3=function(e){var t=e.channelCount,n=(e.audioSampleRate,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,t,0,16,0,0,0,0,sampleRate>>>8&255,255&sampleRate,0,0]));return r.box(r.types[".mp3"],n)},r.mp4a=function(e){var t=e.channelCount,n=e.audioSampleRate,i=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,t,0,16,0,0,0,0,n>>>8&255,255&n,0,0]);return r.box(r.types.mp4a,i,r.esds(e))},r.esds=function(e){var t=e.config||[],n=t.length,i=new Uint8Array([0,0,0,0,3,23+n,0,1,0,4,15+n,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([n]).concat(t).concat([6,1,2]));return r.box(r.types.esds,i)},r.avc1=function(e){var t=e.avcc,n=e.codecWidth,i=e.codecHeight,a=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n>>>8&255,255&n,i>>>8&255,255&i,0,72,0,0,0,72,0,0,0,0,0,0,0,1,15,118,105,108,108,97,105,110,104,114,47,97,118,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,255,255]);return r.box(r.types.avc1,a,r.box(r.types.avcC,t))},r.mdhd=function(e){var t=e.timescale,n=e.duration;return r.box(r.types.mdhd,new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,n>>>24&255,n>>>16&255,n>>>8&255,255&n,85,196,0,0]))},r.tkhd=function(e){var t=e.id,n=e.presentWidth,i=(e.track,e.duration),a=e.presentHeight,o=new Uint8Array([0,0,0,7,0,0,0,0,0,0,0,0,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,0,0,0,i>>>24&255,i>>>16&255,i>>>8&255,255&i,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,n>>>8&255,255&n,0,0,a>>>8&255,255&a,0,0]),u=new DataView(o.buffer);return"video"===e.type&&(u.setUint16(34,0),u.setUint16(36,0)),r.box(r.types.tkhd,o)},r.mvhd=function(e,t){return r.box(r.types.mvhd,new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,e>>>24&255,e>>>16&255,e>>>8&255,255&e,t>>>24&255,t>>>16&255,t>>>8&255,255&t,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]))},r.init=function(){Object.keys(r.types).forEach(function(e){r.types[e]=[e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]})},r.init(),t.default=r},function(e,t,n){"use strict";function r(){var e=Object.create(null);return{on:function(t,n){(e[t]||(e[t]=[])).push(n)},off:function(t,n){e[t]&&e[t].splice(e[t].indexOf(n)>>>0,1)},emit:function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];(e[t]||[]).slice().map(function(e){e.apply(void 0,r)}),(e["*"]||[]).slice().map(function(e){e.apply(void 0,[t].concat(r))})}}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vaW5kZXguanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIGViMWYwODQyMDAyODE1ZWJlOWE2Iiwid2VicGFjazovLy8uL2xpYi9sb2cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V0aWwvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9kZWJ1Zy9oZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaHR0cGZsdi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbGliL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2h0dHBmbHYvbGliL2hlYWRlci5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL211eC9kZW11eC9mbHZkZW11eC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbXV4L2RlbXV4L2xpYi9iYXNlaW5mby5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbXV4L2RlbXV4L2xpYi9hbWYuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL211eC9kZW11eC9hdmNkZW11eC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbXV4L2RlbXV4L2xpYi9zcHNfcGFyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL211eC9kZW11eC9saWIvZXhwX2dvbG9tYi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbXV4L2RlbXV4L2FhY2RlbXV4LmpzIiwid2VicGFjazovLy8uL3NyYy9tdXgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL211eC9yZW11eC9tcDRyZW11eC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbXV4L3JlbXV4L2xpYi9tcDRfZ2VuZXJhdG9yLmpzIiwid2VicGFjazovLy8uL2xpYi9taXR0LmpzIl0sIm5hbWVzIjpbIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwidmFsdWUiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwid3JpdGFibGUiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJMb2ciLCJ0aGlzIiwiX2NvbnNvbGUiLCJfbGVuIiwiYXJndW1lbnRzIiwibXNnIiwiQXJyYXkiLCJfa2V5IiwiY29uc29sZSIsIndhcm4iLCJhcHBseSIsIkRhdGUiLCJ0b1RpbWVTdHJpbmciLCJjb25jYXQiLCJsb2ciLCJlcnJvciIsImluZm8iLCJkZWZhdWx0IiwiZ2xvYmFsIiwicHJvY2VzcyIsImluc3BlY3QiLCJvYmoiLCJvcHRzIiwiY3R4Iiwic2VlbiIsInN0eWxpemUiLCJzdHlsaXplTm9Db2xvciIsImRlcHRoIiwiY29sb3JzIiwiaXNCb29sZWFuIiwic2hvd0hpZGRlbiIsIl9leHRlbmQiLCJpc1VuZGVmaW5lZCIsImN1c3RvbUluc3BlY3QiLCJzdHlsaXplV2l0aENvbG9yIiwiZm9ybWF0VmFsdWUiLCJzdHIiLCJzdHlsZVR5cGUiLCJzdHlsZSIsInN0eWxlcyIsImFycmF5VG9IYXNoIiwiYXJyYXkiLCJoYXNoIiwiZm9yRWFjaCIsInZhbCIsImlkeCIsInJlY3Vyc2VUaW1lcyIsImlzRnVuY3Rpb24iLCJjb25zdHJ1Y3RvciIsInJldCIsImlzU3RyaW5nIiwicHJpbWl0aXZlIiwiZm9ybWF0UHJpbWl0aXZlIiwia2V5cyIsInZpc2libGVLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImlzRXJyb3IiLCJpbmRleE9mIiwiZm9ybWF0RXJyb3IiLCJpc1JlZ0V4cCIsIlJlZ0V4cCIsInRvU3RyaW5nIiwiaXNEYXRlIiwiYmFzZSIsImJyYWNlcyIsImlzQXJyYXkiLCJ0b1VUQ1N0cmluZyIsInB1c2giLCJvdXRwdXQiLCJmb3JtYXRBcnJheSIsIm1hcCIsImZvcm1hdFByb3BlcnR5IiwicG9wIiwicmVkdWNlVG9TaW5nbGVTdHJpbmciLCJzaW1wbGUiLCJKU09OIiwic3RyaW5naWZ5IiwicmVwbGFjZSIsImlzTnVtYmVyIiwiaXNOdWxsIiwiRXJyb3IiLCJTdHJpbmciLCJtYXRjaCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJzZXQiLCJzcGxpdCIsImxpbmUiLCJqb2luIiwic3Vic3RyIiwibnVtTGluZXNFc3QiLCJyZWR1Y2UiLCJwcmV2IiwiY3VyIiwiYXIiLCJhcmciLCJpc051bGxPclVuZGVmaW5lZCIsImlzU3ltYm9sIiwiX3R5cGVvZiIsInJlIiwiaXNPYmplY3QiLCJvYmplY3RUb1N0cmluZyIsImUiLCJpc1ByaW1pdGl2ZSIsInBhZCIsInRpbWVzdGFtcCIsInRpbWUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0RGF0ZSIsIm1vbnRocyIsImdldE1vbnRoIiwicHJvcCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiZm9ybWF0UmVnRXhwIiwiZm9ybWF0IiwiZiIsIm9iamVjdHMiLCJhcmdzIiwibGVuIiwieCIsIk51bWJlciIsIl8iLCJkZXByZWNhdGUiLCJmbiIsImRlcHJlY2F0ZWQiLCJ3YXJuZWQiLCJ0aHJvd0RlcHJlY2F0aW9uIiwidHJhY2VEZXByZWNhdGlvbiIsInRyYWNlIiwibm9EZXByZWNhdGlvbiIsImRlYnVnRW52aXJvbiIsImRlYnVncyIsImRlYnVnbG9nIiwiZW52IiwiTk9ERV9ERUJVRyIsInRvVXBwZXJDYXNlIiwidGVzdCIsInBpZCIsImJvbGQiLCJpdGFsaWMiLCJ1bmRlcmxpbmUiLCJpbnZlcnNlIiwid2hpdGUiLCJncmV5IiwiYmxhY2siLCJibHVlIiwiY3lhbiIsImdyZWVuIiwibWFnZW50YSIsInJlZCIsInllbGxvdyIsInNwZWNpYWwiLCJudW1iZXIiLCJib29sZWFuIiwidW5kZWZpbmVkIiwibnVsbCIsInN0cmluZyIsImRhdGUiLCJyZWdleHAiLCJpc0J1ZmZlciIsImluaGVyaXRzIiwib3JpZ2luIiwiYWRkIiwiZG93bmxvYWQiLCJtcDQiLCJibG9iIiwiQmxvYiIsInR5cGUiLCJ1cmwiLCJ3aW5kb3ciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJhIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZGlzcGxheSIsImhyZWYiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjbGljayIsInNldFRpbWVvdXQiLCJyZW1vdmVDaGlsZCIsInJldm9rZU9iamVjdFVSTCIsImRvd25maWxlIiwiYnVmZmVyIiwiRmlsZSIsImRvd25GTFYiLCJkb3duQXVkaW8iLCJtZXJnZWJveCIsImJveGVzIiwic2xpY2UiLCJib3hMZW5ndGgiLCJwcmUiLCJieXRlTGVuZ3RoIiwiVWludDhBcnJheSIsIm9mZnNldCIsImJveCIsImNvbmNhdEJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiX3RoaXMiLCJzZWdtZW50Iiwic3RvcCIsIm51bSIsImxpbWl0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9zcmMiLCJfc3JjMiIsIl9tdXgiLCJfbXV4MiIsImh0dHBDaHVua2VkIiwibXV4Q29udHJvbGxlciIsImJpbmQiLCJzdHJlYW0iLCJwYXJzZSIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfbWl0dCIsIl9taXR0MiIsIl9jb25zdGFudHMiLCJfdXRpbHMiLCJfaGVhZGVyIiwiX2hlYWRlcjIiLCJfaGVscGVyIiwiSFRUUENodW5rZWQiLCJfSGVhZGVyUmVhZCIsImdldFByb3RvdHlwZU9mIiwiZmV0Y2giLCJfZW1pdHRlciIsIl91cmwiLCJfQ0FMQ0VMIiwiX0VSUk9SIiwiX2NodW5rIiwiX2J1ZmZlckxlbiIsIl9yZWFkTGVuIiwiX3JldHVybkFyciIsIl9mZXRjaCIsIl90aGlzMiIsIl9zdGFydCIsInRoZW4iLCJyZXMiLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJyZWFkIiwiY2h1bmtlZFJlYWRlciIsIl9yZWYiLCJkb25lIiwicmVsZWFzZUxvY2siLCJjYW5jZWwiLCJfZW1pdCIsIkhUVFBDQU5DRUwiLCJDSFVOS0VERU5EIiwicmVhZENodW5rIiwiZHJvcCIsImNhdGNoIiwiZXJyIiwiQ0hVTktFREVSUiIsImNodW5rIiwibWVyZ2VCdWZmZXIiLCJ0bXBEYXRhIiwiYWIiLCJ2aWV3IiwiRGF0YVZpZXciLCJkYXRhU2l6ZSIsImdldFVpbnQzMiIsIl9mbHZUYWciLCJkYXRhT2Zmc2V0IiwidGltZVN0YW1wIiwidGFnTGVuIiwiX2ZsdkhlYWRlciIsInZlcnNpb24iLCJ0YWdPZmZzZXQiLCJoYXNBdWRpbyIsImhhc1ZpZGVvIiwiQ0hVTktFRFNUUkVBTSIsIl90aGlzMyIsIl90aGlzNCIsIl90aGlzNSIsIlByb21pc2UiLCJyZWoiLCJfb24iLCJhZGRFdmVudExpc3RlbmVyIiwib24iLCJfZW1pdHRlcjIiLCJlbWl0IiwiYnVmZmVycyIsIm1lcmdlVHlwZWRBcnJheSIsIl9sZW4yIiwiX2tleTIiLCJIZWFkZXJSZWFkIiwiX3R5cGUiLCI4IiwiOSIsIjE4IiwiZGF0YSIsImdldFVpbnQ4IiwiZmxhZ3MiLCJ1cHBlclRpbWUiLCJnIiwiRnVuY3Rpb24iLCJldmFsIiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY2FjaGVkU2V0VGltZW91dCIsInJ1bkNsZWFyVGltZW91dCIsIm1hcmtlciIsImNhY2hlZENsZWFyVGltZW91dCIsImNsZWFyVGltZW91dCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJxdWV1ZUluZGV4IiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJydW4iLCJJdGVtIiwibm9vcCIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiYXJndiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJjb3B5IiwiZmlsbCIsInJlYWRVSW50OCIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJUZW1wQ3RvciIsIl9sb2ciLCJfbG9nMiIsIl9iYXNlaW5mbyIsIl9iYXNlaW5mbzIiLCJfYW1mIiwiX2FtZjIiLCJfYXZjZGVtdXgiLCJfYXZjZGVtdXgyIiwiX2FhY2RlbXV4IiwiX2FhY2RlbXV4MiIsIkZMVkRlbXV4IiwiX0Jhc2VJbmZvIiwiaGVhZGVyIiwidmlkZW8iLCJhdWRpbyIsInNjcmlwdCIsIkFWQyIsInZpZGVvVHJhY2siLCJfdmlkZW9UcmFjayIsIm1lZGlhSW5mbyIsIl9tZWRpYUluZm8iLCJBQUMiLCJhdWRpb1RyYWNrIiwiX2F1ZGlvVHJhY2siLCJjaHVua0FycmF5IiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJfc3RlcCIsIl9pdGVyYXRvciIsIm5leHQiLCJ3IiwiX2hhc1ZpZGVvIiwiX3BhcnNlVmlkZW8iLCJfaGFzQXVkaW8iLCJfcGFyc2VBdWRpbyIsIl9wYXJzZVNjcmlwdCIsInJldHVybiIsImZyYW1lVHlwZSIsImNvZGVjSWQiLCJ2Iiwic291bmRTcGVjIiwic291bmRGb3JtYXQiLCJzb3VuZFJhdGUiLCJfZmx2U291bmRSYXRlVGFibGUiLCJzb3VuZFR5cGUiLCJtZXRhIiwiYXVkaW9TYW1wbGVSYXRlIiwiY2hhbm5lbENvdW50Iiwic2NyaXB0RGF0YSIsInBhcnNlU2NyaXB0RGF0YSIsImFzc2lnbiIsIm9uTWV0YURhdGEiLCJfZGVmaW5lUHJvcGVydHkiLCJUcmFja0luZm8iLCJpZCIsInNhbXBsZXMiLCJ0aW1lc2NhbGUiLCJkdXJhdGlvbiIsImNvZGVjIiwicmVmU2FtcGxlRHVyYXRpb24iLCJhdmNjIiwiY29kZWNXaWR0aCIsImNvZGVjSGVpZ2h0IiwicHJlc2VudFdpZHRoIiwicHJlc2VudEhlaWdodCIsInNlcXVlbmNlTnVtYmVyIiwiY29uZmlnIiwiYXVkaW9jb2RlY2lkIiwiYXVkaW9kYXRhcmF0ZSIsImF1ZGlvc2FtcGxlcmF0ZSIsImF1ZGlvc2FtcGxlc2l6ZSIsImVuY29kZXIiLCJmaWxlc2l6ZSIsImhlaWdodCIsInN0ZXJlbyIsInZpZGVvY29kZWNpZCIsInZpZGVvZGF0YXJhdGUiLCJ3aWR0aCIsIkFNRiIsImFycmF5QnVmZmVyIiwicGFyc2VWYWx1ZSIsInNpemUiLCJwYXJzZU9iamVjdCIsInBhcnNlU3RyaW5nIiwiaXNPYmplY3RFbmQiLCJvYmplY3RFbmQiLCJwYXJzZVZhcmlhYmxlIiwiZ2V0VWludDE2IiwiZGVjb2RlVVRGOCIsInBhcnNlTG9uZ1N0cmluZyIsInBhcnNlRGF0ZSIsImdldEZsb2F0NjQiLCJnZXRJbnQxNiIsImFtZnN0ciIsInRlcm1pbmFsIiwiYW1mb2JqIiwiYW1mdmFyIiwic3RyaWN0QXJyYXlMZW5ndGgiLCJhbWZMb25nU3RyIiwicmVzdWx0IiwiYzIiLCJmcm9tQ2hhckNvZGUiLCJjMyIsIl9zcHNfcGFyc2UiLCJfc3BzX3BhcnNlMiIsIkFWQ0RlbXV4IiwiX3JlZmVyZW5jZUZyYW1lUmF0ZSIsImZpeGVkIiwiZnBzIiwiZnBzX251bSIsImZwc19kZW4iLCJfbmFsdUxlbmd0aFNpemUiLCJfdGltZXN0YW1wQmFzZSIsIl9rZXlGcmFtZSIsIjEiLCIyIiwiY3RzIiwiX3BhcnNlQ29uZmlnIiwiX3BhcnNlQVZDIiwiX3JlZjIiLCJzbGljZXMiLCJrZXlGcmFtZSIsIm5hbHVMZW4iLCJkdHMiLCJuYWx1U2l6ZSIsInB0cyIsImF2Y1Byb2ZpbGUiLCJuYWx1X2xlbiIsInNwc0NvdW50Iiwic3BzTGVuIiwic3BzIiwibWV0YUluZm8iLCJwYXJzZVNQUyIsIl9leHRyYWNrSW5mbyIsInNwc0luZm8iLCJjb2RlY19zaXplIiwicHJlc2VudF9zaXplIiwiZnJhbWVfcmF0ZSIsImZyYW1lUmF0ZSIsIl9tZXRhJGZyYW1lUmF0ZSIsIk1hdGgiLCJmbG9vciIsImNvZGVjQXJyYXkiLCJzdWJhcnJheSIsImNvZGVjU3RyaW5nIiwiaiIsImgiLCJfZXhwX2dvbG9tYiIsIl9leHBfZ29sb21iMiIsIlNQU1BhcnNlciIsInVpbnQ4YXJyYXkiLCJzcmMiLCJzcmNfbGVuZ3RoIiwiZHN0IiwiZHN0X2lkeCIsInJic3AiLCJfZWJzcDJyYnNwIiwiZ2IiLCJyZWFkQnl0ZSIsInByb2ZpbGVfaWRjIiwibGV2ZWxfaWRjIiwicmVhZFVFRyIsInByb2ZpbGVfc3RyaW5nIiwiZ2V0UHJvZmlsZVN0cmluZyIsImxldmVsX3N0cmluZyIsImdldExldmVsU3RyaW5nIiwiY2hyb21hX2Zvcm1hdF9pZGMiLCJjaHJvbWFfZm9ybWF0IiwiY2hyb21hX2Zvcm1hdF90YWJsZSIsImJpdF9kZXB0aCIsInJlYWRCaXRzIiwicmVhZEJvb2wiLCJzY2FsaW5nX2xpc3RfY291bnQiLCJfc2tpcFNjYWxpbmdMaXN0IiwicGljX29yZGVyX2NudF90eXBlIiwicmVhZFNFRyIsIm51bV9yZWZfZnJhbWVzX2luX3BpY19vcmRlcl9jbnRfY3ljbGUiLCJwaWNfd2lkdGhfaW5fbWJzX21pbnVzMSIsInBpY19oZWlnaHRfaW5fbWFwX3VuaXRzX21pbnVzMSIsImZyYW1lX21ic19vbmx5X2ZsYWciLCJmcmFtZV9jcm9wX2xlZnRfb2Zmc2V0IiwiZnJhbWVfY3JvcF9yaWdodF9vZmZzZXQiLCJmcmFtZV9jcm9wX3RvcF9vZmZzZXQiLCJmcmFtZV9jcm9wX2JvdHRvbV9vZmZzZXQiLCJzYXJfd2lkdGgiLCJzYXJfaGVpZ2h0IiwiZnBzX2ZpeGVkIiwiYXNwZWN0X3JhdGlvX2lkYyIsInNhcl93X3RhYmxlIiwic2FyX2hfdGFibGUiLCJudW1fdW5pdHNfaW5fdGljayIsInRpbWVfc2NhbGUiLCJzYXJTY2FsZSIsImNyb3BfdW5pdF94IiwiY3JvcF91bml0X3kiLCJzdWJfd2MiLCJzdWJfaGMiLCJjb2RlY193aWR0aCIsImNvZGVjX2hlaWdodCIsInByZXNlbnRfd2lkdGgiLCJjZWlsIiwiZGVzdHJveSIsImNocm9tYV9mb3JtYXRfc3RyaW5nIiwiZ2V0Q2hyb21hRm9ybWF0U3RyaW5nIiwic2FyX3JhdGlvIiwiY291bnQiLCJsYXN0X3NjYWxlIiwibmV4dF9zY2FsZSIsImRlbHRhX3NjYWxlIiwidG9GaXhlZCIsImNocm9tYSIsIkV4cEdvbG9tYiIsIlRBRyIsIl9idWZmZXIiLCJfYnVmZmVyX2luZGV4IiwiX3RvdGFsX2J5dGVzIiwiX3RvdGFsX2JpdHMiLCJfY3VycmVudF93b3JkIiwiX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQiLCJidWZmZXJfYnl0ZXNfbGVmdCIsImJ5dGVzX3JlYWQiLCJtaW4iLCJ3b3JkIiwiYml0cyIsImJpdHNfbmVlZF9sZWZ0IiwiX2ZpbGxDdXJyZW50V29yZCIsImJpdHNfcmVhZF9uZXh0IiwicmVzdWx0MiIsInplcm9fY291bnQiLCJfc2tpcExlYWRpbmdaZXJvIiwibGVhZGluZ196ZXJvcyIsIkFBQ0RlbXV4IiwiX21wZWdTYW1wbGluZ1JhdGVzIiwiX3BhcnNlQUFDIiwidW5pdCIsInVzZXJBZ2VudCIsIm5hdmlnYXRvciIsInRvTG93ZXJDYXNlIiwiYXVkaW9PYmplY3RUeXBlIiwic2FtcGxpbmdGcmVJbmRleCIsImV4dGVuc2lvblNhbXBsaW5nSW5kZXgiLCJzYW1wbGluZ0ZyZSIsImNoYW5uZWxDb25maWciLCJhdWRpb0V4dGVuc2lvbk9iamVjdFR5cGUiLCJfZmx2ZGVtdXgiLCJfZmx2ZGVtdXgyIiwiX21wNHJlbXV4IiwiX21wNHJlbXV4MiIsIk11eENvbnRyb2xsZXIiLCJfZmx2RGVtdXgiLCJfbXA0UmVtdXgiLCJnZW5lcmF0ZUlTIiwiZ2VuZXJhdGVNUyIsIl9tcDRfZ2VuZXJhdG9yIiwiX21wNF9nZW5lcmF0b3IyIiwiTVA0UmVtdXgiLCJfc2VxIiwiaW5pdEJveCIsImF1ZGlvTVMiLCJfcmVtdXhWaWRlbyIsIl9yZW11eEF1ZGlvIiwiX3JlbXV4QXVkaW9NZGF0MiIsIl9yZW11eEF1ZGlvTWRhdCIsImF1ZGlvTWRhdCIsImJhc2VEdHMiLCJtb29mIiwiX3JlbXV4VmlkZW9NZGF0MiIsIl9yZW11eFZpZGVvTWRhdCIsInZpZGVvTWRhdCIsIm1kYXQiLCJ0cmFjayIsInJlZkR1cmF0aW9uIiwibXA0U2FtcGxlcyIsImFjY1NhbXBsZSIsImluZGV4Iiwic2FtcGxlU2l6ZSIsImNodW5rT2Zmc2V0IiwiaXNMZWFkaW5nIiwiZGVwZW5kc09uIiwiaXNEZXBlbmRlZCIsImhhc1JlZHVuZGFuY3kiLCJ2aVNhbXBsZSIsImlzTm9uU3luYyIsIk1QNCIsInR5cGVzIiwiYXZjMSIsImF2Y0MiLCJidHJ0IiwiZGluZiIsImRyZWYiLCJlc2RzIiwiZnR5cCIsImhkbHIiLCJtZGhkIiwibWRpYSIsIm1maGQiLCJtaW5mIiwibW9vdiIsIm1wNGEiLCIubXAzIiwibXZleCIsIm12aGQiLCJwYXNwIiwic2R0cCIsInN0YmwiLCJzdGNvIiwic3RzYyIsInN0c2QiLCJzdHN6Iiwic3R0cyIsInRmZHQiLCJ0ZmhkIiwidHJhZiIsInRyYWsiLCJ0cnVuIiwidHJleCIsInRraGQiLCJ2bWhkIiwic21oZCIsImZyZWUiLCJzdHNzIiwiY3R0cyIsInN5bWJvbFZhbHVlIiwiRlRZUCIsIkhETFJfVklERU8iLCJIRExSX0FVRElPIiwiU1RTQyIsIkZTVFRTIiwiRlNUU0MiLCJGU1RTWiIsIkZTVENPIiwiU1RUUyIsIkNUVFMiLCJTVENPIiwiU1RTWiIsIlNUU0QiLCJEUkVGIiwiVk1IRCIsIlNNSEQiLCJTVFNTIiwiYm94QnVmZmVyIiwiYmFzZURUUyIsInNlcSIsImZyYWdtZW50Qm94Iiwic2V0VWludDMyIiwic2FtcGxlQ291bnQiLCJidWZmZXJMZW5ndGgiLCJzYW1wbGUiLCJ0cmFja0lkIiwicGFyYW0iLCJtZXRhMSIsIm1ldGEyIiwiZm1vb3YiLCJpZDEiLCJpZDIiLCJ0eXBlX21kaCIsImZzdGJsIiwia2V5ZnJhbWVzIiwia2V5ZnJhbWUiLCJzdHNzQnVmZmVyIiwiY29udGVudERhdGEiLCJkZWx0YSIsInNhbXBsZXNMZW5ndGgiLCJzYW1wbGVCdWZmZXIiLCJfcmVmMyIsInN0Y29CdWZmZXIiLCJzdHN6QnVmZmVyIiwiX3JlZjQiLCJtcDMiLCJzYW1wbGVSYXRlIiwiY29uZmlnTGVuIiwiYnVmIiwic2V0VWludDE2IiwiaW5pdCIsImNoYXJDb2RlQXQiLCJtaXR0IiwiYWxsIiwiaGFuZGxlciIsInNwbGljZSIsImV2dCJdLCJtYXBwaW5ncyI6IkNBQVMsU0FBVUEsR0NJbkIsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFFLE9BR0EsSUFBQUMsR0FBQUYsRUFBQUQsSUFDQUksRUFBQUosRUFDQUssR0FBQSxFQUNBSCxXQVVBLE9BTkFKLEdBQUFFLEdBQUFNLEtBQUFILEVBQUFELFFBQUFDLElBQUFELFFBQUFILEdBR0FJLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUF2QkEsR0FBQUQsS0E0QkFGLEdBQUFRLEVBQUFULEVBR0FDLEVBQUFTLEVBQUFQLEVBR0FGLEVBQUFVLEVBQUEsU0FB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LEVBQUkwRixLQUFPLFdBRVZwdkIsT0FDRWlGLEtBQUt5a0IsRUFBSUMsT0FDVHBsQixRQUFRLFNBQUFDLEdBRVJrbEIsRUFBSUMsTUFBTW5sQixJQUNUQSxFQUFJNnFCLFdBQVcsR0FDZjdxQixFQUFJNnFCLFdBQVcsR0FDZjdxQixFQUFJNnFCLFdBQVcsR0FDZjdxQixFQUFJNnFCLFdBQVcsT0FLbkIzRixFQUFJMEYsT3ZCbktxRy92QixFQUFRd0QsUXVCdUtsRzZtQixHdkJuS1QsU0FBVXBxQixFQUFRRCxFQUFTSCxHQUVqQyxZd0JsdEJlLFNBQVNvd0IsS0FDdkIsR0FBSUMsR0FBTXZ2QixPQUFPMlAsT0FBTyxLQUV4QixRQUVDb0UsR0FGTSxTQUVIekgsRUFBTWtqQixJQUNQRCxFQUFJampCLEtBQVVpakIsRUFBSWpqQixRQUFhdkcsS0FBS3lwQixJQVV0QzVZLElBYk0sU0FhRnRLLEVBQU1rakIsR0FDTEQsRUFBSWpqQixJQUNQaWpCLEVBQUlqakIsR0FBTW1qQixPQUFPRixFQUFJampCLEdBQU1qSCxRQUFRbXFCLEtBQWEsRUFBRyxJQUlyRHZiLEtBbkJNLFNBbUJEM0gsR0FBYyxPQUFBdkssR0FBQUMsVUFBQVYsT0FBTG91QixFQUFLeHRCLE1BQUFILEVBQUEsRUFBQUEsRUFBQSxLQUFBSSxFQUFBLEVBQUFBLEVBQUFKLEVBQUFJLElBQUx1dEIsRUFBS3Z0QixFQUFBLEdBQUFILFVBQUFHLElBQ2pCb3RCLEVBQUlqakIsUUFBYXVCLFFBQVEzSCxJQUFJLFNBQUNzcEIsR0FBY0EsZUFBV0UsTUFDdkRILEVBQUksVUFBWTFoQixRQUFRM0gsSUFBSSxTQUFDc3BCLEdBQWNBLGdCQUFRbGpCLEdBQVI3SixPQUFpQml0QixReEIyckJoRTF2QixPQUFPQyxlQUFlWixFQUFRLGNBQWM0QixPQUFNLElBQU81QixFQUFRd0QsUXdCbnRCekN5c0IiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMyk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQscHJvcHMpe2Zvcih2YXIgaT0wO2k8cHJvcHMubGVuZ3RoO2krKyl7dmFyIGRlc2NyaXB0b3I9cHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlPWRlc2NyaXB0b3IuZW51bWVyYWJsZXx8ZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGU9dHJ1ZTtpZihcInZhbHVlXCJpbiBkZXNjcmlwdG9yKWRlc2NyaXB0b3Iud3JpdGFibGU9dHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpO319cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe2lmKHByb3RvUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUscHJvdG9Qcm9wcyk7aWYoc3RhdGljUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO307fSgpO2Z1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fXZhciBMb2c9ZnVuY3Rpb24oKXtmdW5jdGlvbiBMb2cobmFtZSl7X2NsYXNzQ2FsbENoZWNrKHRoaXMsTG9nKTt0aGlzLm5hbWU9bmFtZTt9X2NyZWF0ZUNsYXNzKExvZyxbe2tleTpcIndcIix2YWx1ZTpmdW5jdGlvbiB3KCl7dmFyIF9jb25zb2xlO2Zvcih2YXIgX2xlbj1hcmd1bWVudHMubGVuZ3RoLG1zZz1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7bXNnW19rZXldPWFyZ3VtZW50c1tfa2V5XTt9KF9jb25zb2xlPWNvbnNvbGUpLndhcm4uYXBwbHkoX2NvbnNvbGUsW1wiW1wiK3RoaXMubmFtZStcIl09PT09PiBcIituZXcgRGF0ZSgpLnRvVGltZVN0cmluZygpK1wiXFxuICAgICAgICAgICAgICA6IFwiXS5jb25jYXQobXNnKSk7fX0se2tleTpcImxcIix2YWx1ZTpmdW5jdGlvbiBsKG1zZyl7Y29uc29sZS5sb2coXCJbXCIrdGhpcy5uYW1lK1wiXT09PT0+IFwiK25ldyBEYXRlKCkudG9UaW1lU3RyaW5nKCkrXCJcXG4gICAgICAgICAgICAgIDogXCIrbXNnKTt9fSx7a2V5OlwiZVwiLHZhbHVlOmZ1bmN0aW9uIGUobXNnKXtjb25zb2xlLmVycm9yKFwiW1wiK3RoaXMubmFtZStcIl09PT09PiBcIituZXcgRGF0ZSgpLnRvVGltZVN0cmluZygpK1wiXFxuICAgICAgICAgICAgICA6IFwiK21zZyk7fX0se2tleTpcImlcIix2YWx1ZTpmdW5jdGlvbiBpKG1zZyl7Y29uc29sZS5pbmZvKFwiW1wiK3RoaXMubmFtZStcIl09PT09PiBcIituZXcgRGF0ZSgpLnRvVGltZVN0cmluZygpK1wiXFxuICAgICAgICAgICAgICA6IFwiK21zZyk7fX1dKTtyZXR1cm4gTG9nO30oKTtleHBvcnRzLmRlZmF1bHQ9TG9nO1xuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsLCBwcm9jZXNzKSB7dmFyIF90eXBlb2Y9dHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmdHlwZW9mIFN5bWJvbC5pdGVyYXRvcj09PVwic3ltYm9sXCI/ZnVuY3Rpb24ob2JqKXtyZXR1cm4gdHlwZW9mIG9iajt9OmZ1bmN0aW9uKG9iail7cmV0dXJuIG9iaiYmdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIG9iajt9Oy8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxudmFyIGZvcm1hdFJlZ0V4cD0vJVtzZGolXS9nO2V4cG9ydHMuZm9ybWF0PWZ1bmN0aW9uKGYpe2lmKCFpc1N0cmluZyhmKSl7dmFyIG9iamVjdHM9W107Zm9yKHZhciBpPTA7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7b2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7fXJldHVybiBvYmplY3RzLmpvaW4oJyAnKTt9dmFyIGk9MTt2YXIgYXJncz1hcmd1bWVudHM7dmFyIGxlbj1hcmdzLmxlbmd0aDt2YXIgc3RyPVN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCxmdW5jdGlvbih4KXtpZih4PT09JyUlJylyZXR1cm4nJSc7aWYoaT49bGVuKXJldHVybiB4O3N3aXRjaCh4KXtjYXNlJyVzJzpyZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7Y2FzZSclZCc6cmV0dXJuIE51bWJlcihhcmdzW2krK10pO2Nhc2UnJWonOnRyeXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTt9Y2F0Y2goXyl7cmV0dXJuJ1tDaXJjdWxhcl0nO31kZWZhdWx0OnJldHVybiB4O319KTtmb3IodmFyIHg9YXJnc1tpXTtpPGxlbjt4PWFyZ3NbKytpXSl7aWYoaXNOdWxsKHgpfHwhaXNPYmplY3QoeCkpe3N0cis9JyAnK3g7fWVsc2V7c3RyKz0nICcraW5zcGVjdCh4KTt9fXJldHVybiBzdHI7fTsvLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuLy8gUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbi8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG5leHBvcnRzLmRlcHJlY2F0ZT1mdW5jdGlvbihmbixtc2cpey8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuXG5pZihpc1VuZGVmaW5lZChnbG9iYWwucHJvY2Vzcykpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbixtc2cpLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9O31pZihwcm9jZXNzLm5vRGVwcmVjYXRpb249PT10cnVlKXtyZXR1cm4gZm47fXZhciB3YXJuZWQ9ZmFsc2U7ZnVuY3Rpb24gZGVwcmVjYXRlZCgpe2lmKCF3YXJuZWQpe2lmKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbil7dGhyb3cgbmV3IEVycm9yKG1zZyk7fWVsc2UgaWYocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKXtjb25zb2xlLnRyYWNlKG1zZyk7fWVsc2V7Y29uc29sZS5lcnJvcihtc2cpO313YXJuZWQ9dHJ1ZTt9cmV0dXJuIGZuLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9cmV0dXJuIGRlcHJlY2F0ZWQ7fTt2YXIgZGVidWdzPXt9O3ZhciBkZWJ1Z0Vudmlyb247ZXhwb3J0cy5kZWJ1Z2xvZz1mdW5jdGlvbihzZXQpe2lmKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpZGVidWdFbnZpcm9uPXByb2Nlc3MuZW52Lk5PREVfREVCVUd8fCcnO3NldD1zZXQudG9VcHBlckNhc2UoKTtpZighZGVidWdzW3NldF0pe2lmKG5ldyBSZWdFeHAoJ1xcXFxiJytzZXQrJ1xcXFxiJywnaScpLnRlc3QoZGVidWdFbnZpcm9uKSl7dmFyIHBpZD1wcm9jZXNzLnBpZDtkZWJ1Z3Nbc2V0XT1mdW5jdGlvbigpe3ZhciBtc2c9ZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpO2NvbnNvbGUuZXJyb3IoJyVzICVkOiAlcycsc2V0LHBpZCxtc2cpO307fWVsc2V7ZGVidWdzW3NldF09ZnVuY3Rpb24oKXt9O319cmV0dXJuIGRlYnVnc1tzZXRdO307LyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqLy8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9mdW5jdGlvbiBpbnNwZWN0KG9iaixvcHRzKXsvLyBkZWZhdWx0IG9wdGlvbnNcbnZhciBjdHg9e3NlZW46W10sc3R5bGl6ZTpzdHlsaXplTm9Db2xvcn07Ly8gbGVnYWN5Li4uXG5pZihhcmd1bWVudHMubGVuZ3RoPj0zKWN0eC5kZXB0aD1hcmd1bWVudHNbMl07aWYoYXJndW1lbnRzLmxlbmd0aD49NCljdHguY29sb3JzPWFyZ3VtZW50c1szXTtpZihpc0Jvb2xlYW4ob3B0cykpey8vIGxlZ2FjeS4uLlxuY3R4LnNob3dIaWRkZW49b3B0czt9ZWxzZSBpZihvcHRzKXsvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG5leHBvcnRzLl9leHRlbmQoY3R4LG9wdHMpO30vLyBzZXQgZGVmYXVsdCBvcHRpb25zXG5pZihpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpY3R4LnNob3dIaWRkZW49ZmFsc2U7aWYoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSljdHguZGVwdGg9MjtpZihpc1VuZGVmaW5lZChjdHguY29sb3JzKSljdHguY29sb3JzPWZhbHNlO2lmKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSljdHguY3VzdG9tSW5zcGVjdD10cnVlO2lmKGN0eC5jb2xvcnMpY3R4LnN0eWxpemU9c3R5bGl6ZVdpdGhDb2xvcjtyZXR1cm4gZm9ybWF0VmFsdWUoY3R4LG9iaixjdHguZGVwdGgpO31leHBvcnRzLmluc3BlY3Q9aW5zcGVjdDsvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzPXsnYm9sZCc6WzEsMjJdLCdpdGFsaWMnOlszLDIzXSwndW5kZXJsaW5lJzpbNCwyNF0sJ2ludmVyc2UnOls3LDI3XSwnd2hpdGUnOlszNywzOV0sJ2dyZXknOls5MCwzOV0sJ2JsYWNrJzpbMzAsMzldLCdibHVlJzpbMzQsMzldLCdjeWFuJzpbMzYsMzldLCdncmVlbic6WzMyLDM5XSwnbWFnZW50YSc6WzM1LDM5XSwncmVkJzpbMzEsMzldLCd5ZWxsb3cnOlszMywzOV19Oy8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXM9eydzcGVjaWFsJzonY3lhbicsJ251bWJlcic6J3llbGxvdycsJ2Jvb2xlYW4nOid5ZWxsb3cnLCd1bmRlZmluZWQnOidncmV5JywnbnVsbCc6J2JvbGQnLCdzdHJpbmcnOidncmVlbicsJ2RhdGUnOidtYWdlbnRhJywvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuJ3JlZ2V4cCc6J3JlZCd9O2Z1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLHN0eWxlVHlwZSl7dmFyIHN0eWxlPWluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07aWYoc3R5bGUpe3JldHVybidcXHgxQlsnK2luc3BlY3QuY29sb3JzW3N0eWxlXVswXSsnbScrc3RyKydcXHgxQlsnK2luc3BlY3QuY29sb3JzW3N0eWxlXVsxXSsnbSc7fWVsc2V7cmV0dXJuIHN0cjt9fWZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0cixzdHlsZVR5cGUpe3JldHVybiBzdHI7fWZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KXt2YXIgaGFzaD17fTthcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCxpZHgpe2hhc2hbdmFsXT10cnVlO30pO3JldHVybiBoYXNoO31mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsdmFsdWUscmVjdXJzZVRpbWVzKXsvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4vLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbmlmKGN0eC5jdXN0b21JbnNwZWN0JiZ2YWx1ZSYmaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSYmLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG52YWx1ZS5pbnNwZWN0IT09ZXhwb3J0cy5pbnNwZWN0JiYvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiEodmFsdWUuY29uc3RydWN0b3ImJnZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZT09PXZhbHVlKSl7dmFyIHJldD12YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcyxjdHgpO2lmKCFpc1N0cmluZyhyZXQpKXtyZXQ9Zm9ybWF0VmFsdWUoY3R4LHJldCxyZWN1cnNlVGltZXMpO31yZXR1cm4gcmV0O30vLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xudmFyIHByaW1pdGl2ZT1mb3JtYXRQcmltaXRpdmUoY3R4LHZhbHVlKTtpZihwcmltaXRpdmUpe3JldHVybiBwcmltaXRpdmU7fS8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbnZhciBrZXlzPU9iamVjdC5rZXlzKHZhbHVlKTt2YXIgdmlzaWJsZUtleXM9YXJyYXlUb0hhc2goa2V5cyk7aWYoY3R4LnNob3dIaWRkZW4pe2tleXM9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO30vLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4vLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxuaWYoaXNFcnJvcih2YWx1ZSkmJihrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKT49MHx8a2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpPj0wKSl7cmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTt9Ly8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuaWYoa2V5cy5sZW5ndGg9PT0wKXtpZihpc0Z1bmN0aW9uKHZhbHVlKSl7dmFyIG5hbWU9dmFsdWUubmFtZT8nOiAnK3ZhbHVlLm5hbWU6Jyc7cmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nK25hbWUrJ10nLCdzcGVjaWFsJyk7fWlmKGlzUmVnRXhwKHZhbHVlKSl7cmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksJ3JlZ2V4cCcpO31pZihpc0RhdGUodmFsdWUpKXtyZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksJ2RhdGUnKTt9aWYoaXNFcnJvcih2YWx1ZSkpe3JldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7fX12YXIgYmFzZT0nJyxhcnJheT1mYWxzZSxicmFjZXM9Wyd7JywnfSddOy8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbmlmKGlzQXJyYXkodmFsdWUpKXthcnJheT10cnVlO2JyYWNlcz1bJ1snLCddJ107fS8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuaWYoaXNGdW5jdGlvbih2YWx1ZSkpe3ZhciBuPXZhbHVlLm5hbWU/JzogJyt2YWx1ZS5uYW1lOicnO2Jhc2U9JyBbRnVuY3Rpb24nK24rJ10nO30vLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuaWYoaXNSZWdFeHAodmFsdWUpKXtiYXNlPScgJytSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO30vLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbmlmKGlzRGF0ZSh2YWx1ZSkpe2Jhc2U9JyAnK0RhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO30vLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG5pZihpc0Vycm9yKHZhbHVlKSl7YmFzZT0nICcrZm9ybWF0RXJyb3IodmFsdWUpO31pZihrZXlzLmxlbmd0aD09PTAmJighYXJyYXl8fHZhbHVlLmxlbmd0aD09MCkpe3JldHVybiBicmFjZXNbMF0rYmFzZSticmFjZXNbMV07fWlmKHJlY3Vyc2VUaW1lczwwKXtpZihpc1JlZ0V4cCh2YWx1ZSkpe3JldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCdyZWdleHAnKTt9ZWxzZXtyZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywnc3BlY2lhbCcpO319Y3R4LnNlZW4ucHVzaCh2YWx1ZSk7dmFyIG91dHB1dDtpZihhcnJheSl7b3V0cHV0PWZvcm1hdEFycmF5KGN0eCx2YWx1ZSxyZWN1cnNlVGltZXMsdmlzaWJsZUtleXMsa2V5cyk7fWVsc2V7b3V0cHV0PWtleXMubWFwKGZ1bmN0aW9uKGtleSl7cmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCx2YWx1ZSxyZWN1cnNlVGltZXMsdmlzaWJsZUtleXMsa2V5LGFycmF5KTt9KTt9Y3R4LnNlZW4ucG9wKCk7cmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCxiYXNlLGJyYWNlcyk7fWZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsdmFsdWUpe2lmKGlzVW5kZWZpbmVkKHZhbHVlKSlyZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsJ3VuZGVmaW5lZCcpO2lmKGlzU3RyaW5nKHZhbHVlKSl7dmFyIHNpbXBsZT0nXFwnJytKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCcnKS5yZXBsYWNlKC8nL2csXCJcXFxcJ1wiKS5yZXBsYWNlKC9cXFxcXCIvZywnXCInKSsnXFwnJztyZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCdzdHJpbmcnKTt9aWYoaXNOdW1iZXIodmFsdWUpKXJldHVybiBjdHguc3R5bGl6ZSgnJyt2YWx1ZSwnbnVtYmVyJyk7aWYoaXNCb29sZWFuKHZhbHVlKSlyZXR1cm4gY3R4LnN0eWxpemUoJycrdmFsdWUsJ2Jvb2xlYW4nKTsvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG5pZihpc051bGwodmFsdWUpKXJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsJ251bGwnKTt9ZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpe3JldHVybidbJytFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkrJ10nO31mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsdmFsdWUscmVjdXJzZVRpbWVzLHZpc2libGVLZXlzLGtleXMpe3ZhciBvdXRwdXQ9W107Zm9yKHZhciBpPTAsbD12YWx1ZS5sZW5ndGg7aTxsOysraSl7aWYoaGFzT3duUHJvcGVydHkodmFsdWUsU3RyaW5nKGkpKSl7b3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LHZhbHVlLHJlY3Vyc2VUaW1lcyx2aXNpYmxlS2V5cyxTdHJpbmcoaSksdHJ1ZSkpO31lbHNle291dHB1dC5wdXNoKCcnKTt9fWtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpe2lmKCFrZXkubWF0Y2goL15cXGQrJC8pKXtvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsdmFsdWUscmVjdXJzZVRpbWVzLHZpc2libGVLZXlzLGtleSx0cnVlKSk7fX0pO3JldHVybiBvdXRwdXQ7fWZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCx2YWx1ZSxyZWN1cnNlVGltZXMsdmlzaWJsZUtleXMsa2V5LGFycmF5KXt2YXIgbmFtZSxzdHIsZGVzYztkZXNjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsa2V5KXx8e3ZhbHVlOnZhbHVlW2tleV19O2lmKGRlc2MuZ2V0KXtpZihkZXNjLnNldCl7c3RyPWN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCdzcGVjaWFsJyk7fWVsc2V7c3RyPWN0eC5zdHlsaXplKCdbR2V0dGVyXScsJ3NwZWNpYWwnKTt9fWVsc2V7aWYoZGVzYy5zZXQpe3N0cj1jdHguc3R5bGl6ZSgnW1NldHRlcl0nLCdzcGVjaWFsJyk7fX1pZighaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsa2V5KSl7bmFtZT0nWycra2V5KyddJzt9aWYoIXN0cil7aWYoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKTwwKXtpZihpc051bGwocmVjdXJzZVRpbWVzKSl7c3RyPWZvcm1hdFZhbHVlKGN0eCxkZXNjLnZhbHVlLG51bGwpO31lbHNle3N0cj1mb3JtYXRWYWx1ZShjdHgsZGVzYy52YWx1ZSxyZWN1cnNlVGltZXMtMSk7fWlmKHN0ci5pbmRleE9mKCdcXG4nKT4tMSl7aWYoYXJyYXkpe3N0cj1zdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKXtyZXR1cm4nICAnK2xpbmU7fSkuam9pbignXFxuJykuc3Vic3RyKDIpO31lbHNle3N0cj0nXFxuJytzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKXtyZXR1cm4nICAgJytsaW5lO30pLmpvaW4oJ1xcbicpO319fWVsc2V7c3RyPWN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywnc3BlY2lhbCcpO319aWYoaXNVbmRlZmluZWQobmFtZSkpe2lmKGFycmF5JiZrZXkubWF0Y2goL15cXGQrJC8pKXtyZXR1cm4gc3RyO31uYW1lPUpTT04uc3RyaW5naWZ5KCcnK2tleSk7aWYobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpe25hbWU9bmFtZS5zdWJzdHIoMSxuYW1lLmxlbmd0aC0yKTtuYW1lPWN0eC5zdHlsaXplKG5hbWUsJ25hbWUnKTt9ZWxzZXtuYW1lPW5hbWUucmVwbGFjZSgvJy9nLFwiXFxcXCdcIikucmVwbGFjZSgvXFxcXFwiL2csJ1wiJykucmVwbGFjZSgvKF5cInxcIiQpL2csXCInXCIpO25hbWU9Y3R4LnN0eWxpemUobmFtZSwnc3RyaW5nJyk7fX1yZXR1cm4gbmFtZSsnOiAnK3N0cjt9ZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LGJhc2UsYnJhY2VzKXt2YXIgbnVtTGluZXNFc3Q9MDt2YXIgbGVuZ3RoPW91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldixjdXIpe251bUxpbmVzRXN0Kys7aWYoY3VyLmluZGV4T2YoJ1xcbicpPj0wKW51bUxpbmVzRXN0Kys7cmV0dXJuIHByZXYrY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCcnKS5sZW5ndGgrMTt9LDApO2lmKGxlbmd0aD42MCl7cmV0dXJuIGJyYWNlc1swXSsoYmFzZT09PScnPycnOmJhc2UrJ1xcbiAnKSsnICcrb3V0cHV0LmpvaW4oJyxcXG4gICcpKycgJyticmFjZXNbMV07fXJldHVybiBicmFjZXNbMF0rYmFzZSsnICcrb3V0cHV0LmpvaW4oJywgJykrJyAnK2JyYWNlc1sxXTt9Ly8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpe3JldHVybiBBcnJheS5pc0FycmF5KGFyKTt9ZXhwb3J0cy5pc0FycmF5PWlzQXJyYXk7ZnVuY3Rpb24gaXNCb29sZWFuKGFyZyl7cmV0dXJuIHR5cGVvZiBhcmc9PT0nYm9vbGVhbic7fWV4cG9ydHMuaXNCb29sZWFuPWlzQm9vbGVhbjtmdW5jdGlvbiBpc051bGwoYXJnKXtyZXR1cm4gYXJnPT09bnVsbDt9ZXhwb3J0cy5pc051bGw9aXNOdWxsO2Z1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZyl7cmV0dXJuIGFyZz09bnVsbDt9ZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZD1pc051bGxPclVuZGVmaW5lZDtmdW5jdGlvbiBpc051bWJlcihhcmcpe3JldHVybiB0eXBlb2YgYXJnPT09J251bWJlcic7fWV4cG9ydHMuaXNOdW1iZXI9aXNOdW1iZXI7ZnVuY3Rpb24gaXNTdHJpbmcoYXJnKXtyZXR1cm4gdHlwZW9mIGFyZz09PSdzdHJpbmcnO31leHBvcnRzLmlzU3RyaW5nPWlzU3RyaW5nO2Z1bmN0aW9uIGlzU3ltYm9sKGFyZyl7cmV0dXJuKHR5cGVvZiBhcmc9PT0ndW5kZWZpbmVkJz8ndW5kZWZpbmVkJzpfdHlwZW9mKGFyZykpPT09J3N5bWJvbCc7fWV4cG9ydHMuaXNTeW1ib2w9aXNTeW1ib2w7ZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKXtyZXR1cm4gYXJnPT09dm9pZCAwO31leHBvcnRzLmlzVW5kZWZpbmVkPWlzVW5kZWZpbmVkO2Z1bmN0aW9uIGlzUmVnRXhwKHJlKXtyZXR1cm4gaXNPYmplY3QocmUpJiZvYmplY3RUb1N0cmluZyhyZSk9PT0nW29iamVjdCBSZWdFeHBdJzt9ZXhwb3J0cy5pc1JlZ0V4cD1pc1JlZ0V4cDtmdW5jdGlvbiBpc09iamVjdChhcmcpe3JldHVybih0eXBlb2YgYXJnPT09J3VuZGVmaW5lZCc/J3VuZGVmaW5lZCc6X3R5cGVvZihhcmcpKT09PSdvYmplY3QnJiZhcmchPT1udWxsO31leHBvcnRzLmlzT2JqZWN0PWlzT2JqZWN0O2Z1bmN0aW9uIGlzRGF0ZShkKXtyZXR1cm4gaXNPYmplY3QoZCkmJm9iamVjdFRvU3RyaW5nKGQpPT09J1tvYmplY3QgRGF0ZV0nO31leHBvcnRzLmlzRGF0ZT1pc0RhdGU7ZnVuY3Rpb24gaXNFcnJvcihlKXtyZXR1cm4gaXNPYmplY3QoZSkmJihvYmplY3RUb1N0cmluZyhlKT09PSdbb2JqZWN0IEVycm9yXSd8fGUgaW5zdGFuY2VvZiBFcnJvcik7fWV4cG9ydHMuaXNFcnJvcj1pc0Vycm9yO2Z1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKXtyZXR1cm4gdHlwZW9mIGFyZz09PSdmdW5jdGlvbic7fWV4cG9ydHMuaXNGdW5jdGlvbj1pc0Z1bmN0aW9uO2Z1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZyl7cmV0dXJuIGFyZz09PW51bGx8fHR5cGVvZiBhcmc9PT0nYm9vbGVhbid8fHR5cGVvZiBhcmc9PT0nbnVtYmVyJ3x8dHlwZW9mIGFyZz09PSdzdHJpbmcnfHwodHlwZW9mIGFyZz09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2YoYXJnKSk9PT0nc3ltYm9sJ3x8Ly8gRVM2IHN5bWJvbFxudHlwZW9mIGFyZz09PSd1bmRlZmluZWQnO31leHBvcnRzLmlzUHJpbWl0aXZlPWlzUHJpbWl0aXZlO2V4cG9ydHMuaXNCdWZmZXI9X193ZWJwYWNrX3JlcXVpcmVfXygxMSk7ZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobyl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTt9ZnVuY3Rpb24gcGFkKG4pe3JldHVybiBuPDEwPycwJytuLnRvU3RyaW5nKDEwKTpuLnRvU3RyaW5nKDEwKTt9dmFyIG1vbnRocz1bJ0phbicsJ0ZlYicsJ01hcicsJ0FwcicsJ01heScsJ0p1bicsJ0p1bCcsJ0F1ZycsJ1NlcCcsJ09jdCcsJ05vdicsJ0RlYyddOy8vIDI2IEZlYiAxNjoxOTozNFxuZnVuY3Rpb24gdGltZXN0YW1wKCl7dmFyIGQ9bmV3IERhdGUoKTt2YXIgdGltZT1bcGFkKGQuZ2V0SG91cnMoKSkscGFkKGQuZ2V0TWludXRlcygpKSxwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7cmV0dXJuW2QuZ2V0RGF0ZSgpLG1vbnRoc1tkLmdldE1vbnRoKCldLHRpbWVdLmpvaW4oJyAnKTt9Ly8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcFxuZXhwb3J0cy5sb2c9ZnVuY3Rpb24oKXtjb25zb2xlLmxvZygnJXMgLSAlcycsdGltZXN0YW1wKCksZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpKTt9Oy8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLlxuICpcbiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmVcbiAqIGZ1bmN0aW9uIChub3Qgb24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZFxuICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcbiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhc1xuICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZVxuICogICAgIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuICovZXhwb3J0cy5pbmhlcml0cz1fX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtleHBvcnRzLl9leHRlbmQ9ZnVuY3Rpb24ob3JpZ2luLGFkZCl7Ly8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuaWYoIWFkZHx8IWlzT2JqZWN0KGFkZCkpcmV0dXJuIG9yaWdpbjt2YXIga2V5cz1PYmplY3Qua2V5cyhhZGQpO3ZhciBpPWtleXMubGVuZ3RoO3doaWxlKGktLSl7b3JpZ2luW2tleXNbaV1dPWFkZFtrZXlzW2ldXTt9cmV0dXJuIG9yaWdpbjt9O2Z1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaixwcm9wKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaixwcm9wKTt9XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyg5KSwgX193ZWJwYWNrX3JlcXVpcmVfXygxMCkpKVxuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLmRvd25sb2FkPWZ1bmN0aW9uKG1wNCl7dmFyIGJsb2I9bmV3IEJsb2IobXA0LHsvLyB0eXBlOiAndmlkZW8vbXA0J1xudHlwZTonYXBwbGljYXRpb24vb2N0ZXQtYmluYXJ5J30pO3ZhciB1cmw9d2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO2Euc3R5bGUuZGlzcGxheT0nbm9uZSc7YS5ocmVmPXVybDthLmRvd25sb2FkPSd0ZXN0Lm1wNCc7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTthLmNsaWNrKCk7c2V0VGltZW91dChmdW5jdGlvbigpe2RvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYSk7d2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwodXJsKTt9LDEwMCk7fTtleHBvcnRzLmRvd25maWxlPWZ1bmN0aW9uKGJ1ZmZlcix0eXBlKXt2YXIgbXA0PW5ldyBGaWxlKFtidWZmZXJdLCdjZS5tcDQnLHt0eXBlOid2aWRlby9tcDQnfSk7dmFyIHVybD13aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChtcDQpO3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTthLnN0eWxlLmRpc3BsYXk9J25vbmUnO2EuaHJlZj11cmw7YS5kb3dubG9hZD10eXBlKycubXA0Jztkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpO2EuY2xpY2soKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhKTt3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO30sMTAwKTt9O2V4cG9ydHMuZG93bkZMVj1mdW5jdGlvbihidWZmZXIsdHlwZSl7dmFyIG1wND1uZXcgRmlsZShbYnVmZmVyXSwnY2UuZmx2Jyx7dHlwZTondmlkZW8veC1mbHYnfSk7dmFyIHVybD13aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChtcDQpO3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTthLnN0eWxlLmRpc3BsYXk9J25vbmUnO2EuaHJlZj11cmw7YS5kb3dubG9hZD10eXBlKycuZmx2Jztkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpO2EuY2xpY2soKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhKTt3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO30sMTAwKTt9O2V4cG9ydHMuZG93bkF1ZGlvPWZ1bmN0aW9uKGJ1ZmZlcil7dmFyIG1wND1uZXcgRmlsZShbYnVmZmVyXSwnY2UubXBlZycse3R5cGU6J2F1ZGlvL21wZWcnfSk7dmFyIHVybD13aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChtcDQpO3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTthLnN0eWxlLmRpc3BsYXk9J25vbmUnO2EuaHJlZj11cmw7YS5kb3dubG9hZD0ndGVzdC5tcDMnO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7YS5jbGljaygpO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGEpO3dpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7fSwxMDApO307LyoqXG4gKiBAcGFyYW0ge0J1ZmZlcn0gcGFyYW06IG1vcmUgdGhhbiBvbmUgcGFyYW1zIHRvIGNyZWF0ZSBhIGNvbWJpbmVkIGJ1ZmZlclxuICovZXhwb3J0cy5tZXJnZWJveD1mdW5jdGlvbigpe3ZhciBib3hlcz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO3ZhciBib3hMZW5ndGg9Ym94ZXMucmVkdWNlKGZ1bmN0aW9uKHByZSx2YWwpe3JldHVybiBwcmUrdmFsLmJ5dGVMZW5ndGg7fSwwKTt2YXIgYnVmZmVyPW5ldyBVaW50OEFycmF5KGJveExlbmd0aCk7dmFyIG9mZnNldD0wO2JveGVzLmZvckVhY2goZnVuY3Rpb24oYm94KXtib3g9bmV3IFVpbnQ4QXJyYXkoYm94KTtidWZmZXIuc2V0KGJveCxvZmZzZXQpO29mZnNldCs9Ym94LmJ5dGVMZW5ndGg7fSk7cmV0dXJuIGJ1ZmZlcjt9Oy8qKlxuICogY29tYmluZSBidWZmZXIgYW5kIGRvd25sb2FkIGl0cyBNSU1FIHR5cGUgbGlrZSBtcDRcbiAqL2V4cG9ydHMuY29uY2F0QnVmZmVyPWZ1bmN0aW9uKCl7dmFyIGJ1ZmZlcj1uZXcgQXJyYXlCdWZmZXIoMCk7dmFyIF90aGlzPWV4cG9ydHM7cmV0dXJuIGZ1bmN0aW9uKHNlZ21lbnQsbGVuZ3RoKXtidWZmZXI9X3RoaXMubWVyZ2Vib3goYnVmZmVyLHNlZ21lbnQuYnVmZmVyKTtpZihidWZmZXIuYnl0ZUxlbmd0aD5sZW5ndGgpX3RoaXMuZG93bmZpbGUoYnVmZmVyLCd2aWRlbycpO307fSgpO2V4cG9ydHMuc3RvcD1mdW5jdGlvbigpe3ZhciBudW09MDtyZXR1cm4gZnVuY3Rpb24obGltaXQpe2NvbnNvbGUubG9nKG51bSk7cmV0dXJuIGxpbWl0PD1udW0rKzt9O30oKTtcblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xudmFyIF9zcmM9X193ZWJwYWNrX3JlcXVpcmVfXyg0KTt2YXIgX3NyYzI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3JjKTt2YXIgX211eD1fX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTt2YXIgX211eDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbXV4KTt2YXIgX2hlbHBlcj1fX3dlYnBhY2tfcmVxdWlyZV9fKDIpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfTt9dmFyIGh0dHBDaHVua2VkPW5ldyBfc3JjMi5kZWZhdWx0KCdodHRwOi8vNjcyMS5saXZlcGxheS5teXFjbG91ZC5jb20vbGl2ZS82NzIxXzk4YWQ0MzBiYTM5MGEyY2FhZmU1OTUxMjUwY2JjNjdkLmZsdicpO3ZhciBtdXhDb250cm9sbGVyPW5ldyBfbXV4Mi5kZWZhdWx0KCk7LyoqXG4gKiBEcm9wIFRlc3RDYXNlXG4gKi8vLyAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbi8vICAgICBodHRwQ2h1bmtlZC5kcm9wKCk7XG4vLyAgfSwgMjAwMCk7XG4vKipcbiAqIFJlcGxhY2UgVGVzdENhc2VcbiAqLy8vIGh0dHBDaHVua2VkLnJlcGxhY2UoJ2h0dHA6Ly82NzIxLmxpdmVwbGF5Lm15cWNsb3VkLmNvbS9saXZlLzY3MjFfOTI5MDZiMjBlYWJlMjY2M2EyZmI1MjUwODM3N2I4NDMuZmx2Jyk7XG4vKipcbiAqIFJldHJ5IFRlc3RDYXNlXG4gKi8vLyAgaHR0cENodW5rZWQucmV0cnkoKTtcbi8qKlxuICogU3RyZWFtIEV2ZW50IFRlc3RDYXNlXG4gKi9odHRwQ2h1bmtlZC5iaW5kKCdzdHJlYW0nLGZ1bmN0aW9uKHN0cmVhbSx0eXBlKXsvLyBkb3duRkxWKHN0cmVhbSwndmlkZW8nKTtcbm11eENvbnRyb2xsZXIucGFyc2Uoc3RyZWFtLHR5cGUpO30pOy8qKlxuICAqIEVuZCBFdmVudCBUZXN0Q2FzZVxuICAqLy8vIFRPRE8gXG4vLyAxLiBiaW5kXG4vLyAyLiBlbmRcbi8vIDMuIHN0YXJ0XG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTt2YXIgX21pdHQ9X193ZWJwYWNrX3JlcXVpcmVfXygyMyk7dmFyIF9taXR0Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9taXR0KTt2YXIgX2NvbnN0YW50cz1fX3dlYnBhY2tfcmVxdWlyZV9fKDYpO3ZhciBfdXRpbHM9X193ZWJwYWNrX3JlcXVpcmVfXyg3KTt2YXIgX2hlYWRlcj1fX3dlYnBhY2tfcmVxdWlyZV9fKDgpO3ZhciBfaGVhZGVyMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWFkZXIpO3ZhciBfdXRpbD1fX3dlYnBhY2tfcmVxdWlyZV9fKDEpO3ZhciBfaGVscGVyPV9fd2VicGFja19yZXF1aXJlX18oMik7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9O31mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9dmFyIEhUVFBDaHVua2VkPWZ1bmN0aW9uKF9IZWFkZXJSZWFkKXtfaW5oZXJpdHMoSFRUUENodW5rZWQsX0hlYWRlclJlYWQpO2Z1bmN0aW9uIEhUVFBDaHVua2VkKCl7dmFyIHVybD1hcmd1bWVudHMubGVuZ3RoPjAmJmFyZ3VtZW50c1swXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMF06Jyc7X2NsYXNzQ2FsbENoZWNrKHRoaXMsSFRUUENodW5rZWQpO3ZhciBfdGhpcz1fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLChIVFRQQ2h1bmtlZC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihIVFRQQ2h1bmtlZCkpLmNhbGwodGhpcykpO2lmKCF3aW5kb3cuZmV0Y2gpe3Rocm93IG5ldyBFcnJvcigneW91ciBicm93c2VyIGRvblwidCBzdXBwb3J0IGZldGNoIEFQSSwgcGxlYXNlIHVzZSBtb2Rlcm4gQnJvd3NlcicpO31fdGhpcy5fZW1pdHRlcj0oMCxfbWl0dDIuZGVmYXVsdCkoKTtfdGhpcy5fdXJsPXVybDtfdGhpcy5fQ0FMQ0VMPWZhbHNlO190aGlzLl9FUlJPUj1mYWxzZTtfdGhpcy5fY2h1bms9bmV3IEFycmF5QnVmZmVyKDApO190aGlzLl9idWZmZXJMZW47X3RoaXMuX3JlYWRMZW49MDtfdGhpcy5fcmV0dXJuQXJyPVtdO3VybCYmX3RoaXMuX2ZldGNoKHVybCk7cmV0dXJuIF90aGlzO31fY3JlYXRlQ2xhc3MoSFRUUENodW5rZWQsW3trZXk6J19mZXRjaCcsdmFsdWU6ZnVuY3Rpb24gX2ZldGNoKHVybCl7dmFyIF90aGlzMj10aGlzO3RoaXMuX3N0YXJ0KCk7ZmV0Y2godXJsKS50aGVuKGZ1bmN0aW9uKHJlcyl7dmFyIHJlYWRlcj1yZXMuYm9keS5nZXRSZWFkZXIoKTtyZWFkZXIucmVhZCgpLnRoZW4oZnVuY3Rpb24gY2h1bmtlZFJlYWRlcihfcmVmKXt2YXIgZG9uZT1fcmVmLmRvbmUsdmFsdWU9X3JlZi52YWx1ZTsvLyBUT0RPIFxuLy8gMS4gd2hlbiB1c2UgZGVpY2lkZSB0byBkcm9wIHRoZSB1cmxcbi8vIDIuIHdoZW4gZGV2ZWxvcGVyIHdhbm5hIHN3aXRjaCB0byBhbm90aGVyIHVybFxuaWYodGhpcy5fQ0FMQ0VMKXsvLyB0aGUgdXNlciBkcm9wIHRoaXMgdmlkZW9cbmlmKCFkb25lKXt0cnl7Y29uc29sZS5sb2coJ2Ryb3AgdGhpcyB1cmwsICcsdXJsKTtyZWFkZXIucmVsZWFzZUxvY2soKTtyZXMuYm9keS5jYW5jZWwoXCJ0aGUgdXNlciBkZWNpZGUgdG8gZHJvcFwiKTt0aGlzLl9lbWl0KF9jb25zdGFudHMuSFRUUENBTkNFTCk7dGhpcy5fZW1pdChfY29uc3RhbnRzLkNIVU5LRURFTkQpO3JldHVybjt9Y2F0Y2goZXJyb3Ipe2NvbnNvbGUud2FybignZG9udFwidCBzdXBwb3J0IGRyb3AoKS4gYmVjYXVzZSB5b3UgYnJvd2VyIGRvblwidCBzdXBwb3J0IHJlYWRlci5yZWxlYXNlTG9jaygpIEFQSSBcXG4nLGVycm9yKTt9fTt9aWYoZG9uZSl7Y29uc29sZS5sb2coJ3RoZSBjaHVua2VkIGNvbm5lY3Rpb24gaGFzIHN0b3BwZWQnKTt0aGlzLl9lbWl0KF9jb25zdGFudHMuQ0hVTktFREVORCk7cmV0dXJuO31jb25zb2xlLmxvZygnZXZlcnkgc2VnbWVudCBsZW4gaXMgJyx2YWx1ZS5sZW5ndGgpOy8vIHRoaXMuX2VtaXQoQ0hVTktFRFNUUkVBTSwgdmFsdWUpOyAvLyB0cmlnZ2VyIHRoZSByZWFkZSBzdHJlYW1cbnRoaXMucmVhZENodW5rKHZhbHVlLmJ1ZmZlcik7aWYoKDAsX2hlbHBlci5zdG9wKSg1MDApKXt0aGlzLmRyb3AoKTsvLyBUT0RPIGRlYnVnZ2VyXG59cmV0dXJuIHJlYWRlci5yZWFkKCkudGhlbihjaHVua2VkUmVhZGVyLmJpbmQodGhpcykpO30uYmluZChfdGhpczIpKTt9KS5jYXRjaChmdW5jdGlvbihlcnIpe190aGlzMi5fRVJST1I9dHJ1ZTtfdGhpczIuX2VtaXQoX2NvbnN0YW50cy5DSFVOS0VERVJSLGVycik7dGhyb3cgbmV3IEVycm9yKGVycik7fSk7fS8vIGV4dHJhY3QgdGhlIHRhZyBkYXRhXG4vLyByZWFkZXIgYm9keVxuLy8gcmVhZGVyIFRhZ1xuLy8gIHNjcmlwdFxuLy8gIHZpZGVvXG4vLyAgYXVkaW9cbn0se2tleToncmVhZENodW5rJyx2YWx1ZTpmdW5jdGlvbiByZWFkQ2h1bmsoY2h1bmspey8vIHJlZGVyIEZMViBoZWFkZXJcbnRoaXMuX2NodW5rPSgwLF91dGlscy5tZXJnZUJ1ZmZlcikodGhpcy5fY2h1bmssY2h1bmspO3ZhciB0bXBEYXRhPXZvaWQgMCxhYj12b2lkIDAsdmlldz12b2lkIDA7dGhpcy5fYnVmZmVyTGVuPXRoaXMuX2NodW5rLmJ5dGVMZW5ndGg7dGhpcy5fcmVhZExlbj0wO3RoaXMuX3JldHVybkFycj1bXTt2YXIgdHlwZT0nTVMnO3doaWxlKHRoaXMuX2J1ZmZlckxlbi10aGlzLl9yZWFkTGVuPjExKXthYj1uZXcgVWludDhBcnJheSh0aGlzLl9jaHVuayk7Ly8gcmVhZGVyIEZMViBGaWxlIEhlYWRlclxuaWYoYWJbMF09PT0weDQ2JiZhYlsxXT09PTB4NEMmJmFiWzJdPT09MHg1Nil7Ly8gcmVhZGVyIEZMViBoZWFkZXJcbnRtcERhdGE9dGhpcy5fZmx2SGVhZGVyKHRoaXMuX2NodW5rLnNsaWNlKDAsOSkpO3RoaXMuX3JldHVybkFyci5wdXNoKHtidWZmZXI6dG1wRGF0YS5idWZmZXIsaW5mbzp7dHlwZTp0bXBEYXRhLnR5cGUsdmVyc2lvbjp0bXBEYXRhLnZlcnNpb24sdGFnT2Zmc2V0OnRtcERhdGEudGFnT2Zmc2V0LGhhc0F1ZGlvOnRtcERhdGEuaGFzQXVkaW8saGFzVmlkZW86dG1wRGF0YS5oYXNWaWRlb319KTt0aGlzLl9yZWFkTGVuKz05O3RoaXMuX2NodW5rPXRoaXMuX2NodW5rLnNsaWNlKDkpO3R5cGU9J0lTJztjb250aW51ZTt9Ly8gcmVhZGVyIERhdGFTaXplXG52aWV3PW5ldyBEYXRhVmlldyh0aGlzLl9jaHVuayk7Ly8gZ2V0IHRoZSBwcmV2aW91cyB0YWcgc2l6ZVxudmFyIHBydkRhdGFTaXplPXZpZXcuZ2V0VWludDMyKDApO3ZhciBkYXRhU2l6ZT12aWV3LmdldFVpbnQzMig0KSYxNjc3NzIxNTtjb25zb2xlLmxvZyhkYXRhU2l6ZSk7aWYodGhpcy5fYnVmZmVyTGVuLXRoaXMuX3JlYWRMZW48MTErZGF0YVNpemUpey8vIHdoZW4gdGhlIHJlbWFpbmVkIGRhdGEgaXMgbm90IGEgY29tcGxldGUgdGFnLCByZXR1cm47XG5icmVhazt9Y29uc29sZS5sb2codGhpcy5fcmV0dXJuQXJyKTsvLyBkZWNvZGUgRmx2IHRhZ1xudG1wRGF0YT10aGlzLl9mbHZUYWcodGhpcy5fY2h1bmsuc2xpY2UoNCkpO3RoaXMuX3JldHVybkFyci5wdXNoKHtidWZmZXI6dG1wRGF0YS5idWZmZXIsaW5mbzp7dHlwZTp0bXBEYXRhLnR5cGUsZGF0YU9mZnNldDp0bXBEYXRhLmRhdGFPZmZzZXQsZGF0YVNpemU6dG1wRGF0YS5kYXRhU2l6ZSx0aW1lU3RhbXA6dG1wRGF0YS50aW1lU3RhbXAsdGFnTGVuOnRtcERhdGEudGFnTGVufX0pO3RoaXMuX2NodW5rPXRoaXMuX2NodW5rLnNsaWNlKHRtcERhdGEudGFnTGVuKzQpOy8vIHBydlRhZyBzaXplXG50aGlzLl9yZWFkTGVuKz10bXBEYXRhLnRhZ0xlbis0O30vLyBkZXRlY3QgdGhlIGFyciBpcyBlbXB0eSwgdGhlbiBkb24ndCByZXR1cm5cbmlmKCF0aGlzLl9yZXR1cm5BcnIubGVuZ3RoKXJldHVybjsvKipcbiAgICAgICAgICogdGhlIHR5cGUgY29udGFpbiBJUy9NUzpcbiAgICAgICAgICogICAgICBJUzogaW5pdGlhbCBTZWdtZW50XG4gICAgICAgICAqICAgICAgTVM6IG1lZGlhIFNlZ21lbnRcbiAgICAgICAgICovdGhpcy5fZW1pdChfY29uc3RhbnRzLkNIVU5LRURTVFJFQU0sdGhpcy5fcmV0dXJuQXJyLHR5cGUpO30vKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsOiByZXBsYWNlIHRoZSBvcmlnaW4gdXJsIHRvIGEgbmV3IHVybCBPYmplY3RcbiAgICAgKi99LHtrZXk6J3JlcGxhY2UnLHZhbHVlOmZ1bmN0aW9uIHJlcGxhY2UodXJsKXt2YXIgX3RoaXMzPXRoaXM7dGhpcy5fdXJsPXVybDt0aGlzLmRyb3AoKS50aGVuKGZ1bmN0aW9uKCl7X3RoaXMzLl9mZXRjaCh1cmwpO30pO319LHtrZXk6J3JldHJ5Jyx2YWx1ZTpmdW5jdGlvbiByZXRyeSgpe3ZhciBfdGhpczQ9dGhpcztjb25zb2xlLmxvZygncmV0cnknKTsvLyB3aGVuIG1lZXQgZXJyb3IsIGRpcmVjdGx5IGZldGNoIHRoZSByZXNvdXJjZVxuaWYodGhpcy5fRVJST1Ipe3JldHVybiB0aGlzLl9mZXRjaCh0aGlzLl91cmwpO30vLyB3aGVuIHRoZSBmZXRjaCBpcyBnb29kLCBkcm9wIGl0IGFuZCBmZXRjaCBhIG5ldyBvbmVcbnRoaXMuZHJvcCgpLnRoZW4oZnVuY3Rpb24oKXtfdGhpczQuX2ZldGNoKF90aGlzNC5fdXJsKTt9KTt9LyoqXG4gICAgICogdHJpZ2dlcmluZyBjb25kaXRpb246XG4gICAgICogIDEuIHdoZW4gZGV2ZWxvcCB3YW5uYSB1c2Ugb3RoZXIgdXJsLCBsaWtlIGNhbGxpbmcgcmV0cnkoeHgpXG4gICAgICogIDIuIHdoZW4gc3RhcnQgYSBuZXcgZmV0Y2gsIHJlc2V0IHRoZSBjYW5jYWwncyBzdGF0ZVxuICAgICAqL30se2tleTonX3N0YXJ0Jyx2YWx1ZTpmdW5jdGlvbiBfc3RhcnQoKXt0aGlzLl9DQUxDRUw9ZmFsc2U7dGhpcy5fRVJST1I9ZmFsc2U7fX0se2tleTonZHJvcCcsdmFsdWU6ZnVuY3Rpb24gZHJvcCgpe3ZhciBfdGhpczU9dGhpczt0aGlzLl9DQUxDRUw9dHJ1ZTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzLHJlail7X3RoaXM1Ll9vbihfY29uc3RhbnRzLkhUVFBDQU5DRUwsZnVuY3Rpb24oKXtyZXMoKTt9KTt9KTt9fSx7a2V5OidhZGRFdmVudExpc3RlbmVyJyx2YWx1ZTpmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5hbWUsZm4pe3N3aXRjaChuYW1lKXtjYXNlJ3N0cmVhbSc6dGhpcy5fb24oX2NvbnN0YW50cy5DSFVOS0VEU1RSRUFNLGZ1bmN0aW9uKCl7Zm4uYXBwbHkodW5kZWZpbmVkLGFyZ3VtZW50cyk7fSk7YnJlYWs7Y2FzZSdlbmQnOnRoaXMuX29uKF9jb25zdGFudHMuQ0hVTktFREVORCxmdW5jdGlvbigpe2ZuLmFwcGx5KHVuZGVmaW5lZCxhcmd1bWVudHMpO30pO2JyZWFrO2Nhc2UnZXJyb3InOnRoaXMuX29uKF9jb25zdGFudHMuQ0hVTktFREVSUixmdW5jdGlvbigpe2ZuLmFwcGx5KHVuZGVmaW5lZCxhcmd1bWVudHMpO30pO2JyZWFrO2RlZmF1bHQ6dGhpcy5fb24obmFtZSxmdW5jdGlvbigpe2ZuLmFwcGx5KHVuZGVmaW5lZCxhcmd1bWVudHMpO30pO319fSx7a2V5OidiaW5kJyx2YWx1ZTpmdW5jdGlvbiBiaW5kKCl7dGhpcy5hZGRFdmVudExpc3RlbmVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9fSx7a2V5OidvbicsdmFsdWU6ZnVuY3Rpb24gb24oKXt0aGlzLmFkZEV2ZW50TGlzdGVuZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpO319LHtrZXk6J19vbicsdmFsdWU6ZnVuY3Rpb24gX29uKCl7dmFyIF9lbWl0dGVyOyhfZW1pdHRlcj10aGlzLl9lbWl0dGVyKS5vbi5hcHBseShfZW1pdHRlcixhcmd1bWVudHMpO319LHtrZXk6J19lbWl0Jyx2YWx1ZTpmdW5jdGlvbiBfZW1pdCgpe3ZhciBfZW1pdHRlcjI7KF9lbWl0dGVyMj10aGlzLl9lbWl0dGVyKS5lbWl0LmFwcGx5KF9lbWl0dGVyMixhcmd1bWVudHMpO319XSk7cmV0dXJuIEhUVFBDaHVua2VkO30oX2hlYWRlcjIuZGVmYXVsdCk7ZXhwb3J0cy5kZWZhdWx0PUhUVFBDaHVua2VkO1xuXG4vKioqLyB9KSxcbi8qIDUgKi8sXG4vKiA2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt2YXIgSFRUUENBTkNFTD1leHBvcnRzLkhUVFBDQU5DRUw9J0hUVFBDQU5DRUwnOy8vIGFib3J0IHRoZSBmZXRjaCBldmVudFxuLyoqXG4gKiB0aHJlZSBmbGFnc1xuICovdmFyIENIVU5LRURTVFJFQU09ZXhwb3J0cy5DSFVOS0VEU1RSRUFNPSdDSFVOS0VEU1RSRUFNJzsvLyBpbmRpY2F0ZSByZWNldmluZyB0aGUgc3RyZWFtIGNvbnRpbnVzbHlcbnZhciBDSFVOS0VERU5EPWV4cG9ydHMuQ0hVTktFREVORD0nQ0hVTktFREVORCc7Ly8gaW5kaWNhdGUgdGhlIGVuZCBvZiBzdHJlYW1cbnZhciBDSFVOS0VERVJSPWV4cG9ydHMuQ0hVTktFREVSUj0nQ0hVTktFREVSUic7Ly8gaW5kaWNhdGUgdGhlcmUgaXMgc29tZSBlcnJvciBvZiBzdHJlYW1cblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt2YXIgbWVyZ2VCdWZmZXI9ZXhwb3J0cy5tZXJnZUJ1ZmZlcj1mdW5jdGlvbiBtZXJnZUJ1ZmZlcigpe2Zvcih2YXIgX2xlbj1hcmd1bWVudHMubGVuZ3RoLGJ1ZmZlcnM9QXJyYXkoX2xlbiksX2tleT0wO19rZXk8X2xlbjtfa2V5Kyspe2J1ZmZlcnNbX2tleV09YXJndW1lbnRzW19rZXldO30vLyBidWZmZXJzIGFyZSBhcnJheUJ1ZmZlclxudmFyIGJveExlbmd0aD1idWZmZXJzLnJlZHVjZShmdW5jdGlvbihwcmUsdmFsKXtyZXR1cm4gcHJlK3ZhbC5ieXRlTGVuZ3RoO30sMCk7dmFyIGJ1ZmZlcj1uZXcgVWludDhBcnJheShib3hMZW5ndGgpO3ZhciBvZmZzZXQ9MDtidWZmZXJzLmZvckVhY2goZnVuY3Rpb24oYm94KXtidWZmZXIuc2V0KG5ldyBVaW50OEFycmF5KGJveCksb2Zmc2V0KTtvZmZzZXQrPWJveC5ieXRlTGVuZ3RoO30pO3JldHVybiBidWZmZXIuYnVmZmVyO307Ly8gZ2V0IFVuaXQ4QXJyYXlcbi8vIHJldHVybiBVbml0OEFycmF5XG52YXIgbWVyZ2VUeXBlZEFycmF5PWV4cG9ydHMubWVyZ2VUeXBlZEFycmF5PWZ1bmN0aW9uIG1lcmdlVHlwZWRBcnJheSgpe2Zvcih2YXIgX2xlbjI9YXJndW1lbnRzLmxlbmd0aCxidWZmZXJzPUFycmF5KF9sZW4yKSxfa2V5Mj0wO19rZXkyPF9sZW4yO19rZXkyKyspe2J1ZmZlcnNbX2tleTJdPWFyZ3VtZW50c1tfa2V5Ml07fS8vIGJ1ZmZlcnMgYXJlIGFycmF5QnVmZmVyXG52YXIgYm94TGVuZ3RoPWJ1ZmZlcnMucmVkdWNlKGZ1bmN0aW9uKHByZSx2YWwpe3JldHVybiBwcmUrdmFsLmJ5dGVMZW5ndGg7fSwwKTt2YXIgYnVmZmVyPW5ldyBVaW50OEFycmF5KGJveExlbmd0aCk7dmFyIG9mZnNldD0wO2J1ZmZlcnMuZm9yRWFjaChmdW5jdGlvbihib3gpe2J1ZmZlci5zZXQoYm94LG9mZnNldCk7b2Zmc2V0Kz1ib3guYnl0ZUxlbmd0aDt9KTtyZXR1cm4gYnVmZmVyO307XG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTt2YXIgX3V0aWw9X193ZWJwYWNrX3JlcXVpcmVfXygxKTtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX12YXIgSGVhZGVyUmVhZD1mdW5jdGlvbigpe2Z1bmN0aW9uIEhlYWRlclJlYWQoKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyxIZWFkZXJSZWFkKTt0aGlzLl90eXBlPXs4OidhdWRpbycsOTondmlkZW8nLDE4OidzY3JpcHQnfTt9X2NyZWF0ZUNsYXNzKEhlYWRlclJlYWQsW3trZXk6J19mbHZIZWFkZXInLHZhbHVlOmZ1bmN0aW9uIF9mbHZIZWFkZXIoY2h1bmspe3ZhciBkYXRhPWNodW5rLnNsaWNlKDMpO3ZhciB2aWV3PW5ldyBEYXRhVmlldyhkYXRhKSx2ZXJzaW9uPXZpZXcuZ2V0VWludDgoMCksZmxhZ3M9dmlldy5nZXRVaW50OCgxKSx0YWdPZmZzZXQ9dmlldy5nZXRVaW50MzIoMik7dmFyIGhhc1ZpZGVvPXRydWUsaGFzQXVkaW89dHJ1ZTtpZihmbGFncyE9PTUpe2hhc0F1ZGlvPSEhKGZsYWdzJjQ+PjIpO2hhc1ZpZGVvPSEhKGZsYWdzJjEpO30vLyBUT0RPIGhlYWRlciBvZmZzZXRcbnJldHVybnt0eXBlOidoZWFkZXInLHZlcnNpb246dmVyc2lvbix0YWdPZmZzZXQ6dGFnT2Zmc2V0LGhhc0F1ZGlvOmhhc0F1ZGlvLGhhc1ZpZGVvOmhhc1ZpZGVvLGJ1ZmZlcjpjaHVua307fX0se2tleTonX2ZsdlRhZycsdmFsdWU6ZnVuY3Rpb24gX2ZsdlRhZyhjaHVuayl7dmFyIHZpZXc9bmV3IERhdGFWaWV3KGNodW5rKTt2YXIgdHlwZT10aGlzLl90eXBlW3ZpZXcuZ2V0VWludDgoMCldO3ZhciBkYXRhU2l6ZT12aWV3LmdldFVpbnQzMigwKSYxNjc3NzIxNTt2YXIgZGF0YU9mZnNldD0xMTt2YXIgdGltZVN0YW1wPXZpZXcuZ2V0VWludDMyKDQpPj44O3ZhciB1cHBlclRpbWU9dmlldy5nZXRVaW50OCg3KTtpZih1cHBlclRpbWUhPT0wKXt0aW1lU3RhbXB8PXVwcGVyVGltZTw8MjQ7fXJldHVybnt0eXBlOnR5cGUsZGF0YVNpemU6ZGF0YVNpemUsdGltZVN0YW1wOnRpbWVTdGFtcCxkYXRhT2Zmc2V0OmRhdGFPZmZzZXQsdGFnTGVuOmRhdGFTaXplK2RhdGFPZmZzZXQsYnVmZmVyOmNodW5rLnNsaWNlKDAsZGF0YVNpemUrZGF0YU9mZnNldCl9O319XSk7cmV0dXJuIEhlYWRlclJlYWQ7fSgpO2V4cG9ydHMuZGVmYXVsdD1IZWFkZXJSZWFkO1xuXG4vKioqLyB9KSxcbi8qIDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX3R5cGVvZj10eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgU3ltYm9sLml0ZXJhdG9yPT09XCJzeW1ib2xcIj9mdW5jdGlvbihvYmope3JldHVybiB0eXBlb2Ygb2JqO306ZnVuY3Rpb24ob2JqKXtyZXR1cm4gb2JqJiZ0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqO307dmFyIGc7Ly8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpczt9KCk7dHJ5ey8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuZz1nfHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCl8fCgxLGV2YWwpKFwidGhpc1wiKTt9Y2F0Y2goZSl7Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcbmlmKCh0eXBlb2Ygd2luZG93PT09XCJ1bmRlZmluZWRcIj9cInVuZGVmaW5lZFwiOl90eXBlb2Yod2luZG93KSk9PT1cIm9iamVjdFwiKWc9d2luZG93O30vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxubW9kdWxlLmV4cG9ydHM9ZztcblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3M9bW9kdWxlLmV4cG9ydHM9e307Ly8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG52YXIgY2FjaGVkU2V0VGltZW91dDt2YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O2Z1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKXt0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTt9ZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCgpe3Rocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7fShmdW5jdGlvbigpe3RyeXtpZih0eXBlb2Ygc2V0VGltZW91dD09PSdmdW5jdGlvbicpe2NhY2hlZFNldFRpbWVvdXQ9c2V0VGltZW91dDt9ZWxzZXtjYWNoZWRTZXRUaW1lb3V0PWRlZmF1bHRTZXRUaW1vdXQ7fX1jYXRjaChlKXtjYWNoZWRTZXRUaW1lb3V0PWRlZmF1bHRTZXRUaW1vdXQ7fXRyeXtpZih0eXBlb2YgY2xlYXJUaW1lb3V0PT09J2Z1bmN0aW9uJyl7Y2FjaGVkQ2xlYXJUaW1lb3V0PWNsZWFyVGltZW91dDt9ZWxzZXtjYWNoZWRDbGVhclRpbWVvdXQ9ZGVmYXVsdENsZWFyVGltZW91dDt9fWNhdGNoKGUpe2NhY2hlZENsZWFyVGltZW91dD1kZWZhdWx0Q2xlYXJUaW1lb3V0O319KSgpO2Z1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKXtpZihjYWNoZWRTZXRUaW1lb3V0PT09c2V0VGltZW91dCl7Ly9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG5yZXR1cm4gc2V0VGltZW91dChmdW4sMCk7fS8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG5pZigoY2FjaGVkU2V0VGltZW91dD09PWRlZmF1bHRTZXRUaW1vdXR8fCFjYWNoZWRTZXRUaW1lb3V0KSYmc2V0VGltZW91dCl7Y2FjaGVkU2V0VGltZW91dD1zZXRUaW1lb3V0O3JldHVybiBzZXRUaW1lb3V0KGZ1biwwKTt9dHJ5ey8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbnJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwwKTt9Y2F0Y2goZSl7dHJ5ey8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxucmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLGZ1biwwKTt9Y2F0Y2goZSl7Ly8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbnJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcyxmdW4sMCk7fX19ZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcil7aWYoY2FjaGVkQ2xlYXJUaW1lb3V0PT09Y2xlYXJUaW1lb3V0KXsvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbnJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTt9Ly8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuaWYoKGNhY2hlZENsZWFyVGltZW91dD09PWRlZmF1bHRDbGVhclRpbWVvdXR8fCFjYWNoZWRDbGVhclRpbWVvdXQpJiZjbGVhclRpbWVvdXQpe2NhY2hlZENsZWFyVGltZW91dD1jbGVhclRpbWVvdXQ7cmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO310cnl7Ly8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xucmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO31jYXRjaChlKXt0cnl7Ly8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxucmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsbWFya2VyKTt9Y2F0Y2goZSl7Ly8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4vLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG5yZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcyxtYXJrZXIpO319fXZhciBxdWV1ZT1bXTt2YXIgZHJhaW5pbmc9ZmFsc2U7dmFyIGN1cnJlbnRRdWV1ZTt2YXIgcXVldWVJbmRleD0tMTtmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKXtpZighZHJhaW5pbmd8fCFjdXJyZW50UXVldWUpe3JldHVybjt9ZHJhaW5pbmc9ZmFsc2U7aWYoY3VycmVudFF1ZXVlLmxlbmd0aCl7cXVldWU9Y3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7fWVsc2V7cXVldWVJbmRleD0tMTt9aWYocXVldWUubGVuZ3RoKXtkcmFpblF1ZXVlKCk7fX1mdW5jdGlvbiBkcmFpblF1ZXVlKCl7aWYoZHJhaW5pbmcpe3JldHVybjt9dmFyIHRpbWVvdXQ9cnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO2RyYWluaW5nPXRydWU7dmFyIGxlbj1xdWV1ZS5sZW5ndGg7d2hpbGUobGVuKXtjdXJyZW50UXVldWU9cXVldWU7cXVldWU9W107d2hpbGUoKytxdWV1ZUluZGV4PGxlbil7aWYoY3VycmVudFF1ZXVlKXtjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7fX1xdWV1ZUluZGV4PS0xO2xlbj1xdWV1ZS5sZW5ndGg7fWN1cnJlbnRRdWV1ZT1udWxsO2RyYWluaW5nPWZhbHNlO3J1bkNsZWFyVGltZW91dCh0aW1lb3V0KTt9cHJvY2Vzcy5uZXh0VGljaz1mdW5jdGlvbihmdW4pe3ZhciBhcmdzPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7YXJnc1tpLTFdPWFyZ3VtZW50c1tpXTt9fXF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLGFyZ3MpKTtpZihxdWV1ZS5sZW5ndGg9PT0xJiYhZHJhaW5pbmcpe3J1blRpbWVvdXQoZHJhaW5RdWV1ZSk7fX07Ly8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sYXJyYXkpe3RoaXMuZnVuPWZ1bjt0aGlzLmFycmF5PWFycmF5O31JdGVtLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpO307cHJvY2Vzcy50aXRsZT0nYnJvd3Nlcic7cHJvY2Vzcy5icm93c2VyPXRydWU7cHJvY2Vzcy5lbnY9e307cHJvY2Vzcy5hcmd2PVtdO3Byb2Nlc3MudmVyc2lvbj0nJzsvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucz17fTtmdW5jdGlvbiBub29wKCl7fXByb2Nlc3Mub249bm9vcDtwcm9jZXNzLmFkZExpc3RlbmVyPW5vb3A7cHJvY2Vzcy5vbmNlPW5vb3A7cHJvY2Vzcy5vZmY9bm9vcDtwcm9jZXNzLnJlbW92ZUxpc3RlbmVyPW5vb3A7cHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnM9bm9vcDtwcm9jZXNzLmVtaXQ9bm9vcDtwcm9jZXNzLnByZXBlbmRMaXN0ZW5lcj1ub29wO3Byb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lcj1ub29wO3Byb2Nlc3MubGlzdGVuZXJzPWZ1bmN0aW9uKG5hbWUpe3JldHVybltdO307cHJvY2Vzcy5iaW5kaW5nPWZ1bmN0aW9uKG5hbWUpe3Rocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTt9O3Byb2Nlc3MuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuJy8nO307cHJvY2Vzcy5jaGRpcj1mdW5jdGlvbihkaXIpe3Rocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7fTtwcm9jZXNzLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDA7fTtcblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbnZhciBfdHlwZW9mPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBpc0J1ZmZlcihhcmcpe3JldHVybiBhcmcmJih0eXBlb2YgYXJnPT09J3VuZGVmaW5lZCc/J3VuZGVmaW5lZCc6X3R5cGVvZihhcmcpKT09PSdvYmplY3QnJiZ0eXBlb2YgYXJnLmNvcHk9PT0nZnVuY3Rpb24nJiZ0eXBlb2YgYXJnLmZpbGw9PT0nZnVuY3Rpb24nJiZ0eXBlb2YgYXJnLnJlYWRVSW50OD09PSdmdW5jdGlvbic7fTtcblxuLyoqKi8gfSksXG4vKiAxMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbmlmKHR5cGVvZiBPYmplY3QuY3JlYXRlPT09J2Z1bmN0aW9uJyl7Ly8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbm1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGluaGVyaXRzKGN0b3Isc3VwZXJDdG9yKXtjdG9yLnN1cGVyXz1zdXBlckN0b3I7Y3Rvci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6Y3RvcixlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7fTt9ZWxzZXsvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xubW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gaW5oZXJpdHMoY3RvcixzdXBlckN0b3Ipe2N0b3Iuc3VwZXJfPXN1cGVyQ3Rvcjt2YXIgVGVtcEN0b3I9ZnVuY3Rpb24gVGVtcEN0b3IoKXt9O1RlbXBDdG9yLnByb3RvdHlwZT1zdXBlckN0b3IucHJvdG90eXBlO2N0b3IucHJvdG90eXBlPW5ldyBUZW1wQ3RvcigpO2N0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yPWN0b3I7fTt9XG5cbi8qKiovIH0pLFxuLyogMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fTt9KCk7dmFyIF9sb2c9X193ZWJwYWNrX3JlcXVpcmVfXygwKTt2YXIgX2xvZzI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9nKTt2YXIgX2Jhc2VpbmZvPV9fd2VicGFja19yZXF1aXJlX18oMTQpO3ZhciBfYmFzZWluZm8yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jhc2VpbmZvKTt2YXIgX2FtZj1fX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTt2YXIgX2FtZjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYW1mKTt2YXIgX2F2Y2RlbXV4PV9fd2VicGFja19yZXF1aXJlX18oMTYpO3ZhciBfYXZjZGVtdXgyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F2Y2RlbXV4KTt2YXIgX2FhY2RlbXV4PV9fd2VicGFja19yZXF1aXJlX18oMTkpO3ZhciBfYWFjZGVtdXgyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FhY2RlbXV4KTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntkZWZhdWx0Om9ian07fWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoIXNlbGYpe3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTt9cmV0dXJuIGNhbGwmJih0eXBlb2YgY2FsbD09PVwib2JqZWN0XCJ8fHR5cGVvZiBjYWxsPT09XCJmdW5jdGlvblwiKT9jYWxsOnNlbGY7fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcyxzdXBlckNsYXNzKXtpZih0eXBlb2Ygc3VwZXJDbGFzcyE9PVwiZnVuY3Rpb25cIiYmc3VwZXJDbGFzcyE9PW51bGwpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBzdXBlckNsYXNzKTt9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyxlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7aWYoc3VwZXJDbGFzcylPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpOnN1YkNsYXNzLl9fcHJvdG9fXz1zdXBlckNsYXNzO312YXIgbG9nPW5ldyBfbG9nMi5kZWZhdWx0KCdGTFZEZW11eCcpO3ZhciBGTFZEZW11eD1mdW5jdGlvbihfQmFzZUluZm8pe19pbmhlcml0cyhGTFZEZW11eCxfQmFzZUluZm8pO2Z1bmN0aW9uIEZMVkRlbXV4KCl7X2NsYXNzQ2FsbENoZWNrKHRoaXMsRkxWRGVtdXgpO3ZhciBfdGhpcz1fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLChGTFZEZW11eC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihGTFZEZW11eCkpLmNhbGwodGhpcykpO190aGlzLl90eXBlPXtoZWFkZXI6J2hlYWRlcicsdmlkZW86XCJ2aWRlb1wiLGF1ZGlvOlwiYXVkaW9cIixzY3JpcHQ6XCJzY3JpcHRcIi8vIHdlIGRvbid0IGdldCByZXR1cm4gb2YgZnVuY3Rpb24gdG8gc2F2ZSB2YWx1ZXMganVzdCBwYXNzIHRoZSB2aWRlbyBhbmQgYXVkaW9cbi8vIG9iamVjdCB0byBzYXZlIHZhbHVlcyBhbGwgZm9sbG93aW5nIGNvZGUgaGF2ZSBvbmx5IG9uZSBlbnRyeSAtLSBwYXJzZSgpXG59O190aGlzLkFWQz1uZXcgX2F2Y2RlbXV4Mi5kZWZhdWx0KHt2aWRlb1RyYWNrOl90aGlzLl92aWRlb1RyYWNrLG1lZGlhSW5mbzpfdGhpcy5fbWVkaWFJbmZvfSk7X3RoaXMuQUFDPW5ldyBfYWFjZGVtdXgyLmRlZmF1bHQoe2F1ZGlvVHJhY2s6X3RoaXMuX2F1ZGlvVHJhY2ssbWVkaWFJbmZvOl90aGlzLl9tZWRpYUluZm99KTtyZXR1cm4gX3RoaXM7fV9jcmVhdGVDbGFzcyhGTFZEZW11eCxbe2tleToncGFyc2UnLHZhbHVlOmZ1bmN0aW9uIHBhcnNlKGNodW5rQXJyYXkpe3ZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uPXRydWU7dmFyIF9kaWRJdGVyYXRvckVycm9yPWZhbHNlO3ZhciBfaXRlcmF0b3JFcnJvcj11bmRlZmluZWQ7dHJ5e2Zvcih2YXIgX2l0ZXJhdG9yPWNodW5rQXJyYXlbU3ltYm9sLml0ZXJhdG9yXSgpLF9zdGVwOyEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbj0oX3N0ZXA9X2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7X2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbj10cnVlKXt2YXIgY2h1bms9X3N0ZXAudmFsdWU7dmFyIGluZm89Y2h1bmsuaW5mbztzd2l0Y2goaW5mby50eXBlKXtjYXNlIHRoaXMuX3R5cGUuaGVhZGVyOnRoaXMuX21lZGlhSW5mby5oYXNWaWRlbz1pbmZvLmhhc1ZpZGVvO3RoaXMuX21lZGlhSW5mby5oYXNBdWRpbz1pbmZvLmhhc0F1ZGlvO2JyZWFrO2Nhc2UgdGhpcy5fdHlwZS52aWRlbzppZighdGhpcy5fbWVkaWFJbmZvLmhhc1ZpZGVvKXJldHVybiBsb2cudygnVGhlIEZMVmhlYWRlciBpbmRpY2F0ZXMgaGFzVmlkZW8gJyx0aGlzLl9oYXNWaWRlbywnIGJ1dCBhY2NpZGVudGFsbHkgZW5vdW50ZXIgYSB2aWRlbyB0YWcnLGNodW5rKTt0aGlzLl9wYXJzZVZpZGVvKGNodW5rKTticmVhaztjYXNlIHRoaXMuX3R5cGUuYXVkaW86aWYoIXRoaXMuX21lZGlhSW5mby5oYXNBdWRpbylyZXR1cm4gbG9nLncoJ1RoZSBGTFZoZWFkZXIgaW5kaWNhdGVzIGhhc1ZpZGVvICcsdGhpcy5faGFzQXVkaW8sJyBidXQgYWNjaWRlbnRhbGx5IGVub3VudGVyIGEgYXVkaW8gdGFnJyxjaHVuayk7dGhpcy5fcGFyc2VBdWRpbyhjaHVuayk7YnJlYWs7Y2FzZSB0aGlzLl90eXBlLnNjcmlwdDp0aGlzLl9wYXJzZVNjcmlwdChjaHVuayk7YnJlYWs7fX19Y2F0Y2goZXJyKXtfZGlkSXRlcmF0b3JFcnJvcj10cnVlO19pdGVyYXRvckVycm9yPWVycjt9ZmluYWxseXt0cnl7aWYoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24mJl9pdGVyYXRvci5yZXR1cm4pe19pdGVyYXRvci5yZXR1cm4oKTt9fWZpbmFsbHl7aWYoX2RpZEl0ZXJhdG9yRXJyb3Ipe3Rocm93IF9pdGVyYXRvckVycm9yO319fX19LHtrZXk6J19wYXJzZVZpZGVvJyx2YWx1ZTpmdW5jdGlvbiBfcGFyc2VWaWRlbyhjaHVuayl7dmFyIGJ1ZmZlcj1jaHVuay5idWZmZXIsaW5mbz1jaHVuay5pbmZvO2J1ZmZlcj1idWZmZXIuc2xpY2UoaW5mby5kYXRhT2Zmc2V0KTt2YXIgaGVhZGVyPW5ldyBEYXRhVmlldyhidWZmZXIpLmdldFVpbnQ4KDApLGZyYW1lVHlwZT0oaGVhZGVyJjI0MCk+Pj40LGNvZGVjSWQ9aGVhZGVyJjE1O2lmKGNvZGVjSWQhPT03KXtsb2cuZShcIkl0IGlzIG9ubHkgc3VwcG9ydCBBVkMgZm9ybWF0KDcpLCBidXQgeW91IHR5cGUgY29kZSBpcyBcIitjb2RlY0lkKTtyZXR1cm47fXRoaXMuQVZDLnBhcnNlKGJ1ZmZlci5zbGljZSgxKSxmcmFtZVR5cGUsY29kZWNJZCxpbmZvLnRpbWVTdGFtcCk7fX0se2tleTonX3BhcnNlQXVkaW8nLHZhbHVlOmZ1bmN0aW9uIF9wYXJzZUF1ZGlvKGNodW5rKXt2YXIgYnVmZmVyPWNodW5rLmJ1ZmZlcixpbmZvPWNodW5rLmluZm87YnVmZmVyPWJ1ZmZlci5zbGljZShpbmZvLmRhdGFPZmZzZXQpO3ZhciB2PW5ldyBEYXRhVmlldyhidWZmZXIpO3ZhciBzb3VuZFNwZWM9di5nZXRVaW50OCgwKTt2YXIgc291bmRGb3JtYXQ9c291bmRTcGVjPj4+NDtpZihzb3VuZEZvcm1hdCE9PTImJnNvdW5kRm9ybWF0IT09MTApey8vIG9ubHkgc3VwcG9ydCBNUDMgb3IgQUNDIGZvcm1hdFxubG9nLmUoJ3dlIGRvIG5vdCBzdXBwb3J0IHRoaXMgdHlwZScrc291bmRGb3JtYXQpO3JldHVybjt9dmFyIHNvdW5kUmF0ZT0oc291bmRTcGVjJjEyKT4+PjI7aWYoc291bmRSYXRlPj0wJiZzb3VuZFJhdGU8PTQpe3NvdW5kUmF0ZT10aGlzLl9mbHZTb3VuZFJhdGVUYWJsZVtzb3VuZFJhdGVdO31lbHNle2xvZy5lKCdJbnZhbGlkIHNvdW5kUmF0ZTogJytzb3VuZFJhdGUpO3JldHVybjt9dmFyIHNvdW5kU2l6ZT0oc291bmRTcGVjJjIpPj4+MTsvLyB1bnVzZWRcbnZhciBzb3VuZFR5cGU9c291bmRTcGVjJjE7dmFyIG1ldGE9dGhpcy5fYXVkaW9UcmFjay5tZXRhO21ldGEuYXVkaW9TYW1wbGVSYXRlPXNvdW5kUmF0ZTttZXRhLmNoYW5uZWxDb3VudD1zb3VuZFR5cGU9PT0wPzE6MjsvLyBtb25vIG9yIHN0ZXJlb1xudj1udWxsO2J1ZmZlcj1idWZmZXIuc2xpY2UoMSk7aWYoc291bmRGb3JtYXQ9PT0yKXsvLyBNUDNcbn1lbHNlIGlmKHNvdW5kRm9ybWF0PT09MTApey8vIEFBQ1xudGhpcy5BQUMucGFyc2UoYnVmZmVyKTt9fX0se2tleTonX3BhcnNlU2NyaXB0Jyx2YWx1ZTpmdW5jdGlvbiBfcGFyc2VTY3JpcHQoY2h1bmspe3ZhciBidWZmZXI9Y2h1bmsuYnVmZmVyLGluZm89Y2h1bmsuaW5mbzt2YXIgc2NyaXB0RGF0YT1fYW1mMi5kZWZhdWx0LnBhcnNlU2NyaXB0RGF0YShidWZmZXIsaW5mby5kYXRhT2Zmc2V0LGluZm8uZGF0YVNpemUpO09iamVjdC5hc3NpZ24odGhpcy5fbWVkaWFJbmZvLHNjcmlwdERhdGEub25NZXRhRGF0YSk7fX1dKTtyZXR1cm4gRkxWRGVtdXg7fShfYmFzZWluZm8yLmRlZmF1bHQpO2V4cG9ydHMuZGVmYXVsdD1GTFZEZW11eDtcblxuLyoqKi8gfSksXG4vKiAxNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLGtleSx2YWx1ZSl7aWYoa2V5IGluIG9iail7T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaixrZXkse3ZhbHVlOnZhbHVlLGVudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSx3cml0YWJsZTp0cnVlfSk7fWVsc2V7b2JqW2tleV09dmFsdWU7fXJldHVybiBvYmo7fWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fXZhciBUcmFja0luZm89ZnVuY3Rpb24oKXtmdW5jdGlvbiBUcmFja0luZm8oKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyxUcmFja0luZm8pO3RoaXMuX3ZpZGVvVHJhY2s9e3R5cGU6J3ZpZGVvJyxpZDoxLHNhbXBsZXM6W10sbGVuZ3RoOjAsLy8gdGhlIGRhdGEgbGVuZ3RoIG9mIHNhbXBsZXNcbm1ldGE6e3R5cGU6J3ZpZGVvJyxpZDoxLHRpbWVzY2FsZToxMDAwLGR1cmF0aW9uOjAsY29kZWM6JycscmVmU2FtcGxlRHVyYXRpb246bnVsbCxhdmNjOicnLC8vIHVzZWQgZm9yIHN0c2QgYm94XG5jb2RlY1dpZHRoOicnLGNvZGVjSGVpZ2h0OicnLHByZXNlbnRXaWR0aDowLHByZXNlbnRIZWlnaHQ6MH19O3RoaXMuX2F1ZGlvVHJhY2s9e3R5cGU6J2F1ZGlvJyxpZDoyLHNlcXVlbmNlTnVtYmVyOjAsc2FtcGxlczpbXSxsZW5ndGg6MCxtZXRhOl9kZWZpbmVQcm9wZXJ0eSh7dHlwZTonYXVkaW8nLGlkOjIsdGltZXNjYWxlOjEwMDAsZHVyYXRpb246MCxjb2RlYzonJyxyZWZTYW1wbGVEdXJhdGlvbjpudWxsLGF1ZGlvU2FtcGxlUmF0ZTpudWxsLGNvbmZpZzpudWxsLC8vIHVzXG5jaGFubmVsQ291bnQ6bnVsbH0sJ2NvZGVjJyxudWxsKX07dGhpcy5fZmx2U291bmRSYXRlVGFibGU9WzU1MDAsMTEwMjUsMjIwNTAsNDQxMDAsNDgwMDBdOy8vIDUuNWtIen40NGtIelxudGhpcy5faGFzVmlkZW87dGhpcy5faGFzQXVkaW87dGhpcy5fbWVkaWFJbmZvPXthdWRpb2NvZGVjaWQ6MTAsYXVkaW9kYXRhcmF0ZTo2Mi41LGF1ZGlvc2FtcGxlcmF0ZTo0ODAwMCxhdWRpb3NhbXBsZXNpemU6MTYsZHVyYXRpb246MCxlbmNvZGVyOlwiTGF2ZjU3LjU2LjEwMVwiLGZpbGVzaXplOjAsaGVpZ2h0OjY0MCxzdGVyZW86dHJ1ZSx2aWRlb2NvZGVjaWQ6Nyx2aWRlb2RhdGFyYXRlOjExNzEuODc1LHdpZHRoOjM2OCxoYXNWaWRlbzpmYWxzZSxoYXNBdWRpbzpmYWxzZX07fV9jcmVhdGVDbGFzcyhUcmFja0luZm8sW3trZXk6J3ZpZGVvVHJhY2snLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gdGhpcy5fdmlkZW9UcmFjazt9fSx7a2V5OidhdWRpb1RyYWNrJyxnZXQ6ZnVuY3Rpb24gZ2V0KCl7cmV0dXJuIHRoaXMuX2F1ZGlvVHJhY2s7fX0se2tleTonbWVkaWFJbmZvJyxnZXQ6ZnVuY3Rpb24gZ2V0KCl7cmV0dXJuIHRoaXMuX21lZGlhSW5mbzt9fSx7a2V5OidNSU1FJyxnZXQ6ZnVuY3Rpb24gZ2V0KCl7cmV0dXJuJ3ZpZGVvL21wNDsgY29kZWNzPVwiJyt0aGlzLl92aWRlb1RyYWNrLm1ldGEuY29kZWMrJywnK3RoaXMuX2F1ZGlvVHJhY2subWV0YS5jb2RlYysnXCInO319LHtrZXk6J3ZpZGVvTUlNRScsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybid2aWRlby9tcDQ7IGNvZGVjcz1cIicrdGhpcy5fdmlkZW9UcmFjay5tZXRhLmNvZGVjKydcIic7fX0se2tleTonYXVkaW9NSU1FJyxnZXQ6ZnVuY3Rpb24gZ2V0KCl7cmV0dXJuJ3ZpZGVvL21wNDsgY29kZWNzPVwiJyt0aGlzLl9hdWRpb1RyYWNrLm1ldGEuY29kZWMrJ1wiJzt9fV0pO3JldHVybiBUcmFja0luZm87fSgpO2V4cG9ydHMuZGVmYXVsdD1UcmFja0luZm87XG5cbi8qKiovIH0pLFxuLyogMTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3ZhciBfbG9nPV9fd2VicGFja19yZXF1aXJlX18oMCk7dmFyIF9sb2cyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvZyk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9O312YXIgbG9nPW5ldyBfbG9nMi5kZWZhdWx0KCdBTUYnKTt2YXIgQU1GPXtwYXJzZVNjcmlwdERhdGE6ZnVuY3Rpb24gcGFyc2VTY3JpcHREYXRhKGFycmF5QnVmZmVyLGRhdGFPZmZzZXQsZGF0YVNpemUpe3ZhciBkYXRhPXt9O3RyeXt2YXIgbmFtZT1BTUYucGFyc2VWYWx1ZShhcnJheUJ1ZmZlcixkYXRhT2Zmc2V0LGRhdGFTaXplKTt2YXIgdmFsdWU9QU1GLnBhcnNlVmFsdWUoYXJyYXlCdWZmZXIsZGF0YU9mZnNldCtuYW1lLnNpemUsZGF0YVNpemUtbmFtZS5zaXplKTtkYXRhW25hbWUuZGF0YV09dmFsdWUuZGF0YTt9Y2F0Y2goZSl7bG9nLmUoJ0FNRicsZS50b1N0cmluZygpKTt9cmV0dXJuIGRhdGE7fSxwYXJzZU9iamVjdDpmdW5jdGlvbiBwYXJzZU9iamVjdChhcnJheUJ1ZmZlcixkYXRhT2Zmc2V0LGRhdGFTaXplKXtpZihkYXRhU2l6ZTwzKXt0aHJvdyBuZXcgRXJyb3IoJ0RhdGEgbm90IGVub3VnaCB3aGVuIHBhcnNlIFNjcmlwdERhdGFPYmplY3QnKTt9dmFyIG5hbWU9QU1GLnBhcnNlU3RyaW5nKGFycmF5QnVmZmVyLGRhdGFPZmZzZXQsZGF0YVNpemUpO3ZhciB2YWx1ZT1BTUYucGFyc2VWYWx1ZShhcnJheUJ1ZmZlcixkYXRhT2Zmc2V0K25hbWUuc2l6ZSxkYXRhU2l6ZS1uYW1lLnNpemUpO3ZhciBpc09iamVjdEVuZD12YWx1ZS5vYmplY3RFbmQ7cmV0dXJue2RhdGE6e25hbWU6bmFtZS5kYXRhLHZhbHVlOnZhbHVlLmRhdGF9LHNpemU6bmFtZS5zaXplK3ZhbHVlLnNpemUsb2JqZWN0RW5kOmlzT2JqZWN0RW5kfTt9LHBhcnNlVmFyaWFibGU6ZnVuY3Rpb24gcGFyc2VWYXJpYWJsZShhcnJheUJ1ZmZlcixkYXRhT2Zmc2V0LGRhdGFTaXplKXtyZXR1cm4gQU1GLnBhcnNlT2JqZWN0KGFycmF5QnVmZmVyLGRhdGFPZmZzZXQsZGF0YVNpemUpO30scGFyc2VTdHJpbmc6ZnVuY3Rpb24gcGFyc2VTdHJpbmcoYXJyYXlCdWZmZXIsZGF0YU9mZnNldCxkYXRhU2l6ZSl7aWYoZGF0YVNpemU8Mil7dGhyb3cgbmV3IEVycm9yKCdEYXRhIG5vdCBlbm91Z2ggd2hlbiBwYXJzZSBTdHJpbmcnKTt9dmFyIHY9bmV3IERhdGFWaWV3KGFycmF5QnVmZmVyLGRhdGFPZmZzZXQsZGF0YVNpemUpO3ZhciBsZW5ndGg9di5nZXRVaW50MTYoMCk7dmFyIHN0cj12b2lkIDA7aWYobGVuZ3RoPjApe3N0cj1BTUYuZGVjb2RlVVRGOChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcixkYXRhT2Zmc2V0KzIsbGVuZ3RoKSk7fWVsc2V7c3RyPScnO31yZXR1cm57ZGF0YTpzdHIsc2l6ZToyK2xlbmd0aH07fSxwYXJzZUxvbmdTdHJpbmc6ZnVuY3Rpb24gcGFyc2VMb25nU3RyaW5nKGFycmF5QnVmZmVyLGRhdGFPZmZzZXQsZGF0YVNpemUpe2lmKGRhdGFTaXplPDQpe3Rocm93IG5ldyBFcnJvcignRGF0YSBub3QgZW5vdWdoIHdoZW4gcGFyc2UgTG9uZ1N0cmluZycpO312YXIgdj1uZXcgRGF0YVZpZXcoYXJyYXlCdWZmZXIsZGF0YU9mZnNldCxkYXRhU2l6ZSk7dmFyIGxlbmd0aD12LmdldFVpbnQzMigwKTt2YXIgc3RyPXZvaWQgMDtpZihsZW5ndGg+MCl7c3RyPUFNRi5kZWNvZGVVVEY4KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyLGRhdGFPZmZzZXQrNCxsZW5ndGgpKTt9ZWxzZXtzdHI9Jyc7fXJldHVybntkYXRhOnN0cixzaXplOjQrbGVuZ3RofTt9LHBhcnNlRGF0ZTpmdW5jdGlvbiBwYXJzZURhdGUoYXJyYXlCdWZmZXIsZGF0YU9mZnNldCxkYXRhU2l6ZSl7aWYoZGF0YVNpemU8MTApe3Rocm93IG5ldyBFcnJvcignRGF0YSBzaXplIGludmFsaWQgd2hlbiBwYXJzZSBEYXRlJyk7fXZhciB2PW5ldyBEYXRhVmlldyhhcnJheUJ1ZmZlcixkYXRhT2Zmc2V0LGRhdGFTaXplKTt2YXIgdGltZXN0YW1wPXYuZ2V0RmxvYXQ2NCgwKTt2YXIgbG9jYWxUaW1lT2Zmc2V0PXYuZ2V0SW50MTYoOCk7dGltZXN0YW1wKz1sb2NhbFRpbWVPZmZzZXQqNjAqMTAwMDsvLyBnZXQgVVRDIHRpbWVcbnJldHVybntkYXRhOm5ldyBEYXRlKHRpbWVzdGFtcCksc2l6ZTo4KzJ9O30scGFyc2VWYWx1ZTpmdW5jdGlvbiBwYXJzZVZhbHVlKGFycmF5QnVmZmVyLGRhdGFPZmZzZXQsZGF0YVNpemUpe2lmKGRhdGFTaXplPDEpe3Rocm93IG5ldyBFcnJvcignRGF0YSBub3QgZW5vdWdoIHdoZW4gcGFyc2UgVmFsdWUnKTt9dmFyIHY9bmV3IERhdGFWaWV3KGFycmF5QnVmZmVyLGRhdGFPZmZzZXQsZGF0YVNpemUpO3ZhciBvZmZzZXQ9MTt2YXIgdHlwZT12LmdldFVpbnQ4KDApO3ZhciB2YWx1ZT12b2lkIDA7dmFyIG9iamVjdEVuZD1mYWxzZTt0cnl7c3dpdGNoKHR5cGUpe2Nhc2UgMDovLyBOdW1iZXIoRG91YmxlKSB0eXBlXG52YWx1ZT12LmdldEZsb2F0NjQoMSk7b2Zmc2V0Kz04O2JyZWFrO2Nhc2UgMTp7Ly8gQm9vbGVhbiB0eXBlXG52YXIgYj12LmdldFVpbnQ4KDEpO3ZhbHVlPWI/dHJ1ZTpmYWxzZTtvZmZzZXQrPTE7YnJlYWs7fWNhc2UgMjp7Ly8gU3RyaW5nIHR5cGVcbnZhciBhbWZzdHI9QU1GLnBhcnNlU3RyaW5nKGFycmF5QnVmZmVyLGRhdGFPZmZzZXQrMSxkYXRhU2l6ZS0xKTt2YWx1ZT1hbWZzdHIuZGF0YTtvZmZzZXQrPWFtZnN0ci5zaXplO2JyZWFrO31jYXNlIDM6ey8vIE9iamVjdChzKSB0eXBlXG52YWx1ZT17fTt2YXIgdGVybWluYWw9MDsvLyB3b3JrYXJvdW5kIGZvciBtYWxmb3JtZWQgT2JqZWN0cyB3aGljaCBoYXMgbWlzc2luZyBTY3JpcHREYXRhT2JqZWN0RW5kXG5pZigodi5nZXRVaW50MzIoZGF0YVNpemUtNCkmMHgwMEZGRkZGRik9PT05KXt0ZXJtaW5hbD0zO313aGlsZShvZmZzZXQ8ZGF0YVNpemUtNCl7Ly8gNCA9PT0gdHlwZShVSTgpICsgU2NyaXB0RGF0YU9iamVjdEVuZChVSTI0KVxudmFyIGFtZm9iaj1BTUYucGFyc2VPYmplY3QoYXJyYXlCdWZmZXIsZGF0YU9mZnNldCtvZmZzZXQsZGF0YVNpemUtb2Zmc2V0LXRlcm1pbmFsKTtpZihhbWZvYmoub2JqZWN0RW5kKWJyZWFrO3ZhbHVlW2FtZm9iai5kYXRhLm5hbWVdPWFtZm9iai5kYXRhLnZhbHVlO29mZnNldCs9YW1mb2JqLnNpemU7fWlmKG9mZnNldDw9ZGF0YVNpemUtMyl7dmFyIG1hcmtlcj12LmdldFVpbnQzMihvZmZzZXQtMSkmMHgwMEZGRkZGRjtpZihtYXJrZXI9PT05KXtvZmZzZXQrPTM7fX1icmVhazt9Y2FzZSA4OnsvLyBFQ01BIGFycmF5IHR5cGUgKE1peGVkIGFycmF5KVxudmFsdWU9e307b2Zmc2V0Kz00Oy8vIEVDTUFBcnJheUxlbmd0aChVSTMyKVxudmFyIF90ZXJtaW5hbD0wOy8vIHdvcmthcm91bmQgZm9yIG1hbGZvcm1lZCBNaXhlZEFycmF5cyB3aGljaCBoYXMgbWlzc2luZyBTY3JpcHREYXRhT2JqZWN0RW5kXG5pZigodi5nZXRVaW50MzIoZGF0YVNpemUtNCkmMHgwMEZGRkZGRik9PT05KXtfdGVybWluYWw9Mzt9d2hpbGUob2Zmc2V0PGRhdGFTaXplLTgpey8vIDggPT09IHR5cGUoVUk4KSArIEVDTUFBcnJheUxlbmd0aChVSTMyKSArIFNjcmlwdERhdGFWYXJpYWJsZUVuZChVSTI0KVxudmFyIGFtZnZhcj1BTUYucGFyc2VWYXJpYWJsZShhcnJheUJ1ZmZlcixkYXRhT2Zmc2V0K29mZnNldCxkYXRhU2l6ZS1vZmZzZXQtX3Rlcm1pbmFsKTtpZihhbWZ2YXIub2JqZWN0RW5kKWJyZWFrO3ZhbHVlW2FtZnZhci5kYXRhLm5hbWVdPWFtZnZhci5kYXRhLnZhbHVlO29mZnNldCs9YW1mdmFyLnNpemU7fWlmKG9mZnNldDw9ZGF0YVNpemUtMyl7dmFyIF9tYXJrZXI9di5nZXRVaW50MzIob2Zmc2V0LTEpJjB4MDBGRkZGRkY7aWYoX21hcmtlcj09PTkpe29mZnNldCs9Mzt9fWJyZWFrO31jYXNlIDk6Ly8gU2NyaXB0RGF0YU9iamVjdEVuZFxudmFsdWU9dW5kZWZpbmVkO29mZnNldD0xO29iamVjdEVuZD10cnVlO2JyZWFrO2Nhc2UgMTA6ey8vIFN0cmljdCBhcnJheSB0eXBlXG4vLyBTY3JpcHREYXRhVmFsdWVbbl0uIE5PVEU6IGFjY29yZGluZyB0byB2aWRlb19maWxlX2Zvcm1hdF9zcGVjX3YxMF8xLnBkZlxudmFsdWU9W107dmFyIHN0cmljdEFycmF5TGVuZ3RoPXYuZ2V0VWludDMyKDEpO29mZnNldCs9NDtmb3IodmFyIGk9MDtpPHN0cmljdEFycmF5TGVuZ3RoO2krKyl7dmFyIHZhbD1BTUYucGFyc2VWYWx1ZShhcnJheUJ1ZmZlcixkYXRhT2Zmc2V0K29mZnNldCxkYXRhU2l6ZS1vZmZzZXQpO3ZhbHVlLnB1c2godmFsLmRhdGEpO29mZnNldCs9dmFsLnNpemU7fWJyZWFrO31jYXNlIDExOnsvLyBEYXRlIHR5cGVcbnZhciBkYXRlPUFNRi5wYXJzZURhdGUoYXJyYXlCdWZmZXIsZGF0YU9mZnNldCsxLGRhdGFTaXplLTEpO3ZhbHVlPWRhdGUuZGF0YTtvZmZzZXQrPWRhdGUuc2l6ZTticmVhazt9Y2FzZSAxMjp7Ly8gTG9uZyBzdHJpbmcgdHlwZVxudmFyIGFtZkxvbmdTdHI9QU1GLnBhcnNlU3RyaW5nKGFycmF5QnVmZmVyLGRhdGFPZmZzZXQrMSxkYXRhU2l6ZS0xKTt2YWx1ZT1hbWZMb25nU3RyLmRhdGE7b2Zmc2V0Kz1hbWZMb25nU3RyLnNpemU7YnJlYWs7fWRlZmF1bHQ6Ly8gaWdub3JlIGFuZCBza2lwXG5vZmZzZXQ9ZGF0YVNpemU7bG9nLncoJ0FNRicsJ1Vuc3VwcG9ydGVkIEFNRiB2YWx1ZSB0eXBlICcrdHlwZSk7fX1jYXRjaChlKXtsb2cuZSgnQU1GJyxlLnRvU3RyaW5nKCkpO31yZXR1cm57ZGF0YTp2YWx1ZSxzaXplOm9mZnNldCxvYmplY3RFbmQ6b2JqZWN0RW5kfTt9LGRlY29kZVVURjg6ZnVuY3Rpb24gZGVjb2RlVVRGOChkYXRhKXt2YXIgcmVzdWx0PVwiXCI7dmFyIGk9MDt2YXIgYz0wO3ZhciBjMT0wO3ZhciBjMj0wOy8vIElmIHdlIGhhdmUgYSBCT00gc2tpcCBpdFxuaWYoZGF0YS5sZW5ndGg+PTMmJmRhdGFbMF09PT0weGVmJiZkYXRhWzFdPT09MHhiYiYmZGF0YVsyXT09PTB4YmYpe2k9Mzt9d2hpbGUoaTxkYXRhLmxlbmd0aCl7Yz1kYXRhW2ldO2lmKGM8MTI4KXtyZXN1bHQrPVN0cmluZy5mcm9tQ2hhckNvZGUoYyk7aSsrO31lbHNlIGlmKGM+MTkxJiZjPDIyNCl7aWYoaSsxPj1kYXRhLmxlbmd0aCl7dGhyb3dcIlVURi04IERlY29kZSBmYWlsZWQuIFR3byBieXRlIGNoYXJhY3RlciB3YXMgdHJ1bmNhdGVkLlwiO31jMj1kYXRhW2krMV07cmVzdWx0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKChjJjMxKTw8NnxjMiY2Myk7aSs9Mjt9ZWxzZXtpZihpKzI+PWRhdGEubGVuZ3RoKXt0aHJvd1wiVVRGLTggRGVjb2RlIGZhaWxlZC4gTXVsdGkgYnl0ZSBjaGFyYWN0ZXIgd2FzIHRydW5jYXRlZC5cIjt9YzI9ZGF0YVtpKzFdO2MzPWRhdGFbaSsyXTtyZXN1bHQrPVN0cmluZy5mcm9tQ2hhckNvZGUoKGMmMTUpPDwxMnwoYzImNjMpPDw2fGMzJjYzKTtpKz0zO319cmV0dXJuIHJlc3VsdDt9fTtleHBvcnRzLmRlZmF1bHQ9QU1GO1xuXG4vKioqLyB9KSxcbi8qIDE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQscHJvcHMpe2Zvcih2YXIgaT0wO2k8cHJvcHMubGVuZ3RoO2krKyl7dmFyIGRlc2NyaXB0b3I9cHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlPWRlc2NyaXB0b3IuZW51bWVyYWJsZXx8ZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGU9dHJ1ZTtpZihcInZhbHVlXCJpbiBkZXNjcmlwdG9yKWRlc2NyaXB0b3Iud3JpdGFibGU9dHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpO319cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe2lmKHByb3RvUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUscHJvdG9Qcm9wcyk7aWYoc3RhdGljUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO307fSgpO3ZhciBfbG9nPV9fd2VicGFja19yZXF1aXJlX18oMCk7dmFyIF9sb2cyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvZyk7dmFyIF91dGlscz1fX3dlYnBhY2tfcmVxdWlyZV9fKDcpO3ZhciBfc3BzX3BhcnNlPV9fd2VicGFja19yZXF1aXJlX18oMTcpO3ZhciBfc3BzX3BhcnNlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zcHNfcGFyc2UpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfTt9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319dmFyIGxvZz1uZXcgX2xvZzIuZGVmYXVsdCgnQVZDRGVtdXgnKTt2YXIgQVZDRGVtdXg9ZnVuY3Rpb24oKXtmdW5jdGlvbiBBVkNEZW11eChfcmVmKXt2YXIgdmlkZW9UcmFjaz1fcmVmLnZpZGVvVHJhY2ssbWVkaWFJbmZvPV9yZWYubWVkaWFJbmZvO19jbGFzc0NhbGxDaGVjayh0aGlzLEFWQ0RlbXV4KTt0aGlzLl92aWRlb1RyYWNrPXZpZGVvVHJhY2s7dGhpcy5fbWVkaWFJbmZvPW1lZGlhSW5mbzsvLyBzZXQgdGhlIGRlZmF1bHQgZnJhbWUgcmF0ZSBpZiBpcyBub3QgZml4ZWRcbnRoaXMuX3JlZmVyZW5jZUZyYW1lUmF0ZT17Zml4ZWQ6dHJ1ZSxmcHM6MjMuOTc2LGZwc19udW06MjM5NzYsZnBzX2RlbjoxMDAwfTt0aGlzLl9uYWx1TGVuZ3RoU2l6ZT00O3RoaXMuX3RpbWVzdGFtcEJhc2U9MDt0aGlzLl9rZXlGcmFtZT17MTp0cnVlLDI6ZmFsc2V9O31fY3JlYXRlQ2xhc3MoQVZDRGVtdXgsW3trZXk6J3BhcnNlJyx2YWx1ZTpmdW5jdGlvbiBwYXJzZShjaHVuayxmcmFtZVR5cGUsY29kZWNJZCx0aW1lU3RhbXApe3ZhciB2PW5ldyBEYXRhVmlldyhjaHVuayk7dmFyIHR5cGU9di5nZXRVaW50OCgwKSxjdHM9di5nZXRVaW50MzIoMCkmMHgwMEZGRkZGRjt2PW51bGw7Y2h1bms9Y2h1bmsuc2xpY2UoNCk7c3dpdGNoKHR5cGUpe2Nhc2UgMDp0aGlzLl9wYXJzZUNvbmZpZyhjaHVuayk7YnJlYWs7Y2FzZSAxOnRoaXMuX3BhcnNlQVZDKGNodW5rLHtjdHM6Y3RzLGZyYW1lVHlwZTpmcmFtZVR5cGUsdGltZVN0YW1wOnRpbWVTdGFtcH0pO2JyZWFrO2Nhc2UgMjovLyBlbXB0eVxufX0vKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0geyp9IGNodW5rIFxuICAgICAqIEBwYXJhbSB7Kn0gT2JqZWN0XG4gICAgICovfSx7a2V5OidfcGFyc2VBVkMnLHZhbHVlOmZ1bmN0aW9uIF9wYXJzZUFWQyhjaHVuayxfcmVmMil7dmFyIGN0cz1fcmVmMi5jdHMsZnJhbWVUeXBlPV9yZWYyLmZyYW1lVHlwZSx0aW1lU3RhbXA9X3JlZjIudGltZVN0YW1wO3ZhciB2PW5ldyBEYXRhVmlldyhjaHVuayk7dmFyIHNsaWNlcz1bXSxkYXRhU2l6ZT1jaHVuay5ieXRlTGVuZ3RoLG9mZnNldD0wO3ZhciBrZXlGcmFtZT0hIXRoaXMuX2tleUZyYW1lW2ZyYW1lVHlwZV07dmFyIG5hbHVMZW49dGhpcy5fbmFsdUxlbmd0aFNpemU7dmFyIGR0cz10aGlzLl90aW1lc3RhbXBCYXNlO3RoaXMuX3RpbWVzdGFtcEJhc2UrPXRoaXMuX3ZpZGVvVHJhY2subWV0YS5yZWZTYW1wbGVEdXJhdGlvbjt3aGlsZShvZmZzZXQ8ZGF0YVNpemUpe2lmKG9mZnNldCs0Pj1kYXRhU2l6ZSl7bG9nLncoJ25vdCBlbm91Z2h0IGRhdGEgdG8gcGFyc2UnKTticmVhazsvLyBkYXRhIG5vdCBlbm91Z2ggZm9yIG5leHQgTmFsdVxufS8vIEFWQzEgZGVjb2RlXG52YXIgbmFsdVNpemU9di5nZXRVaW50MzIob2Zmc2V0KTsvLyBCaWctRW5kaWFuIHJlYWRcbmlmKG5hbHVMZW49PT0zKXtuYWx1U2l6ZT4+Pj04O31pZihuYWx1U2l6ZT5kYXRhU2l6ZS1uYWx1TGVuKXtsb2cudygnaW52YWxpZCBuYWx1IHZhbHVlJyk7cmV0dXJuO312YXIgc2xpY2VUeXBlPXYuZ2V0VWludDgob2Zmc2V0K25hbHVMZW4pJjB4MUY7aWYoc2xpY2VUeXBlPT09NSl7Ly8gP1xua2V5RnJhbWU9dHJ1ZTt9dmFyIGRhdGE9bmV3IFVpbnQ4QXJyYXkoY2h1bmssb2Zmc2V0LG5hbHVMZW4rbmFsdVNpemUpO3NsaWNlcy5wdXNoKGRhdGEpO29mZnNldCs9bmFsdUxlbituYWx1U2l6ZTt9c2xpY2VzPV91dGlscy5tZXJnZVR5cGVkQXJyYXkuYXBwbHkobnVsbCxzbGljZXMpO2lmKHNsaWNlcy5sZW5ndGgpe3RoaXMuX3ZpZGVvVHJhY2suc2FtcGxlcy5wdXNoKHtzbGljZXM6c2xpY2VzLGxlbmd0aDpvZmZzZXQsa2V5RnJhbWU6a2V5RnJhbWUsZHRzOmR0cyxjdHM6Y3RzLHB0czpkdHMrY3RzfSk7dGhpcy5fdmlkZW9UcmFjay5sZW5ndGgrPW9mZnNldDt9fX0se2tleTonX3BhcnNlQ29uZmlnJyx2YWx1ZTpmdW5jdGlvbiBfcGFyc2VDb25maWcoY2h1bmspe3ZhciB2PW5ldyBEYXRhVmlldyhjaHVuayk7dmFyIHZlcnNpb249di5nZXRVaW50OCgwKTsvLyBjb25maWd1cmF0aW9uVmVyc2lvblxudmFyIGF2Y1Byb2ZpbGU9di5nZXRVaW50OCgxKTsvLyBhdmNQcm9maWxlSW5kaWNhdGlvblxudmFyIHByb2ZpbGVDb21wYXRpYmlsaXR5PXYuZ2V0VWludDgoMik7Ly8gcHJvZmlsZV9jb21wYXRpYmlsaXR5XG52YXIgYXZjTGV2ZWw9di5nZXRVaW50OCgzKTsvLyBBVkNMZXZlbEluZGljYXRpb25cbmlmKHZlcnNpb24hPT0xfHxhdmNQcm9maWxlPT09MCl7bG9nLmUoJ0ludmFsaWQgQVZDRGVjb2RlckNvbmZpZ3VyYXRpb25SZWNvcmQnKTtyZXR1cm47fXZhciBuYWx1X2xlbj10aGlzLl9uYWx1TGVuZ3RoU2l6ZT0odi5nZXRVaW50OCg0KSYzKSsxOy8vIGxlbmd0aFNpemVQbHVzT25lXG5pZihuYWx1X2xlbiE9PTMmJm5hbHVfbGVuIT09NCl7bG9nLmUoJ0ludmFsaWQgTmFsdUxlbmd0aFNpemVNaW51c09uZTogJytuYWx1X2xlbik7cmV0dXJuO312YXIgc3BzQ291bnQ9di5nZXRVaW50OCg1KSYzMTsvLyBnZXQgU2VxdWVuY2VQYXJhbWV0ZXJTZXRzIGNvdW50XG5pZihzcHNDb3VudD09PTApe2xvZy5lKCd0aGUgU2VxdWVuY2VQYXJhbWV0ZXJTZXRzIGNvdW50IGNvdWxkblwidCBiZSAwJyk7cmV0dXJuO31lbHNlIGlmKHNwc0NvdW50PjEpe2xvZy5lKCdzdHJhbmdlIGNvdW50IG9mIFNQUywgaXQgc2hvdWxkIGJlIDEgYXMgdXN1YWwnKTt9Ly8gc2tpcCBvdmVyIDZCIGhlYWRlclxudmFyIG9mZnNldD02Oy8vIHN0YXJ0IHRvIGRlY29kZSBTUFMgdXN1YWxseSBoYXMgb25seSBvbmUgU1BTXG5mb3IodmFyIGk9MDtpPHNwc0NvdW50O2krKyl7Ly8gc2tpcCBvdmVyIGRlY29kaW5nIG90aGVyIHN0cmFuZ2UgQVZDRGVjb2RlckNvbmZpZ3VyYXRpb25SZWNvcmRcbmlmKGk+MCljb250aW51ZTsvLyB0aGUgZGl2aWRlZCBmbGFnIGlzIG5vdCB0aGUgc3RhcnQgY29kZSAwMCAwMCAwMCAwMSwgYnV0IHRoZSA0QiBsZW5ndGggb2YgU1BTXG52YXIgc3BzTGVuPXYuZ2V0VWludDE2KG9mZnNldCk7b2Zmc2V0Kz0yO2lmKCFzcHNMZW4pY29udGludWU7dmFyIHNwcz1uZXcgVWludDhBcnJheShjaHVuayxvZmZzZXQsc3BzTGVuKTtvZmZzZXQrPXNwc0xlbjt2YXIgbWV0YUluZm89X3Nwc19wYXJzZTIuZGVmYXVsdC5wYXJzZVNQUyhzcHMpO3RoaXMuX2V4dHJhY2tJbmZvKG1ldGFJbmZvLHNwcyk7fXRoaXMuX3ZpZGVvVHJhY2subWV0YS5hdmNjPW5ldyBVaW50OEFycmF5KGNodW5rKTtjb25zb2xlLmxvZygncGFyc2VkIGFscmVhZHksICcsdGhpcy5fdmlkZW9UcmFjayk7fX0se2tleTonX2V4dHJhY2tJbmZvJyx2YWx1ZTpmdW5jdGlvbiBfZXh0cmFja0luZm8oc3BzSW5mbyxzcHMpe3ZhciBtZXRhPXRoaXMuX3ZpZGVvVHJhY2subWV0YTttZXRhLnNwc0luZm89c3BzSW5mbzttZXRhLmNvZGVjV2lkdGg9c3BzSW5mby5jb2RlY19zaXplLndpZHRoO21ldGEuY29kZWNIZWlnaHQ9c3BzSW5mby5jb2RlY19zaXplLmhlaWdodDttZXRhLnByZXNlbnRXaWR0aD1zcHNJbmZvLnByZXNlbnRfc2l6ZS53aWR0aDttZXRhLnByZXNlbnRIZWlnaHQ9c3BzSW5mby5wcmVzZW50X3NpemUuaGVpZ2h0O2NvbnNvbGUubG9nKHNwc0luZm8pO2lmKHNwc0luZm8uZnJhbWVfcmF0ZS5maXhlZD09PWZhbHNlfHxzcHNJbmZvLmZyYW1lX3JhdGUuZnBzX251bT09PTB8fHNwc0luZm8uZnJhbWVfcmF0ZS5mcHNfZGVuPT09MCl7bWV0YS5mcmFtZVJhdGU9dGhpcy5fcmVmZXJlbmNlRnJhbWVSYXRlO312YXIgX21ldGEkZnJhbWVSYXRlPW1ldGEuZnJhbWVSYXRlLGZwc19kZW49X21ldGEkZnJhbWVSYXRlLmZwc19kZW4sZnBzX251bT1fbWV0YSRmcmFtZVJhdGUuZnBzX251bTttZXRhLnJlZlNhbXBsZUR1cmF0aW9uPU1hdGguZmxvb3IobWV0YS50aW1lc2NhbGUqKGZwc19kZW4vZnBzX251bSkpOy8vIGdldCBBVkMgY29kZWNcbnZhciBjb2RlY0FycmF5PXNwcy5zdWJhcnJheSgxLDQpO3ZhciBjb2RlY1N0cmluZz0nYXZjMS4nO2Zvcih2YXIgaj0wO2o8MztqKyspe3ZhciBoPWNvZGVjQXJyYXlbal0udG9TdHJpbmcoMTYpO2lmKGgubGVuZ3RoPDIpe2g9JzAnK2g7fWNvZGVjU3RyaW5nKz1oO31tZXRhLmNvZGVjPWNvZGVjU3RyaW5nO319XSk7cmV0dXJuIEFWQ0RlbXV4O30oKTtleHBvcnRzLmRlZmF1bHQ9QVZDRGVtdXg7XG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fTt9KCk7dmFyIF9leHBfZ29sb21iPV9fd2VicGFja19yZXF1aXJlX18oMTgpO3ZhciBfZXhwX2dvbG9tYjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhwX2dvbG9tYik7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9O31mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX12YXIgU1BTUGFyc2VyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gU1BTUGFyc2VyKCl7X2NsYXNzQ2FsbENoZWNrKHRoaXMsU1BTUGFyc2VyKTt9X2NyZWF0ZUNsYXNzKFNQU1BhcnNlcixudWxsLFt7a2V5OidfZWJzcDJyYnNwJyx2YWx1ZTpmdW5jdGlvbiBfZWJzcDJyYnNwKHVpbnQ4YXJyYXkpe3ZhciBzcmM9dWludDhhcnJheTt2YXIgc3JjX2xlbmd0aD1zcmMuYnl0ZUxlbmd0aDt2YXIgZHN0PW5ldyBVaW50OEFycmF5KHNyY19sZW5ndGgpO3ZhciBkc3RfaWR4PTA7Zm9yKHZhciBpPTA7aTxzcmNfbGVuZ3RoO2krKyl7aWYoaT49Mil7Ly8gVW5lc2NhcGU6IFNraXAgMHgwMyBhZnRlciAwMCAwMFxuaWYoc3JjW2ldPT09MHgwMyYmc3JjW2ktMV09PT0weDAwJiZzcmNbaS0yXT09PTB4MDApe2NvbnRpbnVlO319ZHN0W2RzdF9pZHhdPXNyY1tpXTtkc3RfaWR4Kys7fXJldHVybiBuZXcgVWludDhBcnJheShkc3QuYnVmZmVyLDAsZHN0X2lkeCk7fX0se2tleToncGFyc2VTUFMnLHZhbHVlOmZ1bmN0aW9uIHBhcnNlU1BTKHVpbnQ4YXJyYXkpe3ZhciByYnNwPVNQU1BhcnNlci5fZWJzcDJyYnNwKHVpbnQ4YXJyYXkpO3ZhciBnYj1uZXcgX2V4cF9nb2xvbWIyLmRlZmF1bHQocmJzcCk7Z2IucmVhZEJ5dGUoKTt2YXIgcHJvZmlsZV9pZGM9Z2IucmVhZEJ5dGUoKTsvLyBwcm9maWxlX2lkY1xuZ2IucmVhZEJ5dGUoKTsvLyBjb25zdHJhaW50X3NldF9mbGFnc1s1XSArIHJlc2VydmVkX3plcm9bM11cbnZhciBsZXZlbF9pZGM9Z2IucmVhZEJ5dGUoKTsvLyBsZXZlbF9pZGNcbmdiLnJlYWRVRUcoKTsvLyBzZXFfcGFyYW1ldGVyX3NldF9pZFxudmFyIHByb2ZpbGVfc3RyaW5nPVNQU1BhcnNlci5nZXRQcm9maWxlU3RyaW5nKHByb2ZpbGVfaWRjKTt2YXIgbGV2ZWxfc3RyaW5nPVNQU1BhcnNlci5nZXRMZXZlbFN0cmluZyhsZXZlbF9pZGMpO3ZhciBjaHJvbWFfZm9ybWF0X2lkYz0xO3ZhciBjaHJvbWFfZm9ybWF0PTQyMDt2YXIgY2hyb21hX2Zvcm1hdF90YWJsZT1bMCw0MjAsNDIyLDQ0NF07dmFyIGJpdF9kZXB0aD04O2lmKHByb2ZpbGVfaWRjPT09MTAwfHxwcm9maWxlX2lkYz09PTExMHx8cHJvZmlsZV9pZGM9PT0xMjJ8fHByb2ZpbGVfaWRjPT09MjQ0fHxwcm9maWxlX2lkYz09PTQ0fHxwcm9maWxlX2lkYz09PTgzfHxwcm9maWxlX2lkYz09PTg2fHxwcm9maWxlX2lkYz09PTExOHx8cHJvZmlsZV9pZGM9PT0xMjh8fHByb2ZpbGVfaWRjPT09MTM4fHxwcm9maWxlX2lkYz09PTE0NCl7Y2hyb21hX2Zvcm1hdF9pZGM9Z2IucmVhZFVFRygpO2lmKGNocm9tYV9mb3JtYXRfaWRjPT09Myl7Z2IucmVhZEJpdHMoMSk7Ly8gc2VwYXJhdGVfY29sb3VyX3BsYW5lX2ZsYWdcbn1pZihjaHJvbWFfZm9ybWF0X2lkYzw9Myl7Y2hyb21hX2Zvcm1hdD1jaHJvbWFfZm9ybWF0X3RhYmxlW2Nocm9tYV9mb3JtYXRfaWRjXTt9Yml0X2RlcHRoPWdiLnJlYWRVRUcoKSs4Oy8vIGJpdF9kZXB0aF9sdW1hX21pbnVzOFxuZ2IucmVhZFVFRygpOy8vIGJpdF9kZXB0aF9jaHJvbWFfbWludXM4XG5nYi5yZWFkQml0cygxKTsvLyBxcHByaW1lX3lfemVyb190cmFuc2Zvcm1fYnlwYXNzX2ZsYWdcbmlmKGdiLnJlYWRCb29sKCkpey8vIHNlcV9zY2FsaW5nX21hdHJpeF9wcmVzZW50X2ZsYWdcbnZhciBzY2FsaW5nX2xpc3RfY291bnQ9Y2hyb21hX2Zvcm1hdF9pZGMhPT0zPzg6MTI7Zm9yKHZhciBpPTA7aTxzY2FsaW5nX2xpc3RfY291bnQ7aSsrKXtpZihnYi5yZWFkQm9vbCgpKXsvLyBzZXFfc2NhbGluZ19saXN0X3ByZXNlbnRfZmxhZ1xuaWYoaTw2KXtTUFNQYXJzZXIuX3NraXBTY2FsaW5nTGlzdChnYiwxNik7fWVsc2V7U1BTUGFyc2VyLl9za2lwU2NhbGluZ0xpc3QoZ2IsNjQpO319fX19Z2IucmVhZFVFRygpOy8vIGxvZzJfbWF4X2ZyYW1lX251bV9taW51czRcbnZhciBwaWNfb3JkZXJfY250X3R5cGU9Z2IucmVhZFVFRygpO2lmKHBpY19vcmRlcl9jbnRfdHlwZT09PTApe2diLnJlYWRVRUcoKTsvLyBsb2cyX21heF9waWNfb3JkZXJfY250X2xzYl9taW51c180XG59ZWxzZSBpZihwaWNfb3JkZXJfY250X3R5cGU9PT0xKXtnYi5yZWFkQml0cygxKTsvLyBkZWx0YV9waWNfb3JkZXJfYWx3YXlzX3plcm9fZmxhZ1xuZ2IucmVhZFNFRygpOy8vIG9mZnNldF9mb3Jfbm9uX3JlZl9waWNcbmdiLnJlYWRTRUcoKTsvLyBvZmZzZXRfZm9yX3RvcF90b19ib3R0b21fZmllbGRcbnZhciBudW1fcmVmX2ZyYW1lc19pbl9waWNfb3JkZXJfY250X2N5Y2xlPWdiLnJlYWRVRUcoKTtmb3IodmFyIF9pPTA7X2k8bnVtX3JlZl9mcmFtZXNfaW5fcGljX29yZGVyX2NudF9jeWNsZTtfaSsrKXtnYi5yZWFkU0VHKCk7Ly8gb2Zmc2V0X2Zvcl9yZWZfZnJhbWVcbn19Z2IucmVhZFVFRygpOy8vIG1heF9udW1fcmVmX2ZyYW1lc1xuZ2IucmVhZEJpdHMoMSk7Ly8gZ2Fwc19pbl9mcmFtZV9udW1fdmFsdWVfYWxsb3dlZF9mbGFnXG52YXIgcGljX3dpZHRoX2luX21ic19taW51czE9Z2IucmVhZFVFRygpO3ZhciBwaWNfaGVpZ2h0X2luX21hcF91bml0c19taW51czE9Z2IucmVhZFVFRygpO3ZhciBmcmFtZV9tYnNfb25seV9mbGFnPWdiLnJlYWRCaXRzKDEpO2lmKGZyYW1lX21ic19vbmx5X2ZsYWc9PT0wKXtnYi5yZWFkQml0cygxKTsvLyBtYl9hZGFwdGl2ZV9mcmFtZV9maWVsZF9mbGFnXG59Z2IucmVhZEJpdHMoMSk7Ly8gZGlyZWN0Xzh4OF9pbmZlcmVuY2VfZmxhZ1xudmFyIGZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQ9MDt2YXIgZnJhbWVfY3JvcF9yaWdodF9vZmZzZXQ9MDt2YXIgZnJhbWVfY3JvcF90b3Bfb2Zmc2V0PTA7dmFyIGZyYW1lX2Nyb3BfYm90dG9tX29mZnNldD0wO3ZhciBmcmFtZV9jcm9wcGluZ19mbGFnPWdiLnJlYWRCb29sKCk7aWYoZnJhbWVfY3JvcHBpbmdfZmxhZyl7ZnJhbWVfY3JvcF9sZWZ0X29mZnNldD1nYi5yZWFkVUVHKCk7ZnJhbWVfY3JvcF9yaWdodF9vZmZzZXQ9Z2IucmVhZFVFRygpO2ZyYW1lX2Nyb3BfdG9wX29mZnNldD1nYi5yZWFkVUVHKCk7ZnJhbWVfY3JvcF9ib3R0b21fb2Zmc2V0PWdiLnJlYWRVRUcoKTt9dmFyIHNhcl93aWR0aD0xLHNhcl9oZWlnaHQ9MTt2YXIgZnBzPTAsZnBzX2ZpeGVkPXRydWUsZnBzX251bT0wLGZwc19kZW49MDt2YXIgdnVpX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnPWdiLnJlYWRCb29sKCk7aWYodnVpX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnKXtpZihnYi5yZWFkQm9vbCgpKXsvLyBhc3BlY3RfcmF0aW9faW5mb19wcmVzZW50X2ZsYWdcbnZhciBhc3BlY3RfcmF0aW9faWRjPWdiLnJlYWRCeXRlKCk7dmFyIHNhcl93X3RhYmxlPVsxLDEyLDEwLDE2LDQwLDI0LDIwLDMyLDgwLDE4LDE1LDY0LDE2MCw0LDMsMl07dmFyIHNhcl9oX3RhYmxlPVsxLDExLDExLDExLDMzLDExLDExLDExLDMzLDExLDExLDMzLDk5LDMsMiwxXTtpZihhc3BlY3RfcmF0aW9faWRjPjAmJmFzcGVjdF9yYXRpb19pZGM8MTYpe3Nhcl93aWR0aD1zYXJfd190YWJsZVthc3BlY3RfcmF0aW9faWRjLTFdO3Nhcl9oZWlnaHQ9c2FyX2hfdGFibGVbYXNwZWN0X3JhdGlvX2lkYy0xXTt9ZWxzZSBpZihhc3BlY3RfcmF0aW9faWRjPT09MjU1KXtzYXJfd2lkdGg9Z2IucmVhZEJ5dGUoKTw8OHxnYi5yZWFkQnl0ZSgpO3Nhcl9oZWlnaHQ9Z2IucmVhZEJ5dGUoKTw8OHxnYi5yZWFkQnl0ZSgpO319aWYoZ2IucmVhZEJvb2woKSl7Ly8gb3ZlcnNjYW5faW5mb19wcmVzZW50X2ZsYWdcbmdiLnJlYWRCb29sKCk7Ly8gb3ZlcnNjYW5fYXBwcm9wcmlhdGVfZmxhZ1xufWlmKGdiLnJlYWRCb29sKCkpey8vIHZpZGVvX3NpZ25hbF90eXBlX3ByZXNlbnRfZmxhZ1xuZ2IucmVhZEJpdHMoNCk7Ly8gdmlkZW9fZm9ybWF0ICYgdmlkZW9fZnVsbF9yYW5nZV9mbGFnXG5pZihnYi5yZWFkQm9vbCgpKXsvLyBjb2xvdXJfZGVzY3JpcHRpb25fcHJlc2VudF9mbGFnXG5nYi5yZWFkQml0cygyNCk7Ly8gY29sb3VyX3ByaW1hcmllcyAmIHRyYW5zZmVyX2NoYXJhY3RlcmlzdGljcyAmIG1hdHJpeF9jb2VmZmljaWVudHNcbn19aWYoZ2IucmVhZEJvb2woKSl7Ly8gY2hyb21hX2xvY19pbmZvX3ByZXNlbnRfZmxhZ1xuZ2IucmVhZFVFRygpOy8vIGNocm9tYV9zYW1wbGVfbG9jX3R5cGVfdG9wX2ZpZWxkXG5nYi5yZWFkVUVHKCk7Ly8gY2hyb21hX3NhbXBsZV9sb2NfdHlwZV9ib3R0b21fZmllbGRcbn1pZihnYi5yZWFkQm9vbCgpKXsvLyB0aW1pbmdfaW5mb19wcmVzZW50X2ZsYWdcbnZhciBudW1fdW5pdHNfaW5fdGljaz1nYi5yZWFkQml0cygzMik7dmFyIHRpbWVfc2NhbGU9Z2IucmVhZEJpdHMoMzIpO2Zwc19maXhlZD1nYi5yZWFkQm9vbCgpOy8vIGZpeGVkX2ZyYW1lX3JhdGVfZmxhZ1xuZnBzX251bT10aW1lX3NjYWxlO2Zwc19kZW49bnVtX3VuaXRzX2luX3RpY2sqMjtmcHM9ZnBzX251bS9mcHNfZGVuO319dmFyIHNhclNjYWxlPTE7aWYoc2FyX3dpZHRoIT09MXx8c2FyX2hlaWdodCE9PTEpe3NhclNjYWxlPXNhcl93aWR0aC9zYXJfaGVpZ2h0O312YXIgY3JvcF91bml0X3g9MCxjcm9wX3VuaXRfeT0wO2lmKGNocm9tYV9mb3JtYXRfaWRjPT09MCl7Y3JvcF91bml0X3g9MTtjcm9wX3VuaXRfeT0yLWZyYW1lX21ic19vbmx5X2ZsYWc7fWVsc2V7dmFyIHN1Yl93Yz1jaHJvbWFfZm9ybWF0X2lkYz09PTM/MToyO3ZhciBzdWJfaGM9Y2hyb21hX2Zvcm1hdF9pZGM9PT0xPzI6MTtjcm9wX3VuaXRfeD1zdWJfd2M7Y3JvcF91bml0X3k9c3ViX2hjKigyLWZyYW1lX21ic19vbmx5X2ZsYWcpO312YXIgY29kZWNfd2lkdGg9KHBpY193aWR0aF9pbl9tYnNfbWludXMxKzEpKjE2O3ZhciBjb2RlY19oZWlnaHQ9KDItZnJhbWVfbWJzX29ubHlfZmxhZykqKChwaWNfaGVpZ2h0X2luX21hcF91bml0c19taW51czErMSkqMTYpO2NvZGVjX3dpZHRoLT0oZnJhbWVfY3JvcF9sZWZ0X29mZnNldCtmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCkqY3JvcF91bml0X3g7Y29kZWNfaGVpZ2h0LT0oZnJhbWVfY3JvcF90b3Bfb2Zmc2V0K2ZyYW1lX2Nyb3BfYm90dG9tX29mZnNldCkqY3JvcF91bml0X3k7dmFyIHByZXNlbnRfd2lkdGg9TWF0aC5jZWlsKGNvZGVjX3dpZHRoKnNhclNjYWxlKTtnYi5kZXN0cm95KCk7Z2I9bnVsbDtyZXR1cm57cHJvZmlsZV9zdHJpbmc6cHJvZmlsZV9zdHJpbmcsLy8gYmFzZWxpbmUsIGhpZ2gsIGhpZ2gxMCwgLi4uXG5sZXZlbF9zdHJpbmc6bGV2ZWxfc3RyaW5nLC8vIDMsIDMuMSwgNCwgNC4xLCA1LCA1LjEsIC4uLlxuYml0X2RlcHRoOmJpdF9kZXB0aCwvLyA4Yml0LCAxMGJpdCwgLi4uXG5jaHJvbWFfZm9ybWF0OmNocm9tYV9mb3JtYXQsLy8gNDoyOjAsIDQ6MjoyLCAuLi5cbmNocm9tYV9mb3JtYXRfc3RyaW5nOlNQU1BhcnNlci5nZXRDaHJvbWFGb3JtYXRTdHJpbmcoY2hyb21hX2Zvcm1hdCksZnJhbWVfcmF0ZTp7Zml4ZWQ6ZnBzX2ZpeGVkLGZwczpmcHMsZnBzX2RlbjpmcHNfZGVuLGZwc19udW06ZnBzX251bX0sc2FyX3JhdGlvOnt3aWR0aDpzYXJfd2lkdGgsaGVpZ2h0OnNhcl9oZWlnaHR9LGNvZGVjX3NpemU6e3dpZHRoOmNvZGVjX3dpZHRoLGhlaWdodDpjb2RlY19oZWlnaHR9LHByZXNlbnRfc2l6ZTp7d2lkdGg6cHJlc2VudF93aWR0aCxoZWlnaHQ6Y29kZWNfaGVpZ2h0fX07fX0se2tleTonX3NraXBTY2FsaW5nTGlzdCcsdmFsdWU6ZnVuY3Rpb24gX3NraXBTY2FsaW5nTGlzdChnYixjb3VudCl7dmFyIGxhc3Rfc2NhbGU9OCxuZXh0X3NjYWxlPTg7dmFyIGRlbHRhX3NjYWxlPTA7Zm9yKHZhciBpPTA7aTxjb3VudDtpKyspe2lmKG5leHRfc2NhbGUhPT0wKXtkZWx0YV9zY2FsZT1nYi5yZWFkU0VHKCk7bmV4dF9zY2FsZT0obGFzdF9zY2FsZStkZWx0YV9zY2FsZSsyNTYpJTI1Njt9bGFzdF9zY2FsZT1uZXh0X3NjYWxlPT09MD9sYXN0X3NjYWxlOm5leHRfc2NhbGU7fX19LHtrZXk6J2dldFByb2ZpbGVTdHJpbmcnLHZhbHVlOmZ1bmN0aW9uIGdldFByb2ZpbGVTdHJpbmcocHJvZmlsZV9pZGMpe3N3aXRjaChwcm9maWxlX2lkYyl7Y2FzZSA2NjpyZXR1cm4nQmFzZWxpbmUnO2Nhc2UgNzc6cmV0dXJuJ01haW4nO2Nhc2UgODg6cmV0dXJuJ0V4dGVuZGVkJztjYXNlIDEwMDpyZXR1cm4nSGlnaCc7Y2FzZSAxMTA6cmV0dXJuJ0hpZ2gxMCc7Y2FzZSAxMjI6cmV0dXJuJ0hpZ2g0MjInO2Nhc2UgMjQ0OnJldHVybidIaWdoNDQ0JztkZWZhdWx0OnJldHVybidVbmtub3duJzt9fX0se2tleTonZ2V0TGV2ZWxTdHJpbmcnLHZhbHVlOmZ1bmN0aW9uIGdldExldmVsU3RyaW5nKGxldmVsX2lkYyl7cmV0dXJuKGxldmVsX2lkYy8xMCkudG9GaXhlZCgxKTt9fSx7a2V5OidnZXRDaHJvbWFGb3JtYXRTdHJpbmcnLHZhbHVlOmZ1bmN0aW9uIGdldENocm9tYUZvcm1hdFN0cmluZyhjaHJvbWEpe3N3aXRjaChjaHJvbWEpe2Nhc2UgNDIwOnJldHVybic0OjI6MCc7Y2FzZSA0MjI6cmV0dXJuJzQ6MjoyJztjYXNlIDQ0NDpyZXR1cm4nNDo0OjQnO2RlZmF1bHQ6cmV0dXJuJ1Vua25vd24nO319fV0pO3JldHVybiBTUFNQYXJzZXI7fSgpO2V4cG9ydHMuZGVmYXVsdD1TUFNQYXJzZXI7XG5cbi8qKiovIH0pLFxuLyogMTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fTt9KCk7ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319Ly8gRXhwb25lbnRpYWwtR29sb21iIGJ1ZmZlciBkZWNvZGVyXG52YXIgRXhwR29sb21iPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gRXhwR29sb21iKHVpbnQ4YXJyYXkpe19jbGFzc0NhbGxDaGVjayh0aGlzLEV4cEdvbG9tYik7dGhpcy5UQUc9J0V4cEdvbG9tYic7dGhpcy5fYnVmZmVyPXVpbnQ4YXJyYXk7dGhpcy5fYnVmZmVyX2luZGV4PTA7dGhpcy5fdG90YWxfYnl0ZXM9dWludDhhcnJheS5ieXRlTGVuZ3RoO3RoaXMuX3RvdGFsX2JpdHM9dWludDhhcnJheS5ieXRlTGVuZ3RoKjg7dGhpcy5fY3VycmVudF93b3JkPTA7dGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdD0wO31fY3JlYXRlQ2xhc3MoRXhwR29sb21iLFt7a2V5OidkZXN0cm95Jyx2YWx1ZTpmdW5jdGlvbiBkZXN0cm95KCl7dGhpcy5fYnVmZmVyPW51bGw7fX0se2tleTonX2ZpbGxDdXJyZW50V29yZCcsdmFsdWU6ZnVuY3Rpb24gX2ZpbGxDdXJyZW50V29yZCgpe3ZhciBidWZmZXJfYnl0ZXNfbGVmdD10aGlzLl90b3RhbF9ieXRlcy10aGlzLl9idWZmZXJfaW5kZXg7aWYoYnVmZmVyX2J5dGVzX2xlZnQ8PTApdGhyb3cgbmV3IEVycm9yKCdFeHBHb2xvbWI6IF9maWxsQ3VycmVudFdvcmQoKSBidXQgbm8gYnl0ZXMgYXZhaWxhYmxlJyk7dmFyIGJ5dGVzX3JlYWQ9TWF0aC5taW4oNCxidWZmZXJfYnl0ZXNfbGVmdCk7dmFyIHdvcmQ9bmV3IFVpbnQ4QXJyYXkoNCk7d29yZC5zZXQodGhpcy5fYnVmZmVyLnN1YmFycmF5KHRoaXMuX2J1ZmZlcl9pbmRleCx0aGlzLl9idWZmZXJfaW5kZXgrYnl0ZXNfcmVhZCkpO3RoaXMuX2N1cnJlbnRfd29yZD1uZXcgRGF0YVZpZXcod29yZC5idWZmZXIpLmdldFVpbnQzMigwLGZhbHNlKTt0aGlzLl9idWZmZXJfaW5kZXgrPWJ5dGVzX3JlYWQ7dGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdD1ieXRlc19yZWFkKjg7fX0se2tleToncmVhZEJpdHMnLHZhbHVlOmZ1bmN0aW9uIHJlYWRCaXRzKGJpdHMpe2lmKGJpdHM+MzIpdGhyb3cgbmV3IEVycm9yKCdFeHBHb2xvbWI6IHJlYWRCaXRzKCkgYml0cyBleGNlZWRlZCBtYXggMzJiaXRzIScpO2lmKGJpdHM8PXRoaXMuX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQpe3ZhciBfcmVzdWx0PXRoaXMuX2N1cnJlbnRfd29yZD4+PjMyLWJpdHM7dGhpcy5fY3VycmVudF93b3JkPDw9Yml0czt0aGlzLl9jdXJyZW50X3dvcmRfYml0c19sZWZ0LT1iaXRzO3JldHVybiBfcmVzdWx0O312YXIgcmVzdWx0PXRoaXMuX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQ/dGhpcy5fY3VycmVudF93b3JkOjA7cmVzdWx0PXJlc3VsdD4+PjMyLXRoaXMuX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQ7dmFyIGJpdHNfbmVlZF9sZWZ0PWJpdHMtdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdDt0aGlzLl9maWxsQ3VycmVudFdvcmQoKTt2YXIgYml0c19yZWFkX25leHQ9TWF0aC5taW4oYml0c19uZWVkX2xlZnQsdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdCk7dmFyIHJlc3VsdDI9dGhpcy5fY3VycmVudF93b3JkPj4+MzItYml0c19yZWFkX25leHQ7dGhpcy5fY3VycmVudF93b3JkPDw9Yml0c19yZWFkX25leHQ7dGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdC09Yml0c19yZWFkX25leHQ7cmVzdWx0PXJlc3VsdDw8Yml0c19yZWFkX25leHR8cmVzdWx0MjtyZXR1cm4gcmVzdWx0O319LHtrZXk6J3JlYWRCb29sJyx2YWx1ZTpmdW5jdGlvbiByZWFkQm9vbCgpe3JldHVybiB0aGlzLnJlYWRCaXRzKDEpPT09MTt9fSx7a2V5OidyZWFkQnl0ZScsdmFsdWU6ZnVuY3Rpb24gcmVhZEJ5dGUoKXtyZXR1cm4gdGhpcy5yZWFkQml0cyg4KTt9fSx7a2V5Oidfc2tpcExlYWRpbmdaZXJvJyx2YWx1ZTpmdW5jdGlvbiBfc2tpcExlYWRpbmdaZXJvKCl7dmFyIHplcm9fY291bnQ9dm9pZCAwO2Zvcih6ZXJvX2NvdW50PTA7emVyb19jb3VudDx0aGlzLl9jdXJyZW50X3dvcmRfYml0c19sZWZ0O3plcm9fY291bnQrKyl7aWYoMCE9PSh0aGlzLl9jdXJyZW50X3dvcmQmMHg4MDAwMDAwMD4+Pnplcm9fY291bnQpKXt0aGlzLl9jdXJyZW50X3dvcmQ8PD16ZXJvX2NvdW50O3RoaXMuX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQtPXplcm9fY291bnQ7cmV0dXJuIHplcm9fY291bnQ7fX10aGlzLl9maWxsQ3VycmVudFdvcmQoKTtyZXR1cm4gemVyb19jb3VudCt0aGlzLl9za2lwTGVhZGluZ1plcm8oKTt9fSx7a2V5OidyZWFkVUVHJyx2YWx1ZTpmdW5jdGlvbiByZWFkVUVHKCl7Ly8gdW5zaWduZWQgZXhwb25lbnRpYWwgZ29sb21iXG52YXIgbGVhZGluZ196ZXJvcz10aGlzLl9za2lwTGVhZGluZ1plcm8oKTtyZXR1cm4gdGhpcy5yZWFkQml0cyhsZWFkaW5nX3plcm9zKzEpLTE7fX0se2tleToncmVhZFNFRycsdmFsdWU6ZnVuY3Rpb24gcmVhZFNFRygpey8vIHNpZ25lZCBleHBvbmVudGlhbCBnb2xvbWJcbnZhciB2YWx1ZT10aGlzLnJlYWRVRUcoKTtpZih2YWx1ZSYweDAxKXtyZXR1cm4gdmFsdWUrMT4+PjE7fWVsc2V7cmV0dXJuLTEqKHZhbHVlPj4+MSk7fX19XSk7cmV0dXJuIEV4cEdvbG9tYjt9KCk7ZXhwb3J0cy5kZWZhdWx0PUV4cEdvbG9tYjtcblxuLyoqKi8gfSksXG4vKiAxOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTt2YXIgX2xvZz1fX3dlYnBhY2tfcmVxdWlyZV9fKDApO3ZhciBfbG9nMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2cpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfTt9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319dmFyIGxvZz1uZXcgX2xvZzIuZGVmYXVsdCgnQUFDRGVtdXgnKTt2YXIgQUFDRGVtdXg9ZnVuY3Rpb24oKXtmdW5jdGlvbiBBQUNEZW11eChfcmVmKXt2YXIgYXVkaW9UcmFjaz1fcmVmLmF1ZGlvVHJhY2ssbWVkaWFJbmZvPV9yZWYubWVkaWFJbmZvO19jbGFzc0NhbGxDaGVjayh0aGlzLEFBQ0RlbXV4KTt0aGlzLl9hdWRpb1RyYWNrPWF1ZGlvVHJhY2s7dGhpcy5fbWVkaWFJbmZvPW1lZGlhSW5mbzt0aGlzLl9tcGVnU2FtcGxpbmdSYXRlcz1bOTYwMDAsODgyMDAsNjQwMDAsNDgwMDAsNDQxMDAsMzIwMDAsMjQwMDAsMjIwNTAsMTYwMDAsMTIwMDAsMTEwMjUsODAwMCw3MzUwXTt0aGlzLl90aW1lc3RhbXBCYXNlPTA7fV9jcmVhdGVDbGFzcyhBQUNEZW11eCxbe2tleToncGFyc2UnLHZhbHVlOmZ1bmN0aW9uIHBhcnNlKGNodW5rKXt2YXIgdj1uZXcgRGF0YVZpZXcoY2h1bmspO3ZhciB0eXBlPXYuZ2V0VWludDgoMCk7aWYodHlwZT09PTApe3RoaXMuX3BhcnNlQ29uZmlnKGNodW5rLnNsaWNlKDEpKTt9ZWxzZXt0aGlzLl9wYXJzZUFBQyhjaHVuay5zbGljZSgxKSk7fX0vLyBjaHVuayBpcyBTb3VuZERhdGEgaW4gZmx2IGF1ZGlvIHRhZ1xufSx7a2V5OidfcGFyc2VBQUMnLHZhbHVlOmZ1bmN0aW9uIF9wYXJzZUFBQyhjaHVuayl7dmFyIGF1ZGlvPW5ldyBVaW50OEFycmF5KGNodW5rKTt2YXIgZHRzPXRoaXMuX3RpbWVzdGFtcEJhc2U7dGhpcy5fdGltZXN0YW1wQmFzZSs9dGhpcy5fYXVkaW9UcmFjay5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uO3RoaXMuX2F1ZGlvVHJhY2suc2FtcGxlcy5wdXNoKHt1bml0OmF1ZGlvLGR0czpkdHMscHRzOmR0cyxsZW5ndGg6YXVkaW8uYnl0ZUxlbmd0aH0pO3RoaXMuX2F1ZGlvVHJhY2subGVuZ3RoKz1hdWRpby5ieXRlTGVuZ3RoO319LHtrZXk6J19wYXJzZUNvbmZpZycsdmFsdWU6ZnVuY3Rpb24gX3BhcnNlQ29uZmlnKGNodW5rKXt2YXIgYXVkaW89bmV3IFVpbnQ4QXJyYXkoY2h1bmspLG1ldGE9dGhpcy5fYXVkaW9UcmFjay5tZXRhLGNvbmZpZz12b2lkIDAsdXNlckFnZW50PW5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTt2YXIgYXVkaW9PYmplY3RUeXBlPWF1ZGlvWzBdPj4+MzsvLyA1YlxudmFyIG9yaWdpblR5cGU9YXVkaW9PYmplY3RUeXBlO3ZhciBzYW1wbGluZ0ZyZUluZGV4PShhdWRpb1swXSYweDA3KTw8MXxhdWRpb1sxXT4+Pjc7Ly8gNGJcbnZhciBleHRlbnNpb25TYW1wbGluZ0luZGV4PW51bGw7Ly8gb25seSBkZWNvZGUgdGhlIHNhbXBsZSBmcmVxdWVuY3QgYmV0d2VlbiAwIC0gMTMuXG5pZihzYW1wbGluZ0ZyZUluZGV4PDB8fHNhbXBsaW5nRnJlSW5kZXg+PXRoaXMuX21wZWdTYW1wbGluZ1JhdGVzLmxlbmd0aCl7bG9nLmUoJ2ludmFsaWQgc2FtcGxpbmdGcmVJbmRleDogJytzYW1wbGluZ0ZyZUluZGV4KTtyZXR1cm47fXZhciBzYW1wbGluZ0ZyZT10aGlzLl9tcGVnU2FtcGxpbmdSYXRlc1tzYW1wbGluZ0ZyZUluZGV4XTt2YXIgY2hhbm5lbENvbmZpZz0oYXVkaW9bMV0mMHg3OCk+Pj4zO2lmKGNoYW5uZWxDb25maWc8MHx8Y2hhbm5lbENvbmZpZz43KXtsb2cuZSgnaW52YWxpZCBjaGFubmVsIENvdW50OiAnK2NoYW5uZWxDb25maWcpO3JldHVybjt9aWYoYXVkaW9PYmplY3RUeXBlPT09NSl7Ly8gSEUtQUFDL1NCUlxuLy8gNCBiaXRzXG5leHRlbnNpb25TYW1wbGluZ0luZGV4PShhdWRpb1sxXSYweDA3KTw8MXxhdWRpb1syXT4+Pjc7Ly8gNSBiaXRzXG5hdWRpb0V4dGVuc2lvbk9iamVjdFR5cGU9KGF1ZGlvWzJdJjB4N0MpPj4+Mjt9Ly8gcmVmZXIgYWR0cy5qcyBpbiBobHMuanNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlby1kZXYvaGxzLmpzL2Jsb2IvbWFzdGVyL3NyYy9kZW11eC9hZHRzLmpzXG5sb2cuaSgndXNlckFnZW50IGlzICcrdXNlckFnZW50KTtsb2cuaSgndGhlIGF1ZGlvT2JqZWN0VHlwZSBpbiBBQUMgaXMgJythdWRpb09iamVjdFR5cGUpOy8vIGZpcmVmb3g6IGZyZXEgbGVzcyB0aGFuIDI0a0h6ID0gQUFDIFNCUiAoSEUtQUFDKVxuaWYodXNlckFnZW50LmluZGV4T2YoJ2ZpcmVmb3gnKSE9PS0xKXtpZihzYW1wbGluZ0ZyZUluZGV4Pj02KXthdWRpb09iamVjdFR5cGU9NTtjb25maWc9bmV3IEFycmF5KDQpOy8vIEhFLUFBQyB1c2VzIFNCUiAoU3BlY3RyYWwgQmFuZCBSZXBsaWNhdGlvbikgLCBoaWdoIGZyZXF1ZW5jaWVzIGFyZVxuLy8gY29uc3RydWN0ZWQgZnJvbSBsb3cgZnJlcXVlbmNpZXMgc28gdGhlcmUgaXMgYSBmYWN0b3IgMiBiZXR3ZWVuIHNhbXBsZSBmcmVcbi8vIHJhdGUgYW5kIGV4dGVuIGZyZSByYXRlIGFuZCByZWZlcmluZyB0byBfbXBlZ1NhbXBsaW5nUmF0ZXMgbGlzdCBtdXRpcGx5IHRoZVxuLy8gc2FtcGxlIHJhdGUgYnkgMiwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byBzdWJzdHJhY3QgMyBmcm9tIHNhbXBsaW5nRnJlSW5kZXhcbmV4dGVuc2lvblNhbXBsaW5nSW5kZXg9c2FtcGxpbmdGcmVJbmRleC0zO31lbHNley8vIHVzZSBMQy1BQUNcbmF1ZGlvT2JqZWN0VHlwZT0yO2NvbmZpZz1uZXcgQXJyYXkoMik7ZXh0ZW5zaW9uU2FtcGxpbmdJbmRleD1zYW1wbGluZ0ZyZUluZGV4O319ZWxzZSBpZih1c2VyQWdlbnQuaW5kZXhPZignYW5kcm9pZCcpIT09LTEpey8vIEFuZHJvaWQ6IHVzZSBMQy1BQUNcbmF1ZGlvT2JqZWN0VHlwZT0yO2NvbmZpZz1uZXcgQXJyYXkoMik7ZXh0ZW5zaW9uU2FtcGxpbmdJbmRleD1zYW1wbGluZ0ZyZUluZGV4O31lbHNley8vIG90aGVyIGJyb3dzZXJzIGFsd2F5cyB1c2UgSEUtQUFDIFNCUiB0eXBlIHRoZXkgZG9uJ3Qgc3VwcG9ydCBjb2RlYyBzd2l0Y2hcbmF1ZGlvT2JqZWN0VHlwZT01O2V4dGVuc2lvblNhbXBsaW5nSW5kZXg9c2FtcGxpbmdGcmVJbmRleDtjb25maWc9bmV3IEFycmF5KDQpO2lmKHNhbXBsaW5nRnJlSW5kZXg+PTYpe2V4dGVuc2lvblNhbXBsaW5nSW5kZXg9c2FtcGxpbmdGcmVJbmRleC0zO31lbHNlIGlmKGNoYW5uZWxDb25maWc9PT0xKXsvLyBNb25vIGNoYW5uZWxcbmF1ZGlvT2JqZWN0VHlwZT0yO2NvbmZpZz1uZXcgQXJyYXkoMik7ZXh0ZW5zaW9uU2FtcGxpbmdJbmRleD1zYW1wbGluZ0ZyZUluZGV4O31jb25maWdbMF09YXVkaW9PYmplY3RUeXBlPDwzO2NvbmZpZ1swXXw9KHNhbXBsaW5nRnJlSW5kZXgmMHgwRik+Pj4xO2NvbmZpZ1sxXT0oc2FtcGxpbmdGcmVJbmRleCYweDBGKTw8Nztjb25maWdbMV18PShjaGFubmVsQ29uZmlnJjB4MEYpPDwzO31jb25maWdbMF09YXVkaW9PYmplY3RUeXBlPDwzO2NvbmZpZ1swXXw9KHNhbXBsaW5nRnJlSW5kZXgmMHgwRik+Pj4xO2NvbmZpZ1sxXT0oc2FtcGxpbmdGcmVJbmRleCYweDBGKTw8Nztjb25maWdbMV18PShjaGFubmVsQ29uZmlnJjB4MEYpPDwzO2lmKGF1ZGlvT2JqZWN0VHlwZT09PTUpey8vIGF1ZGlvT2JqZWN0VHlwZSAoZm9yY2UgdG8gMiwgY2hyb21lIGlzIGNoZWNraW5nIHRoYXQgb2JqZWN0IHR5cGUgaXMgbGVzcyB0aGFuXG4vLyA1ID8/P1xuLy8gaHR0cHM6Ly9jaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYy5naXQvKy9tYXN0ZXIvbWVkaWEvZm9ybWF0cy9tcDRcbi8vXG5jb25maWdbMV18PShleHRlbnNpb25TYW1wbGluZ0luZGV4JjB4MEYpPj4+MTtjb25maWdbMl09KGV4dGVuc2lvblNhbXBsaW5nSW5kZXgmMHgwMSk8PDc7Ly8gZXh0ZW5kZWQgYXVkaW8gb2JqZWN0IHR5cGU6IGZvcmNlIHRvIDIgKExDLUFBQylcbmNvbmZpZ1syXXw9Mjw8Mjtjb25maWdbM109MDt9bWV0YS5jb25maWc9Y29uZmlnO21ldGEuYXVkaW9TYW1wbGVSYXRlPXNhbXBsaW5nRnJlO21ldGEuY2hhbm5lbENvdW50PWNoYW5uZWxDb25maWc7bWV0YS5jb2RlYz0nbXA0YS40MC4nK2F1ZGlvT2JqZWN0VHlwZTttZXRhLnJlZlNhbXBsZUR1cmF0aW9uPU1hdGguZmxvb3IoMTAyNC9tZXRhLmF1ZGlvU2FtcGxlUmF0ZSptZXRhLnRpbWVzY2FsZSk7fX1dKTtyZXR1cm4gQUFDRGVtdXg7fSgpO2V4cG9ydHMuZGVmYXVsdD1BQUNEZW11eDtcblxuLyoqKi8gfSksXG4vKiAyMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTt2YXIgX2ZsdmRlbXV4PV9fd2VicGFja19yZXF1aXJlX18oMTMpO3ZhciBfZmx2ZGVtdXgyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZsdmRlbXV4KTt2YXIgX21wNHJlbXV4PV9fd2VicGFja19yZXF1aXJlX18oMjEpO3ZhciBfbXA0cmVtdXgyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21wNHJlbXV4KTt2YXIgX2hlbHBlcj1fX3dlYnBhY2tfcmVxdWlyZV9fKDIpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfTt9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319dmFyIE11eENvbnRyb2xsZXI9ZnVuY3Rpb24oKXtmdW5jdGlvbiBNdXhDb250cm9sbGVyKCl7X2NsYXNzQ2FsbENoZWNrKHRoaXMsTXV4Q29udHJvbGxlcik7dGhpcy5fZmx2RGVtdXg9bmV3IF9mbHZkZW11eDIuZGVmYXVsdCgpO3RoaXMuX21wNFJlbXV4PW5ldyBfbXA0cmVtdXgyLmRlZmF1bHQoe2F1ZGlvVHJhY2s6dGhpcy5fZmx2RGVtdXguYXVkaW9UcmFjayx2aWRlb1RyYWNrOnRoaXMuX2ZsdkRlbXV4LnZpZGVvVHJhY2ssbWVkaWFJbmZvOnRoaXMuX2ZsdkRlbXV4Lm1lZGlhSW5mb30pO31fY3JlYXRlQ2xhc3MoTXV4Q29udHJvbGxlcixbe2tleToncGFyc2UnLHZhbHVlOmZ1bmN0aW9uIHBhcnNlKGNodW5rQXJyYXkpe3ZhciB0eXBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmYXJndW1lbnRzWzFdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1sxXTpcIk1TXCI7dGhpcy5fZmx2RGVtdXgucGFyc2UoY2h1bmtBcnJheSk7dmFyIGJ1ZmZlcj12b2lkIDA7aWYodHlwZT09PVwiSVNcIil7YnVmZmVyPXRoaXMuX21wNFJlbXV4LmdlbmVyYXRlSVMoKTt9ZWxzZXtidWZmZXI9dGhpcy5fbXA0UmVtdXguZ2VuZXJhdGVNUygpO30oMCxfaGVscGVyLmNvbmNhdEJ1ZmZlcikoYnVmZmVyLDEwMjQqMTAwKTt9fV0pO3JldHVybiBNdXhDb250cm9sbGVyO30oKTtleHBvcnRzLmRlZmF1bHQ9TXV4Q29udHJvbGxlcjtcblxuLyoqKi8gfSksXG4vKiAyMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTt2YXIgX21wNF9nZW5lcmF0b3I9X193ZWJwYWNrX3JlcXVpcmVfXygyMik7dmFyIF9tcDRfZ2VuZXJhdG9yMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tcDRfZ2VuZXJhdG9yKTt2YXIgX3V0aWxzPV9fd2VicGFja19yZXF1aXJlX18oNyk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9O31mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX12YXIgTVA0UmVtdXg9ZnVuY3Rpb24oKXtmdW5jdGlvbiBNUDRSZW11eChfcmVmKXt2YXIgYXVkaW9UcmFjaz1fcmVmLmF1ZGlvVHJhY2ssdmlkZW9UcmFjaz1fcmVmLnZpZGVvVHJhY2ssbWVkaWFJbmZvPV9yZWYubWVkaWFJbmZvO19jbGFzc0NhbGxDaGVjayh0aGlzLE1QNFJlbXV4KTt0aGlzLl9hdWRpb1RyYWNrPWF1ZGlvVHJhY2s7dGhpcy5fdmlkZW9UcmFjaz12aWRlb1RyYWNrO3RoaXMuX21lZGlhSW5mbz1tZWRpYUluZm87dGhpcy5fc2VxPTA7fV9jcmVhdGVDbGFzcyhNUDRSZW11eCxbe2tleTonZ2VuZXJhdGVJUycsdmFsdWU6ZnVuY3Rpb24gZ2VuZXJhdGVJUygpe3ZhciBfbWVkaWFJbmZvPXRoaXMuX21lZGlhSW5mbyxoYXNWaWRlbz1fbWVkaWFJbmZvLmhhc1ZpZGVvLGhhc0F1ZGlvPV9tZWRpYUluZm8uaGFzQXVkaW87aWYoaGFzVmlkZW8mJmhhc0F1ZGlvKXtyZXR1cm4gX21wNF9nZW5lcmF0b3IyLmRlZmF1bHQuaW5pdEJveCh0aGlzLl92aWRlb1RyYWNrLm1ldGEsdGhpcy5fYXVkaW9UcmFjay5tZXRhKTt9fX0se2tleTonZ2VuZXJhdGVNUycsdmFsdWU6ZnVuY3Rpb24gZ2VuZXJhdGVNUygpe3ZhciB2aWRlb01TPW5ldyBVaW50OEFycmF5KDApLGF1ZGlvTVM9bmV3IFVpbnQ4QXJyYXkoMCk7aWYodGhpcy5fdmlkZW9UcmFjay5zYW1wbGVzLmxlbmd0aCl7dmlkZW9NUz10aGlzLl9yZW11eFZpZGVvKCk7fWlmKHRoaXMuX2F1ZGlvVHJhY2suc2FtcGxlcy5sZW5ndGgpe2F1ZGlvTVM9dGhpcy5fcmVtdXhBdWRpbygpO310aGlzLl92aWRlb1RyYWNrLnNhbXBsZXM9W107dGhpcy5fYXVkaW9UcmFjay5zYW1wbGVzPVtdO3RoaXMuX3ZpZGVvVHJhY2subGVuZ3RoPXRoaXMuX2F1ZGlvVHJhY2subGVuZ3RoPTA7cmV0dXJuKDAsX3V0aWxzLm1lcmdlVHlwZWRBcnJheSkoYXVkaW9NUyk7fX0se2tleTonX3JlbXV4QXVkaW8nLHZhbHVlOmZ1bmN0aW9uIF9yZW11eEF1ZGlvKCl7dmFyIF9yZW11eEF1ZGlvTWRhdDI9dGhpcy5fcmVtdXhBdWRpb01kYXQoKSxhdWRpb01kYXQ9X3JlbXV4QXVkaW9NZGF0Mi5hdWRpb01kYXQsYmFzZUR0cz1fcmVtdXhBdWRpb01kYXQyLmJhc2VEdHM7dmFyIG1vb2Y9X21wNF9nZW5lcmF0b3IyLmRlZmF1bHQubW9vZih0aGlzLl9hdWRpb1RyYWNrLGJhc2VEdHMsdGhpcy5fc2VxKTtyZXR1cm4oMCxfdXRpbHMubWVyZ2VUeXBlZEFycmF5KShtb29mLGF1ZGlvTWRhdCk7fX0se2tleTonX3JlbXV4VmlkZW8nLHZhbHVlOmZ1bmN0aW9uIF9yZW11eFZpZGVvKCl7dmFyIF9yZW11eFZpZGVvTWRhdDI9dGhpcy5fcmVtdXhWaWRlb01kYXQoKSx2aWRlb01kYXQ9X3JlbXV4VmlkZW9NZGF0Mi52aWRlb01kYXQsYmFzZUR0cz1fcmVtdXhWaWRlb01kYXQyLmJhc2VEdHM7dmFyIG1vb2Y9X21wNF9nZW5lcmF0b3IyLmRlZmF1bHQubW9vZih0aGlzLl92aWRlb1RyYWNrLGJhc2VEdHMsdGhpcy5fc2VxKTtyZXR1cm4oMCxfdXRpbHMubWVyZ2VUeXBlZEFycmF5KShtb29mLHZpZGVvTWRhdCk7fX0se2tleTonX3JlbXV4QXVkaW9NZGF0Jyx2YWx1ZTpmdW5jdGlvbiBfcmVtdXhBdWRpb01kYXQoKXt2YXIgYXVkaW9NZGF0PV9tcDRfZ2VuZXJhdG9yMi5kZWZhdWx0Lm1kYXQodGhpcy5fYXVkaW9UcmFjay5sZW5ndGgpO3ZhciBvZmZzZXQ9OCx0cmFjaz10aGlzLl9hdWRpb1RyYWNrLG1ldGE9dHJhY2subWV0YSxyZWZEdXJhdGlvbj1tZXRhLnJlZlNhbXBsZUR1cmF0aW9uLHNhbXBsZXM9dHJhY2suc2FtcGxlcyxiYXNlRHRzPXNhbXBsZXNbMF0uZHRzLG1wNFNhbXBsZXM9W107c2FtcGxlcy5mb3JFYWNoKGZ1bmN0aW9uKGFjY1NhbXBsZSxpbmRleCl7dmFyIGR0cz1hY2NTYW1wbGUuZHRzLHB0cz1hY2NTYW1wbGUucHRzLGN0cz1wdHMtZHRzO2F1ZGlvTWRhdC5zZXQoYWNjU2FtcGxlLnVuaXQsb2Zmc2V0KTt2YXIgc2FtcGxlU2l6ZT1hY2NTYW1wbGUudW5pdC5ieXRlTGVuZ3RoO21wNFNhbXBsZXMucHVzaCh7ZHRzOmR0cyxwdHM6cHRzLGN0czowLHNhbXBsZVNpemU6c2FtcGxlU2l6ZSxkdXJhdGlvbjpyZWZEdXJhdGlvbixjaHVua09mZnNldDpvZmZzZXQsZmxhZ3M6e2lzTGVhZGluZzowLGRlcGVuZHNPbjoxLC8vIG9yaWdpbiBpcyAxXG5pc0RlcGVuZGVkOjAsaGFzUmVkdW5kYW5jeTowfX0pO29mZnNldCs9c2FtcGxlU2l6ZTt9KTt0cmFjay5zYW1wbGVzPW1wNFNhbXBsZXM7dGhpcy5fc2VxKys7cmV0dXJue2Jhc2VEdHM6YmFzZUR0cyxhdWRpb01kYXQ6YXVkaW9NZGF0fTt9fSx7a2V5OidfcmVtdXhWaWRlb01kYXQnLHZhbHVlOmZ1bmN0aW9uIF9yZW11eFZpZGVvTWRhdCgpe3ZhciB2aWRlb01kYXQ9X21wNF9nZW5lcmF0b3IyLmRlZmF1bHQubWRhdCh0aGlzLl92aWRlb1RyYWNrLmxlbmd0aCk7dmFyIG9mZnNldD04LHRyYWNrPXRoaXMuX3ZpZGVvVHJhY2ssbWV0YT10cmFjay5tZXRhLHJlZkR1cmF0aW9uPW1ldGEucmVmU2FtcGxlRHVyYXRpb24sc2FtcGxlcz10cmFjay5zYW1wbGVzLG1wNFNhbXBsZXM9W107dmFyIGJhc2VEdHM9c2FtcGxlc1swXS5kdHM7Y29uc29sZS5sb2codGhpcy5fdmlkZW9UcmFjayk7Y29uc29sZS5sb2codGhpcy5fYXVkaW9UcmFjayk7c2FtcGxlcy5mb3JFYWNoKGZ1bmN0aW9uKHZpU2FtcGxlLGluZGV4KXt2YXIgZHRzPXZpU2FtcGxlLmR0cyxjdHM9dmlTYW1wbGUuY3RzLHB0cz1kdHMrY3RzO3ZhciBzYW1wbGVTaXplPXZpU2FtcGxlLnNsaWNlcy5ieXRlTGVuZ3RoO3ZpZGVvTWRhdC5zZXQodmlTYW1wbGUuc2xpY2VzLG9mZnNldCk7bWV0YS5kdXJhdGlvbis9cmVmRHVyYXRpb247dmFyIGtleUZyYW1lPXZpU2FtcGxlLmtleUZyYW1lO21wNFNhbXBsZXMucHVzaCh7ZHRzOmR0cyxwdHM6cHRzLGN0czpjdHMsbGVuZ3RoOnZpU2FtcGxlLmxlbmd0aCxrZXlGcmFtZTprZXlGcmFtZSxzYW1wbGVTaXplOnNhbXBsZVNpemUsZHVyYXRpb246cmVmRHVyYXRpb24sY2h1bmtPZmZzZXQ6b2Zmc2V0LGZsYWdzOntpc0xlYWRpbmc6MCxkZXBlbmRzT246a2V5RnJhbWU/MjoxLC8vIGFuIEkgcGljdHVyZSA6IG5vdCBJIHBpY3R1cmVcbmlzRGVwZW5kZWQ6a2V5RnJhbWU/MTowLC8vICB1bmtub3duIGRlcGVuZGVudCBzYW1wbGU6IG5vdCBkaXNwb3NhYmxlXG5oYXNSZWR1bmRhbmN5OjAsLy8gZm9yIHNkdHBcbmlzTm9uU3luYzprZXlGcmFtZT8wOjF9fSk7b2Zmc2V0Kz12aVNhbXBsZS5sZW5ndGg7fSk7Y29uc29sZS5sb2cobXA0U2FtcGxlcyk7dHJhY2suc2FtcGxlcz1tcDRTYW1wbGVzO3RoaXMuX3NlcSsrO3JldHVybnt2aWRlb01kYXQ6dmlkZW9NZGF0LGJhc2VEdHM6YmFzZUR0c307fX1dKTtyZXR1cm4gTVA0UmVtdXg7fSgpO2V4cG9ydHMuZGVmYXVsdD1NUDRSZW11eDtcblxuLyoqKi8gfSksXG4vKiAyMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dmFyIE1QND17fTtNUDQudHlwZXM9ey8vIGNvZGluZ25hbWVcbmF2YzE6W10sYXZjQzpbXSxidHJ0OltdLGRpbmY6W10sZHJlZjpbXSxlc2RzOltdLGZ0eXA6W10saGRscjpbXSxtZGF0OltdLG1kaGQ6W10sbWRpYTpbXSxtZmhkOltdLG1pbmY6W10sbW9vZjpbXSxtb292OltdLG1wNGE6W10sJy5tcDMnOltdLG12ZXg6W10sbXZoZDpbXSxwYXNwOltdLHNkdHA6W10sc3RibDpbXSxzdGNvOltdLHN0c2M6W10sc3RzZDpbXSxzdHN6OltdLHN0dHM6W10sdGZkdDpbXSx0ZmhkOltdLHRyYWY6W10sdHJhazpbXSx0cnVuOltdLHRyZXg6W10sdGtoZDpbXSx2bWhkOltdLHNtaGQ6W10sZnJlZTpbXSxzdHNzOltdLGN0dHM6W119O01QNC5zeW1ib2xWYWx1ZT17RlRZUDpuZXcgVWludDhBcnJheShbMHg2OSwweDczLDB4NkYsMHg2RCwvLyBtYWpvcl9icmFuZDogaXNvbVxuMHgwLDB4MCwweDAsMHgxLC8vIG1pbm9yX3ZlcnNpb246IDB4MDFcbjB4NjksMHg3MywweDZGLDB4NkQsLy8gaXNvbVxuMHg2MSwweDc2LDB4NjMsMHgzMS8vIGF2YzFcbl0pLEhETFJfVklERU86bmV3IFVpbnQ4QXJyYXkoWzB4MDAsMHgwMCwweDAwLDB4MDAsLy8gdmVyc2lvbigwKSArIGZsYWdzXG4weDAwLDB4MDAsMHgwMCwweDAwLC8vIHByZV9kZWZpbmVkXG4weDc2LDB4NjksMHg2NCwweDY1LC8vIGhhbmRsZXJfdHlwZTogJ3ZpZGUnXG4weDAwLDB4MDAsMHgwMCwweDAwLC8vIHJlc2VydmVkOiAzICogNCBieXRlc1xuMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4NTYsMHg2OSwweDY0LDB4NjUsMHg2RiwweDQ4LDB4NjEsMHg2RSwweDY0LDB4NkMsMHg2NSwweDcyLDB4MDAvLyBuYW1lOiBWaWRlb0hhbmRsZXJcbl0pLEhETFJfQVVESU86bmV3IFVpbnQ4QXJyYXkoWzB4MDAsMHgwMCwweDAwLDB4MDAsLy8gdmVyc2lvbigwKSArIGZsYWdzXG4weDAwLDB4MDAsMHgwMCwweDAwLC8vIHByZV9kZWZpbmVkXG4weDczLDB4NkYsMHg3NSwweDZFLC8vIGhhbmRsZXJfdHlwZTogJ3NvdW4nXG4weDAwLDB4MDAsMHgwMCwweDAwLC8vIHJlc2VydmVkOiAzICogNCBieXRlc1xuMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4NTMsMHg2RiwweDc1LDB4NkUsMHg2NCwweDQ4LDB4NjEsMHg2RSwweDY0LDB4NkMsMHg2NSwweDcyLDB4MDAvLyBuYW1lOiBTb3VuZEhhbmRsZXJcbl0pLFNUU0M6bmV3IFVpbnQ4QXJyYXkoWzB4MDAsMHgwMCwweDAwLDB4MDAsLy8gdmVyc2lvbigwKSArIGZsYWdzXG4weDAwLDB4MDAsMHgwMCwweDAxLC8vIGVudHJ5X2NvdW50XG4weDAwLDB4MDAsMHgwMCwweDAxLDB4MDAsMHgwMCwweDAwLDB4MDEsMHgwMCwweDAwLDB4MDAsMHgwMV0pLEZTVFRTOm5ldyBVaW50OEFycmF5KFsweDAwLDB4MDAsMHgwMCwweDAwLC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuMHgwMCwweDAwLDB4MDAsMHgwMC8vIGVudHJ5X2NvdW50XG5dKSxGU1RTQzpuZXcgVWludDhBcnJheShbMHgwMCwweDAwLDB4MDAsMHgwMCwvLyB2ZXJzaW9uKDApICsgZmxhZ3NcbjB4MDAsMHgwMCwweDAwLDB4MDAvLyBlbnRyeV9jb3VudFxuXSksRlNUU1o6bmV3IFVpbnQ4QXJyYXkoWzB4MDAsMHgwMCwweDAwLDB4MDAsLy8gdmVyc2lvbigwKSArIGZsYWdzXG4weDAwLDB4MDAsMHgwMCwweDAwLC8vIHNhbXBsZV9zaXplXG4weDAwLDB4MDAsMHgwMCwweDAwLy8gc2FtcGxlX2NvdW50XG5dKSxGU1RDTzpuZXcgVWludDhBcnJheShbMHgwMCwweDAwLDB4MDAsMHgwMCwvLyB2ZXJzaW9uKDApICsgZmxhZ3NcbjB4MDAsMHgwMCwweDAwLDB4MDAvLyBlbnRyeV9jb3VudFxuXSksU1RUUzpuZXcgVWludDhBcnJheShbMHgwMCwweDAwLDB4MDAsMHgwMC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuXSksQ1RUUzpuZXcgVWludDhBcnJheShbMHgwMCwweDAwLDB4MDAsMHgwMC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuXSksU1RDTzpuZXcgVWludDhBcnJheShbMHgwMCwweDAwLDB4MDAsMHgwMC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuXSksU1RTWjpuZXcgVWludDhBcnJheShbMHgwMCwweDAwLDB4MDAsMHgwMC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuXSksU1RTRDpuZXcgVWludDhBcnJheShbMHgwMCwweDAwLDB4MDAsMHgwMCwvLyB2ZXJzaW9uKDApICsgZmxhZ3NcbjB4MDAsMHgwMCwweDAwLDB4MDEvLyBlbnRyeV9jb3VudFxuXSksRFJFRjpuZXcgVWludDhBcnJheShbMHgwMCwweDAwLDB4MDAsMHgwMCwvLyB2ZXJzaW9uKDApICsgZmxhZ3NcbjB4MDAsMHgwMCwweDAwLDB4MDEsLy8gZW50cnlfY291bnRcbjB4MDAsMHgwMCwweDAwLDB4MEMsLy8gZW50cnlfc2l6ZVxuMHg3NSwweDcyLDB4NkMsMHgyMCwvLyB0eXBlICd1cmwgJ1xuMHgwMCwweDAwLDB4MDAsMHgwMS8vIHZlcnNpb24oMCkgKyBmbGFnc1xuXSksVk1IRDpuZXcgVWludDhBcnJheShbMHgwMCwweDAwLDB4MDAsMHgwMSwvLyB2ZXJzaW9uKDApICsgZmxhZ3NcbjB4MDAsMHgwMCwvLyBncmFwaGljc21vZGU6IDIgYnl0ZXNcbjB4MDAsMHgwMCwweDAwLDB4MDAsLy8gb3Bjb2xvcjogMyAqIDIgYnl0ZXNcbjB4MDAsMHgwMF0pLFNNSEQ6bmV3IFVpbnQ4QXJyYXkoWzB4MDAsMHgwMCwweDAwLDB4MDAsLy8gdmVyc2lvbigwKSArIGZsYWdzXG4weDAwLDB4MDAsMHgwMCwweDAwLy8gYmFsYW5jZSgyKSArIHJlc2VydmVkKDIpXG5dKSxTVFNTOm5ldyBVaW50OEFycmF5KFsweDAwLDB4MDAsMHgwMCwweDAwLy8gdmVyc2lvbigwKSArIGZsYWdzXG5dKS8qKlxuICogQHBhcmFtIHR5cGUge01QNC50eXBlc30gb25lIG9mIE1QNC50eXBlc1xuICogQHBhcmFtIGJ1ZmZlcnMge0FycmF5fSB0aGUgYm9keSBidWZmZXIgb2YgYm94LlxuICogQHJldHVybiBidWZmZXIge1R5cGVBcnJheX0gdGhlIGNvbXBsZXRlIGJveCBidWZmZXIuXG4gKi99O01QNC5ib3g9ZnVuY3Rpb24odHlwZSl7dmFyIGJveExlbmd0aD04Oy8vIGluY2x1ZGUgdGhlIHRvdGFsIDggYnl0ZSBsZW5ndGggb2Ygc2l6ZSBhbmQgdHlwZVxudmFyIGJ1ZmZlcnM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO2J1ZmZlcnMuZm9yRWFjaChmdW5jdGlvbih2YWwpe2JveExlbmd0aCs9dmFsLmJ5dGVMZW5ndGg7fSk7dmFyIGJveEJ1ZmZlcj1uZXcgVWludDhBcnJheShib3hMZW5ndGgpOy8vIHRoZSBmaXJzdCBmb3VyIGJ5dGUgc3RhbmRzIGZvciBib3hMZW5ndGhcbmJveEJ1ZmZlclswXT1ib3hMZW5ndGg+PjI0JjB4ZmY7Ym94QnVmZmVyWzFdPWJveExlbmd0aD4+MTYmMHhmZjtib3hCdWZmZXJbMl09Ym94TGVuZ3RoPj44JjB4ZmY7Ym94QnVmZmVyWzNdPWJveExlbmd0aCYweGZmOy8vIHRoZSBzZWNvbmQgZm91ciBieXRlIGlzIGJveCdzIHR5cGVcbmJveEJ1ZmZlci5zZXQodHlwZSw0KTt2YXIgb2Zmc2V0PTg7Ly8gdGhlIGJ5dGVMZW5ndGggb2YgdHlwZSBhbmQgc2l6ZVxuYnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbCl7Ym94QnVmZmVyLnNldCh2YWwsb2Zmc2V0KTtvZmZzZXQrPXZhbC5ieXRlTGVuZ3RoO30pO3JldHVybiBib3hCdWZmZXI7fTtNUDQuZnJlZT1mdW5jdGlvbigpe3JldHVybiBNUDQuYm94KE1QNC50eXBlcy5mcmVlKTt9O01QNC5tb29mPWZ1bmN0aW9uKHRyYWNrLGJhc2VEVFMsc2VxKXtyZXR1cm4gTVA0LmJveChNUDQudHlwZXMubW9vZiwvLyB3aG9sZSBib3hcbk1QNC5tZmhkKHNlcSksLy8gbWZoZCBib3hcbk1QNC50cmFmKHRyYWNrLGJhc2VEVFMpLy8gdGhlIHN1YnNldCBib3hcbik7fTsvLyBpdCBpcyBhIGZ1bGxCb3ggbm90IGJveCFcbk1QNC5tZmhkPWZ1bmN0aW9uKHNlcSl7cmV0dXJuIE1QNC5mcmFnbWVudEJveChNUDQudHlwZXMubWZoZCxzZXEpO307TVA0Lm1kYXQ9ZnVuY3Rpb24obGVuZ3RoKXtsZW5ndGgrPTg7dmFyIG1kYXQ9bmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTt2YXIgdmlldz1uZXcgRGF0YVZpZXcobWRhdC5idWZmZXIpO3ZpZXcuc2V0VWludDMyKDAsbGVuZ3RoKTttZGF0LnNldChNUDQudHlwZXMubWRhdCw0KTtyZXR1cm4gbWRhdDt9O01QNC50cmFmPWZ1bmN0aW9uKHRyYWNrLGJhc2VEVFMpey8vIHRyYWNrIGZyYWdtZW50IGhlYWRlclxudmFyIHRmaGQ9TVA0LnRmaGQodHJhY2suaWQpOy8vIHRyYWNrIGZyYWdtZW50IERlY29kZSBUaW1lXG52YXIgdGZkdD1NUDQudGZkdChiYXNlRFRTKTsvLyBTYW1wbGVEZXBlbmRlbmN5VHlwZUJveFxudmFyIHNkdHA9TVA0LnNkdHAodHJhY2spOy8vIFRyYWNrUnVuQm94XG4vLyB0aGUgc2Vjb25kIHBhcmFtIGlzIGRhdGFfb2Zmc2V0LiBpdCBpcyB0aGUgdmFsdWUgZnJvbSBtb29mIHRvIG1kYXQgLHdoaWNoXG4vLyBkb2Vzbid0IGluY2x1ZGUgdHJ1biBhcyBpdCBpcyBjYWxjdWxhdGVkIGluIE1QNC50cnVuIGZ1bmNcbi8vIG1vcmUgaW5mb3JtYXRpb24gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vdmlkZW8tZGV2L2hscy5qcy9jb21taXQvYTRkOTFmMTU2Mzc5OTc4NzQ3MmY0ZWRkMWZmYzgyMzNhN2RlZGE0YyNkaWZmLTUzNzAzOTFmYzBmNjNmMzBlODQ5OGFmMzhkOWM0NDNmUjU1MlxudmFyIHRydW49TVA0LnRydW4odHJhY2ssOCsvLyBtb29mXG4xNisvLyBtZmhkXG44Ky8vIHRyYWZcbjE2Ky8vIHRmaGRcbjE2Ky8vIHRmZHRcbi8vdHJ1biAgaW4gdGhlIGZ1bmN0aW9uIHRvIGFkZCB0cnVuLmxlbmd0aFxuc2R0cC5ieXRlTGVuZ3RoKy8vIHNkdHAgbGVuZ3RoXG44Ly9tZGF0XG4pO3JldHVybiBNUDQuYm94KE1QNC50eXBlcy50cmFmLHRmaGQsdGZkdCx0cnVuLHNkdHApO307Ly8gVHJhY2tSdW5Cb3hcbk1QNC50cnVuPWZ1bmN0aW9uKHRyYWNrLG9mZnNldCl7dmFyIHNhbXBsZXM9dHJhY2suc2FtcGxlc3x8W10sc2FtcGxlQ291bnQ9c2FtcGxlcy5sZW5ndGgsYnVmZmVyTGVuZ3RoPTEyKzE2KnNhbXBsZUNvdW50LC8vIDEyOiAzICogMzJiaXQuIDE2OiA0ICogMzJiaXRcbmJ1ZmZlcj1uZXcgVWludDhBcnJheShidWZmZXJMZW5ndGgpO29mZnNldCs9OCtidWZmZXJMZW5ndGg7Ly8gODogdHlwZSArIHNpemVcbi8vIG5vdCBpbmNsdWRlIGZpcnN0X3NhbXBsZV9mbGFnc1xuYnVmZmVyLnNldChbMHgwMCwvLyB2ZXJzaW9uXG4weDAwLDB4MEYsMHgwMSwvLyBmbGFnczp0aGUgdG90YWwgc3VtIG9mIGxpc3RlZCBmbGFncyBpbiBtcDRcbnNhbXBsZUNvdW50Pj4+MjQmMHhGRiwvLyBzYW1wbGVfY291bnRcbnNhbXBsZUNvdW50Pj4+MTYmMHhGRixzYW1wbGVDb3VudD4+PjgmMHhGRixzYW1wbGVDb3VudCYweEZGLG9mZnNldD4+PjI0JjB4RkYsLy8gZGF0YV9vZmZzZXRcbm9mZnNldD4+PjE2JjB4RkYsb2Zmc2V0Pj4+OCYweEZGLG9mZnNldCYweEZGXSwwKTtzYW1wbGVzLmZvckVhY2goZnVuY3Rpb24oc2FtcGxlLGluZGV4KXt2YXIgZHVyYXRpb249c2FtcGxlLmR1cmF0aW9uLHNhbXBsZVNpemU9c2FtcGxlLnNhbXBsZVNpemUsZmxhZ3M9c2FtcGxlLmZsYWdzLGN0cz1zYW1wbGUuY3RzO2J1ZmZlci5zZXQoW2R1cmF0aW9uPj4+MjQmMHhGRiwvLyBzYW1wbGVfZHVyYXRpb25cbmR1cmF0aW9uPj4+MTYmMHhGRixkdXJhdGlvbj4+PjgmMHhGRixkdXJhdGlvbiYweEZGLHNhbXBsZVNpemU+Pj4yNCYweEZGLC8vIHNhbXBsZV9zaXplXG5zYW1wbGVTaXplPj4+MTYmMHhGRixzYW1wbGVTaXplPj4+OCYweEZGLHNhbXBsZVNpemUmMHhGRixmbGFncy5pc0xlYWRpbmc8PDJ8ZmxhZ3MuZGVwZW5kc09uLC8vIHNhbXBsZV9mbGFnc1xuZmxhZ3MuaXNEZXBlbmRlZDw8NnxmbGFncy5oYXNSZWR1bmRhbmN5PDw0fGZsYWdzLmlzTm9uU3luYywweDAwLDB4MDAsLy8gc2FtcGxlX2RlZ3JhZGF0aW9uX3ByaW9yaXR5XG5jdHM+Pj4yNCYweEZGLC8vIHNhbXBsZV9jb21wb3NpdGlvbl90aW1lX29mZnNldFxuY3RzPj4+MTYmMHhGRixjdHM+Pj44JjB4RkYsY3RzJjB4RkZdLDEyKzE2KmluZGV4KTt9KTtyZXR1cm4gTVA0LmJveChNUDQudHlwZXMudHJ1bixidWZmZXIpO307LyoqXG4gKiBAbmFtZSBTYW1wbGVEZXBlbmRlbmN5VHlwZUJveFxuICogQGRlc2MgZXh0ZW5kcyBmdWxsYm94IGFuZCBzYXZlIHNvbWUgdmFsdWVzIGFib3V0IGRlcGVuZGVuY3kgZmxhZ3NcbiAqICAgICAgbGlrZSByZXNlcnZlZHthbHdheXMgMH0gc2FtcGxlX2RlcGVuZHNfb24gc2FtcGxlX2lzX2RlcGVuZGVkX29uXG4gKiBAcmV0dXJuIGZ1bGxib3ggKyA4ICogc2FtcGxlX2NvdW50XG4gKi9NUDQuc2R0cD1mdW5jdGlvbih0cmFjayl7dmFyIHNhbXBsZXM9dHJhY2suc2FtcGxlc3x8W10sbGVuZ3RoPXNhbXBsZXMubGVuZ3RoLGJ1ZmZlcj1uZXcgVWludDhBcnJheShsZW5ndGgrNCk7Zm9yKHZhciBpPTAsZmxhZ3M7aTxsZW5ndGg7aSsrKXtmbGFncz1zYW1wbGVzW2ldLmZsYWdzOy8vIHNraXAgNEIgdmVyc2lvbiAmJiB0eXBlIHdoaWNoIGFyZSBhbHdheXMgMHgwMFxuYnVmZmVyW2krNF09ZmxhZ3MuZGVwZW5kc09uPDw0fGZsYWdzLmlzRGVwZW5kZWQ8PDJ8ZmxhZ3MuaGFzUmVkdW5kYW5jeTsvLyBza2lwIDJiaXQgcmVzZXJ2ZWQgZmxhZyB3aGljaCBkZWZhdWx0IHZhbHVlIGlzIDBiMDA7XG59cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLnNkdHAsYnVmZmVyKTt9O01QNC50ZmhkPWZ1bmN0aW9uKHRyYWNrSWQpe3JldHVybiBNUDQuZnJhZ21lbnRCb3goTVA0LnR5cGVzLnRmaGQsdHJhY2tJZCk7fTtNUDQudGZkdD1mdW5jdGlvbihiYXNlRFRTKXtyZXR1cm4gTVA0LmZyYWdtZW50Qm94KE1QNC50eXBlcy50ZmR0LGJhc2VEVFMpO307TVA0LmZyYWdtZW50Qm94PWZ1bmN0aW9uKHR5cGUscGFyYW0pe3ZhciBidWZmZXI9bmV3IFVpbnQ4QXJyYXkoWzB4MDAsMHgwMCwweDAwLC8vIGZsZ3NcbjB4MDAsLy8gdmVyc2lvblxucGFyYW0+Pj4yNCYweEZGLC8vIHRyYWNrX0lEXG5wYXJhbT4+PjE2JjB4RkYscGFyYW0+Pj44JjB4RkYscGFyYW0mMHhGRl0pO3JldHVybiBNUDQuYm94KHR5cGUsYnVmZmVyKTt9O01QNC5mdHlwPWZ1bmN0aW9uKCl7cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLmZ0eXAsTVA0LnN5bWJvbFZhbHVlLkZUWVApO307TVA0LmluaXRCb3g9ZnVuY3Rpb24obWV0YTEsbWV0YTIpe3ZhciBmdHlwPU1QNC5ib3goTVA0LnR5cGVzLmZ0eXAsTVA0LnN5bWJvbFZhbHVlLkZUWVApLG1vb3Y9TVA0LmZtb292KG1ldGExLG1ldGEyKTt2YXIgYnVmZmVyPW5ldyBVaW50OEFycmF5KGZ0eXAuYnl0ZUxlbmd0aCttb292LmJ5dGVMZW5ndGgpO2J1ZmZlci5zZXQoZnR5cCwwKTtidWZmZXIuc2V0KG1vb3YsZnR5cC5ieXRlTGVuZ3RoKTtyZXR1cm4gYnVmZmVyO307TVA0LmZtb292PWZ1bmN0aW9uKG1ldGExLG1ldGEyKXt2YXIgbXZoZD1NUDQubXZoZChtZXRhMS50aW1lc2NhbGUsbWV0YTEuZHVyYXRpb24pO2lmKG1ldGEyKXtyZXR1cm4gTVA0LmJveChNUDQudHlwZXMubW9vdixtdmhkLE1QNC50cmFrKG1ldGExKSxNUDQudHJhayhtZXRhMiksTVA0Lm12ZXgoMSwyKSk7fXJldHVybiBNUDQuYm94KE1QNC50eXBlcy5tb292LG12aGQsTVA0LnRyYWsobWV0YTEpLE1QNC5tdmV4KDEpKTsvLyByZXR1cm4gTVA0LmJveChNUDQudHlwZXMubW9vdiwgbXZoZCwgdHJhaywgbXZleCk7XG59Oy8vIFRPRE9cbk1QNC5tb292PWZ1bmN0aW9uKG12aGQsdHJhayxtdmV4KXtyZXR1cm4gTVA0LmJveChNUDQudHlwZXMubW9vdixtdmhkLHRyYWspOy8vIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5tb292LCBtdmhkLCB2aWRlb1RyYWssIGF1ZGlvVHJhayk7XG59O01QNC5tdmV4PWZ1bmN0aW9uKGlkMSxpZDIpe2lmKGlkMil7cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLm12ZXgsTVA0LnRyZXgoaWQxKSxNUDQudHJleChpZDIpKTt9cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLm12ZXgsTVA0LnRyZXgoaWQxKSk7fTtNUDQudHJleD1mdW5jdGlvbih0cmFja0lkKXt2YXIgYnVmZmVyPW5ldyBVaW50OEFycmF5KFsweDAwLDB4MDAsMHgwMCwweDAwLC8vIHZlcnNpb24oMCkgKyBmbGFnc1xudHJhY2tJZD4+PjI0JjB4RkYsLy8gdHJhY2tfSURcbnRyYWNrSWQ+Pj4xNiYweEZGLHRyYWNrSWQ+Pj44JjB4RkYsdHJhY2tJZCYweEZGLDB4MDAsMHgwMCwweDAwLDB4MDEsLy8gZGVmYXVsdF9zYW1wbGVfZGVzY3JpcHRpb25faW5kZXhcbjB4MDAsMHgwMCwweDAwLDB4MDAsLy8gZGVmYXVsdF9zYW1wbGVfZHVyYXRpb25cbjB4MDAsMHgwMCwweDAwLDB4MDAsLy8gZGVmYXVsdF9zYW1wbGVfc2l6ZVxuMHgwMCwweDAxLDB4MDAsMHgwMS8vIGRlZmF1bHRfc2FtcGxlX2ZsYWdzXG5dKTtyZXR1cm4gTVA0LmJveChNUDQudHlwZXMudHJleCxidWZmZXIpO307TVA0LnRyYWs9ZnVuY3Rpb24obWV0YSl7cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLnRyYWssTVA0LnRraGQobWV0YSksTVA0Lm1kaWEobWV0YSkpO307TVA0Lm1kaWE9ZnVuY3Rpb24obWV0YSl7cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLm1kaWEsTVA0Lm1kaGQobWV0YSksTVA0LmhkbHIobWV0YSksTVA0Lm1pbmYobWV0YSkpO307Ly8gZGVjbGFyZXMgbWVkaWEgdHlwZVxuTVA0LmhkbHI9ZnVuY3Rpb24obWV0YSl7cmV0dXJuIG1ldGEudHlwZT09PSd2aWRlbyc/TVA0LmJveChNUDQudHlwZXMuaGRscixNUDQuc3ltYm9sVmFsdWUuSERMUl9WSURFTyk6TVA0LmJveChNUDQudHlwZXMuaGRscixNUDQuc3ltYm9sVmFsdWUuSERMUl9BVURJTyk7fTtNUDQubWluZj1mdW5jdGlvbihtZXRhKXt2YXIgdHlwZV9tZGg9bWV0YS50eXBlPT09J3ZpZGVvJz9NUDQuYm94KE1QNC50eXBlcy52bWhkLE1QNC5zeW1ib2xWYWx1ZS5WTUhEKTpNUDQuYm94KE1QNC50eXBlcy5zbWhkLE1QNC5zeW1ib2xWYWx1ZS5TTUhEKTsvLyBUT0RPIHlvdSBjYW4gcmVwbGFjZSBmc3RibCBhcyBzdGJsIHdoZW4geW91IHdhbnQgdG8gcHJvZHVjZSBzdGFuZGFyZCBtcDQgbm90IGZyYWdtZW50ZWQgbXA0XG5yZXR1cm4gTVA0LmJveChNUDQudHlwZXMubWluZix0eXBlX21kaCxNUDQuZGluZigpLE1QNC5mc3RibChtZXRhKSk7fTtNUDQuZGluZj1mdW5jdGlvbigpe3ZhciBkcmVmPU1QNC5ib3goTVA0LnR5cGVzLmRyZWYsTVA0LnN5bWJvbFZhbHVlLkRSRUYpO3JldHVybiBNUDQuYm94KE1QNC50eXBlcy5kaW5mLGRyZWYpO307TVA0LnN0c3M9ZnVuY3Rpb24obWV0YSl7dmFyIHRyYWNrPW1ldGEudHJhY2s7dmFyIHNhbXBsZXM9dHJhY2suc2FtcGxlczt2YXIga2V5ZnJhbWVzPVtdO3NhbXBsZXMuZm9yRWFjaChmdW5jdGlvbihfcmVmLGluZGV4KXt2YXIga2V5ZnJhbWU9X3JlZi5rZXlmcmFtZTtpZihrZXlmcmFtZSlrZXlmcmFtZXMucHVzaChpbmRleCk7fSk7dmFyIHN0c3NCdWZmZXI9bmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcig0K2tleWZyYW1lcy5sZW5ndGgqNCkpO3N0c3NCdWZmZXIuc2V0VWludDMyKDAsa2V5ZnJhbWVzLmxlbmd0aCk7dmFyIG9mZnNldD00O2tleWZyYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbCl7c3Rzc0J1ZmZlci5zZXRVaW50MzIob2Zmc2V0LHZhbCsxKTtvZmZzZXQrPTQ7fSk7cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLnN0c3MsTVA0LnN5bWJvbFZhbHVlLlNUU1MsbmV3IFVpbnQ4QXJyYXkoc3Rzc0J1ZmZlci5idWZmZXIpKTt9Oy8vIHNvIGltcG9ydGFudFxuLy8gc2FtcGxlIHRhYmxlIGJveFxuLy8gVE9ETzogc2VwYXJhdGUgdGhlIGF1ZGlvIHRyYWsgYW5kIHRoZSB2aWRlbyB0cmFrXG5NUDQuc3RibD1mdW5jdGlvbihtZXRhKXtpZihtZXRhLnR5cGU9PT0nYXVkaW8nKXtyZXR1cm4gTVA0LmJveChNUDQudHlwZXMuc3RibCxNUDQuc3RzZChtZXRhKSxNUDQuc3R0cyhtZXRhKSxNUDQuc3RzYyhtZXRhKSxNUDQuc3RzeihtZXRhKSxNUDQuc3RjbyhtZXRhKSk7fWVsc2V7cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLnN0YmwsTVA0LnN0c2QobWV0YSksTVA0LnN0dHMobWV0YSksTVA0LmN0dHMobWV0YSksTVA0LnN0c2MobWV0YSksTVA0LnN0c3MobWV0YSksTVA0LnN0c3oobWV0YSksTVA0LnN0Y28obWV0YSkpO319Oy8qKlxuICogdXNlZCBmb3IgZm1wNCBzdGJsIGJveFxuICovTVA0LmZzdGJsPWZ1bmN0aW9uKG1ldGEpe3JldHVybiBNUDQuYm94KE1QNC50eXBlcy5zdGJsLC8vIHR5cGU6IHN0Ymxcbk1QNC5zdHNkKG1ldGEpLC8vIFNhbXBsZSBEZXNjcmlwdGlvbiBUYWJsZVxuTVA0LmJveChNUDQudHlwZXMuc3R0cyxNUDQuc3ltYm9sVmFsdWUuRlNUVFMpLC8vIFRpbWUtVG8tU2FtcGxlXG5NUDQuYm94KE1QNC50eXBlcy5zdHNjLE1QNC5zeW1ib2xWYWx1ZS5GU1RTQyksLy8gU2FtcGxlLVRvLUNodW5rXG5NUDQuYm94KE1QNC50eXBlcy5zdHN6LE1QNC5zeW1ib2xWYWx1ZS5GU1RTWiksLy8gU2FtcGxlIHNpemVcbk1QNC5ib3goTVA0LnR5cGVzLnN0Y28sTVA0LnN5bWJvbFZhbHVlLkZTVENPKS8vIENodW5rIG9mZnNldFxuKTt9O01QNC5zdHRzPWZ1bmN0aW9uKG1ldGEpe3ZhciB0cmFjaz1tZXRhLnRyYWNrLGNvbnRlbnREYXRhPVtdLHNhbXBsZURlbHRhcz1bXTt2YXIgc2FtcGxlcz10cmFjay5zYW1wbGVzLGRlbHRhPXNhbXBsZXNbMF0uZHVyYXRpb24sY291bnQ9MCxzYW1wbGVzTGVuZ3RoPXNhbXBsZXMubGVuZ3RoO3NhbXBsZXMuZm9yRWFjaChmdW5jdGlvbihfcmVmMixpbmRleCl7dmFyIGR1cmF0aW9uPV9yZWYyLmR1cmF0aW9uO2lmKGR1cmF0aW9uPT09ZGVsdGEpe2NvdW50Kys7fWVsc2V7Y29udGVudERhdGEucHVzaChbY291bnQsZGVsdGFdKTtkZWx0YT1kdXJhdGlvbjtjb3VudD0xO30vLyB3aGVuIG1lZXQgdGhlIGxhc3Qgc2FtcGxlLFxuLy8gc2F2ZSBpdHMgZGVsdGEgYW5kIGNvdW50XG5pZihpbmRleD09PXNhbXBsZXNMZW5ndGgtMSl7Y29udGVudERhdGEucHVzaChbY291bnQsZGVsdGFdKTt9fSk7Ly8gaW5pdGlhbCBjb3VudEJ1ZmZlclxudmFyIHNhbXBsZUJ1ZmZlcj1uZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDgqY29udGVudERhdGEubGVuZ3RoKzQpKTsvLyBzZXQgdGhlIGVudHJ5X2NvdW50XG5zYW1wbGVCdWZmZXIuc2V0VWludDMyKDAsY29udGVudERhdGEubGVuZ3RoKTt2YXIgb2Zmc2V0PTQ7Y29udGVudERhdGEuZm9yRWFjaChmdW5jdGlvbihkYXRhKXtzYW1wbGVCdWZmZXIuc2V0VWludDMyKG9mZnNldCxkYXRhWzBdKTtzYW1wbGVCdWZmZXIuc2V0VWludDMyKG9mZnNldCs0LGRhdGFbMV0pO29mZnNldCs9ODt9KTsvLyB2ZXJzaW9uICsgZmxhZyArIHNhbXBsZV9jb3VudHMgKyBzYW1wbGVfZGVsdGFzXG4vLyBUT0RPOiBzZXQgdGhlIGVudHJ5X2NvdW50XG5yZXR1cm4gTVA0LmJveChNUDQudHlwZXMuc3R0cyxNUDQuc3ltYm9sVmFsdWUuU1RUUyxuZXcgVWludDhBcnJheShzYW1wbGVCdWZmZXIuYnVmZmVyKSk7fTtNUDQuY3R0cz1mdW5jdGlvbihtZXRhKXt2YXIgdHJhY2s9bWV0YS50cmFjayxjb250ZW50RGF0YT1bXSxzYW1wbGVEZWx0YXM9W107dmFyIHNhbXBsZXM9dHJhY2suc2FtcGxlcyxkZWx0YT1zYW1wbGVzWzBdLmN0cyxjb3VudD0wLHNhbXBsZXNMZW5ndGg9c2FtcGxlcy5sZW5ndGg7c2FtcGxlcy5mb3JFYWNoKGZ1bmN0aW9uKF9yZWYzLGluZGV4KXt2YXIgY3RzPV9yZWYzLmN0cztpZihjdHM9PT1kZWx0YSl7Y291bnQrKzt9ZWxzZXtjb250ZW50RGF0YS5wdXNoKFtjb3VudCxkZWx0YV0pO2RlbHRhPWN0cztjb3VudD0xO30vLyB3aGVuIG1lZXQgdGhlIGxhc3Qgc2FtcGxlLFxuLy8gc2F2ZSBpdHMgZGVsdGEgYW5kIGNvdW50XG5pZihpbmRleD09PXNhbXBsZXNMZW5ndGgtMSl7Y29udGVudERhdGEucHVzaChbY291bnQsZGVsdGFdKTt9fSk7Ly8gaW5pdGlhbCBjb3VudEJ1ZmZlclxudmFyIHNhbXBsZUJ1ZmZlcj1uZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDgqY29udGVudERhdGEubGVuZ3RoKzQpKTsvLyBzZXQgdGhlIGVudHJ5X2NvdW50XG5zYW1wbGVCdWZmZXIuc2V0VWludDMyKDAsY29udGVudERhdGEubGVuZ3RoKTt2YXIgb2Zmc2V0PTQ7Y29udGVudERhdGEuZm9yRWFjaChmdW5jdGlvbihkYXRhKXtzYW1wbGVCdWZmZXIuc2V0VWludDMyKG9mZnNldCxkYXRhWzBdKTtzYW1wbGVCdWZmZXIuc2V0VWludDMyKG9mZnNldCs0LGRhdGFbMV0pO29mZnNldCs9ODt9KTsvLyB2ZXJzaW9uICsgZmxhZyArIHNhbXBsZV9jb3VudHMgKyBzYW1wbGVfZGVsdGFzXG4vLyBUT0RPOiBzZXQgdGhlIGVudHJ5X2NvdW50XG5yZXR1cm4gTVA0LmJveChNUDQudHlwZXMuY3R0cyxNUDQuc3ltYm9sVmFsdWUuQ1RUUyxuZXcgVWludDhBcnJheShzYW1wbGVCdWZmZXIuYnVmZmVyKSk7fTtNUDQuc3Rjbz1mdW5jdGlvbihtZXRhKXt2YXIgc2FtcGxlcz1tZXRhLnRyYWNrLnNhbXBsZXM7dmFyIHN0Y29CdWZmZXI9bmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcig0KnNhbXBsZXMubGVuZ3RoKzQpKTtzdGNvQnVmZmVyLnNldFVpbnQzMigwLHNhbXBsZXMubGVuZ3RoKTt2YXIgb2Zmc2V0PTQ7Ly8gc2tpcCB0aGUgZW50cnlfY291bnRcbnNhbXBsZXMuZm9yRWFjaChmdW5jdGlvbihzYW1wbGUpe3N0Y29CdWZmZXIuc2V0VWludDMyKG9mZnNldCxzYW1wbGUuY2h1bmtPZmZzZXQpO29mZnNldCs9NDt9KTtyZXR1cm4gTVA0LmJveChNUDQudHlwZXMuc3RjbyxNUDQuc3ltYm9sVmFsdWUuU1RDTyxuZXcgVWludDhBcnJheShzdGNvQnVmZmVyLmJ1ZmZlcikpO307TVA0LnN0c2M9ZnVuY3Rpb24obWV0YSl7Ly8gb25seSBzZXQgMSwxLDEgdG8ga2VlcCBldmVyeSBzYW1wbGUgaW50byBvbmUgY2h1bmtcbnJldHVybiBNUDQuYm94KE1QNC50eXBlcy5zdHNjLE1QNC5zeW1ib2xWYWx1ZS5TVFNDKTt9O01QNC5zdHN6PWZ1bmN0aW9uKG1ldGEpe3ZhciBzYW1wbGVzPW1ldGEudHJhY2suc2FtcGxlczt2YXIgc3RzekJ1ZmZlcj1uZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDQqc2FtcGxlcy5sZW5ndGgrOCkpO3N0c3pCdWZmZXIuc2V0VWludDMyKDAsMCk7Ly8gc2V0IHRoZSBzYW1wbGVfc2l6ZSB0byB6ZXJvXG5zdHN6QnVmZmVyLnNldFVpbnQzMig0LHNhbXBsZXMubGVuZ3RoKTsvLyBzZXQgdGhlIHNhbXBsZV9jb3VudHNcbnZhciBvZmZzZXQ9ODtzYW1wbGVzLmZvckVhY2goZnVuY3Rpb24oX3JlZjQpe3ZhciBzYW1wbGVTaXplPV9yZWY0LnNhbXBsZVNpemU7c3RzekJ1ZmZlci5zZXRVaW50MzIob2Zmc2V0LHNhbXBsZVNpemUpO29mZnNldCs9NDt9KTtyZXR1cm4gTVA0LmJveChNUDQudHlwZXMuc3RzeixNUDQuc3ltYm9sVmFsdWUuU1RTWixuZXcgVWludDhBcnJheShzdHN6QnVmZmVyLmJ1ZmZlcikpO307TVA0LnN0c2Q9ZnVuY3Rpb24obWV0YSl7cmV0dXJuIG1ldGEudHlwZT09PSd2aWRlbyc/TVA0LmJveChNUDQudHlwZXMuc3RzZCxNUDQuc3ltYm9sVmFsdWUuU1RTRCxNUDQuYXZjMShtZXRhKSkvLyBmb3IgQXVkaW9TYW1wbGVFbnRyeVxuOm1ldGEuY29kZWM9PT0nbXAzJz8vLyBhdWRpb1xuTVA0LmJveChNUDQudHlwZXMuc3RzZCxNUDQuc3ltYm9sVmFsdWUuU1RTRCxNUDQubXAzKG1ldGEpKS8vIGZvciBtcDMgZm9ybWF0XG46TVA0LmJveChNUDQudHlwZXMuc3RzZCxNUDQuc3ltYm9sVmFsdWUuU1RTRCxNUDQubXA0YShtZXRhKSk7Ly8gZm9yIEFDQyAsIGxpa2UgbXA0YVxufTtNUDQubXAzPWZ1bmN0aW9uKG1ldGEpe3ZhciBjaGFubmVsQ291bnQ9bWV0YS5jaGFubmVsQ291bnQsYXVkaW9TYW1wbGVSYXRlPW1ldGEuYXVkaW9TYW1wbGVSYXRlO3ZhciBidWZmZXI9bmV3IFVpbnQ4QXJyYXkoWzB4MDAsMHgwMCwweDAwLDB4MDAsLy8gcmVzZXJ2ZWQoNClcbjB4MDAsMHgwMCwweDAwLDB4MDEsLy8gcmVzZXJ2ZWQoMikgKyBkYXRhX3JlZmVyZW5jZV9pbmRleCgyKVxuMHgwMCwweDAwLDB4MDAsMHgwMCwvLyByZXNlcnZlZDogMiAqIDQgYnl0ZXNcbjB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCxjaGFubmVsQ291bnQsLy8gY2hhbm5lbENvdW50KDIpXG4weDAwLDB4MTAsLy8gc2FtcGxlU2l6ZSgyKVxuMHgwMCwweDAwLDB4MDAsMHgwMCwvLyByZXNlcnZlZCg0KVxuc2FtcGxlUmF0ZT4+PjgmMHhGRiwvLyBBdWRpbyBzYW1wbGUgcmF0ZVxuc2FtcGxlUmF0ZSYweEZGLDB4MDAsMHgwMF0pO3JldHVybiBNUDQuYm94KE1QNC50eXBlc1snLm1wMyddLGJ1ZmZlcik7fTtNUDQubXA0YT1mdW5jdGlvbihtZXRhKXt2YXIgY2hhbm5lbENvdW50PW1ldGEuY2hhbm5lbENvdW50LGF1ZGlvU2FtcGxlUmF0ZT1tZXRhLmF1ZGlvU2FtcGxlUmF0ZTt2YXIgYnVmZmVyPW5ldyBVaW50OEFycmF5KFsweDAwLDB4MDAsMHgwMCwweDAwLC8vIHJlc2VydmVkKDQpXG4weDAwLDB4MDAsMHgwMCwweDAxLC8vIHJlc2VydmVkKDIpICsgZGF0YV9yZWZlcmVuY2VfaW5kZXgoMilcbjB4MDAsMHgwMCwweDAwLDB4MDAsLy8gcmVzZXJ2ZWQ6IDIgKiA0IGJ5dGVzXG4weDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsY2hhbm5lbENvdW50LC8vIGNoYW5uZWxDb3VudCgyKVxuMHgwMCwweDEwLC8vIHNhbXBsZVNpemUoMilcbjB4MDAsMHgwMCwweDAwLDB4MDAsLy8gcmVzZXJ2ZWQoNClcbmF1ZGlvU2FtcGxlUmF0ZT4+PjgmMHhGRiwvLyBBdWRpbyBzYW1wbGUgcmF0ZVxuYXVkaW9TYW1wbGVSYXRlJjB4RkYsMHgwMCwweDAwXSk7cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLm1wNGEsYnVmZmVyLE1QNC5lc2RzKG1ldGEpKTt9Oy8vIHJlZmVyIHRvIG1wNC1nZW5lcmF0b3IuanMgXG5NUDQuZXNkcz1mdW5jdGlvbihtZXRhKXt2YXIgY29uZmlnPW1ldGEuY29uZmlnfHxbXSxjb25maWdMZW49Y29uZmlnLmxlbmd0aDt2YXIgYnVmZmVyPW5ldyBVaW50OEFycmF5KFsweDAwLDB4MDAsMHgwMCwweDAwLC8vIHZlcnNpb24gMCArIGZsYWdzXG4weDAzLC8vIGRlc2NyaXB0b3JfdHlwZVxuMHgxNytjb25maWdMZW4sLy8gbGVuZ3RoM1xuMHgwMCwweDAxLC8vIGVzX2lkXG4weDAwLC8vIHN0cmVhbV9wcmlvcml0eVxuMHgwNCwvLyBkZXNjcmlwdG9yX3R5cGVcbjB4MEYrY29uZmlnTGVuLC8vIGxlbmd0aFxuMHg0MCwvLyBjb2RlYzogbXBlZzRfYXVkaW9cbjB4MTUsLy8gc3RyZWFtX3R5cGU6IEF1ZGlvXG4weDAwLDB4MDAsMHgwMCwvLyBidWZmZXJfc2l6ZVxuMHgwMCwweDAwLDB4MDAsMHgwMCwvLyBtYXhCaXRyYXRlXG4weDAwLDB4MDAsMHgwMCwweDAwLC8vIGF2Z0JpdHJhdGVcbjB4MDUvLyBkZXNjcmlwdG9yX3R5cGVcbl0uY29uY2F0KFsvLyBsZW5ndGggQXVkaW9TcGVjaWZpY0NvbmZpZ1xuY29uZmlnTGVuXSkuY29uY2F0KGNvbmZpZykvLyBhdWRpbyBcbi5jb25jYXQoWzB4MDYsMHgwMSwweDAyXSkvLyBHQVNwZWNpZmljQ29uZmlnXG4pO3JldHVybiBNUDQuYm94KE1QNC50eXBlcy5lc2RzLGJ1ZmZlcik7fTtNUDQuYXZjMT1mdW5jdGlvbihtZXRhKXt2YXIgYXZjYz1tZXRhLmF2Y2Msd2lkdGg9bWV0YS5jb2RlY1dpZHRoLGhlaWdodD1tZXRhLmNvZGVjSGVpZ2h0O3ZhciBidWZmZXI9bmV3IFVpbnQ4QXJyYXkoWzB4MDAsMHgwMCwweDAwLDB4MDAsLy8gcmVzZXJ2ZWQoNClcbjB4MDAsMHgwMCwweDAwLDB4MDEsLy8gcmVzZXJ2ZWQoMikgKyBkYXRhX3JlZmVyZW5jZV9pbmRleCgyKVxuMHgwMCwweDAwLDB4MDAsMHgwMCwvLyBwcmVfZGVmaW5lZCgyKSArIHJlc2VydmVkKDIpXG4weDAwLDB4MDAsMHgwMCwweDAwLC8vIHByZV9kZWZpbmVkOiAzICogNCBieXRlc1xuMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLHdpZHRoPj4+OCYweEZGLC8vIHdpZHRoOiAyIGJ5dGVzXG53aWR0aCYweEZGLGhlaWdodD4+PjgmMHhGRiwvLyBoZWlnaHQ6IDIgYnl0ZXNcbmhlaWdodCYweEZGLDB4MDAsMHg0OCwweDAwLDB4MDAsLy8gaG9yaXpyZXNvbHV0aW9uOiA0IGJ5dGVzXG4weDAwLDB4NDgsMHgwMCwweDAwLC8vIHZlcnRyZXNvbHV0aW9uOiA0IGJ5dGVzXG4weDAwLDB4MDAsMHgwMCwweDAwLC8vIHJlc2VydmVkOiA0IGJ5dGVzXG4weDAwLDB4MDEsLy8gZnJhbWVfY291bnRcbjB4MEYsLy8gY29tcHJlc3Nvcm5hbWUgbGVuZ3RoXG4weDc2LDB4NjksMHg2YywweDZjLC8vIHZpbGxhaW5oci9hdi5qc1xuMHg2MSwweDY5LDB4NmUsMHg2OCwweDcyLDB4MmYsMHg2MSwweDc2LDB4MmUsMHg2YSwweDczLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDE4LC8vIGRlcHRoXG4weEZGLDB4RkYvLyBwcmVfZGVmaW5lZCA9IC0xXG5dKTtyZXR1cm4gTVA0LmJveChNUDQudHlwZXMuYXZjMSxidWZmZXIsTVA0LmJveChNUDQudHlwZXMuYXZjQyxhdmNjKS8vIGdldCBBVkMgRGVjb2RlciBDb25maWd1cmF0aW9uXG4pO307TVA0Lm1kaGQ9ZnVuY3Rpb24obWV0YSl7dmFyIHRpbWVzY2FsZT1tZXRhLnRpbWVzY2FsZSxkdXJhdGlvbj1tZXRhLmR1cmF0aW9uO3JldHVybiBNUDQuYm94KE1QNC50eXBlcy5tZGhkLG5ldyBVaW50OEFycmF5KFsweDAwLDB4MDAsMHgwMCwweDAwLC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuMHgwMCwweDAwLDB4MDAsMHgwMCwvLyBjcmVhdGlvbl90aW1lXG4weDAwLDB4MDAsMHgwMCwweDAwLC8vIG1vZGlmaWNhdGlvbl90aW1lXG50aW1lc2NhbGU+Pj4yNCYweEZGLC8vIHRpbWVzY2FsZTogNCBieXRlc1xudGltZXNjYWxlPj4+MTYmMHhGRix0aW1lc2NhbGU+Pj44JjB4RkYsdGltZXNjYWxlJjB4RkYsZHVyYXRpb24+Pj4yNCYweEZGLC8vIGR1cmF0aW9uOiA0IGJ5dGVzXG5kdXJhdGlvbj4+PjE2JjB4RkYsZHVyYXRpb24+Pj44JjB4RkYsZHVyYXRpb24mMHhGRiwweDU1LDB4QzQsLy8gbGFuZ3VhZ2U6IHVuZCAodW5kZXRlcm1pbmVkKVxuMHgwMCwweDAwLy8gcHJlX2RlZmluZWQgPSAwXG5dKSk7fTtNUDQudGtoZD1mdW5jdGlvbihtZXRhKXt2YXIgaWQ9bWV0YS5pZCxwcmVzZW50V2lkdGg9bWV0YS5wcmVzZW50V2lkdGgsdHJhY2s9bWV0YS50cmFjayxkdXJhdGlvbj1tZXRhLmR1cmF0aW9uLHByZXNlbnRIZWlnaHQ9bWV0YS5wcmVzZW50SGVpZ2h0O3ZhciBidWY9bmV3IFVpbnQ4QXJyYXkoWzB4MDAsMHgwMCwweDAwLDB4MDcsLy8gdmVyc2lvbigwKSArIGZsYWdzXG4weDAwLDB4MDAsMHgwMCwweDAwLC8vIGNyZWF0aW9uX3RpbWVcbjB4MDAsMHgwMCwweDAwLDB4MDAsLy8gbW9kaWZpY2F0aW9uX3RpbWVcbmlkPj4+MjQmMHhGRiwvLyB0cmFja19JRDogNCBieXRlc1xuaWQ+Pj4xNiYweEZGLGlkPj4+OCYweEZGLGlkJjB4RkYsMHgwMCwweDAwLDB4MDAsMHgwMCwvLyByZXNlcnZlZDogNCBieXRlc1xuZHVyYXRpb24+Pj4yNCYweEZGLC8vIGR1cmF0aW9uOiA0IGJ5dGVzXG5kdXJhdGlvbj4+PjE2JjB4RkYsZHVyYXRpb24+Pj44JjB4RkYsZHVyYXRpb24mMHhGRiwweDAwLDB4MDAsMHgwMCwweDAwLC8vIHJlc2VydmVkOiAyICogNCBieXRlc1xuMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAxLC8vIGxheWVyKDJieXRlcykgKyBhbHRlcm5hdGVfZ3JvdXAoMmJ5dGVzKVxuMHgwMSwweDAwLDB4MDAsMHgwMCwvLyB2b2x1bWUoMmJ5dGVzKSArIHJlc2VydmVkKDJieXRlcylcbjB4MDAsMHgwMSwweDAwLDB4MDAsLy8gLS0tLWJlZ2luIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cbjB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMSwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0MCwweDAwLDB4MDAsMHgwMCwvLyAtLS0tZW5kIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cbnByZXNlbnRXaWR0aD4+PjgmMHhGRiwvLyBwcmVzZW50V2lkdGggYW5kIHByZXNlbnRIZWlnaHRcbnByZXNlbnRXaWR0aCYweEZGLDB4MDAsMHgwMCxwcmVzZW50SGVpZ2h0Pj4+OCYweEZGLHByZXNlbnRIZWlnaHQmMHhGRiwweDAwLDB4MDBdKTt2YXIgdmlldz1uZXcgRGF0YVZpZXcoYnVmLmJ1ZmZlcik7aWYobWV0YS50eXBlPT09J3ZpZGVvJyl7dmlldy5zZXRVaW50MTYoMzQsMCk7dmlldy5zZXRVaW50MTYoMzYsMCk7fXJldHVybiBNUDQuYm94KE1QNC50eXBlcy50a2hkLGJ1Zik7fTsvLyBNb3ZpZUhlYWRlckJveCAgZGVmaW5lcyBvdmVyYWxsIGluZm9ybWF0aW9uXG5NUDQubXZoZD1mdW5jdGlvbih0aW1lc2NhbGUsZHVyYXRpb24pe3JldHVybiBNUDQuYm94KE1QNC50eXBlcy5tdmhkLG5ldyBVaW50OEFycmF5KFsweDAwLDB4MDAsMHgwMCwweDAwLC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuMHgwMCwweDAwLDB4MDAsMHgwMCwvLyBjcmVhdGlvbl90aW1lXG4weDAwLDB4MDAsMHgwMCwweDAwLC8vIG1vZGlmaWNhdGlvbl90aW1lXG50aW1lc2NhbGU+Pj4yNCYweEZGLC8vIHRpbWVzY2FsZTogNCBieXRlc1xudGltZXNjYWxlPj4+MTYmMHhGRix0aW1lc2NhbGU+Pj44JjB4RkYsdGltZXNjYWxlJjB4RkYsZHVyYXRpb24+Pj4yNCYweEZGLC8vIGR1cmF0aW9uOiA0IGJ5dGVzXG5kdXJhdGlvbj4+PjE2JjB4RkYsZHVyYXRpb24+Pj44JjB4RkYsZHVyYXRpb24mMHhGRiwweDAwLDB4MDEsMHgwMCwweDAwLC8vIFByZWZlcnJlZCByYXRlOiAxLjBcbjB4MDEsMHgwMCwweDAwLDB4MDAsLy8gUHJlZmVycmVkVm9sdW1lKDEuMCwgMmJ5dGVzKSArIHJlc2VydmVkKDJieXRlcylcbjB4MDAsMHgwMCwweDAwLDB4MDAsLy8gcmVzZXJ2ZWQ6IDQgKyA0IGJ5dGVzXG4weDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMSwweDAwLDB4MDAsLy8gLS0tLWJlZ2luIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cbjB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMSwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHg0MCwweDAwLDB4MDAsMHgwMCwvLyAtLS0tZW5kIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cbjB4MDAsMHgwMCwweDAwLDB4MDAsLy8gLS0tLWJlZ2luIHByZV9kZWZpbmVkIDYgKiA0IGJ5dGVzLS0tLVxuMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLDB4MDAsMHgwMCwweDAwLC8vIC0tLS1lbmQgcHJlX2RlZmluZWQgNiAqIDQgYnl0ZXMtLS0tXG4weEZGLDB4RkYsMHhGRiwweEZGLy8gbmV4dF90cmFja19JRFxuXSkpO307TVA0LmluaXQ9ZnVuY3Rpb24oKXsvLyBzZXQgdHlwZSBuYW1lO1xuT2JqZWN0LmtleXMoTVA0LnR5cGVzKS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCl7Ly8gZ2V0IHRoZSBVVEYtMTYgY29kZSBmb3JtYXQgb2YgbmFtZVxuTVA0LnR5cGVzW3ZhbF09W3ZhbC5jaGFyQ29kZUF0KDApLHZhbC5jaGFyQ29kZUF0KDEpLHZhbC5jaGFyQ29kZUF0KDIpLHZhbC5jaGFyQ29kZUF0KDMpXTt9KTt9O01QNC5pbml0KCk7ZXhwb3J0cy5kZWZhdWx0PU1QNDtcblxuLyoqKi8gfSksXG4vKiAyMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PW1pdHQ7ZnVuY3Rpb24gbWl0dCgpe3ZhciBhbGw9T2JqZWN0LmNyZWF0ZShudWxsKTtyZXR1cm57b246ZnVuY3Rpb24gb24odHlwZSxoYW5kbGVyKXsoYWxsW3R5cGVdfHwoYWxsW3R5cGVdPVtdKSkucHVzaChoYW5kbGVyKTt9LC8qKlxuXHRcdCAqIFJlbW92ZSBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAge1N0cmluZ30gdHlwZVx0VHlwZSBvZiBldmVudCB0byB1bnJlZ2lzdGVyIGBoYW5kbGVyYCBmcm9tLCBvciBgXCIqXCJgXG5cdFx0ICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIgSGFuZGxlciBmdW5jdGlvbiB0byByZW1vdmVcblx0XHQgKiBAbWVtYmVyT2YgbWl0dFxuXHRcdCAqL29mZjpmdW5jdGlvbiBvZmYodHlwZSxoYW5kbGVyKXtpZihhbGxbdHlwZV0pe2FsbFt0eXBlXS5zcGxpY2UoYWxsW3R5cGVdLmluZGV4T2YoaGFuZGxlcik+Pj4wLDEpO319LGVtaXQ6ZnVuY3Rpb24gZW1pdCh0eXBlKXtmb3IodmFyIF9sZW49YXJndW1lbnRzLmxlbmd0aCxldnQ9QXJyYXkoX2xlbj4xP19sZW4tMTowKSxfa2V5PTE7X2tleTxfbGVuO19rZXkrKyl7ZXZ0W19rZXktMV09YXJndW1lbnRzW19rZXldO30oYWxsW3R5cGVdfHxbXSkuc2xpY2UoKS5tYXAoZnVuY3Rpb24oaGFuZGxlcil7aGFuZGxlci5hcHBseSh1bmRlZmluZWQsZXZ0KTt9KTsoYWxsWycqJ118fFtdKS5zbGljZSgpLm1hcChmdW5jdGlvbihoYW5kbGVyKXtoYW5kbGVyLmFwcGx5KHVuZGVmaW5lZCxbdHlwZV0uY29uY2F0KGV2dCkpO30pO319O31cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBpbmRleC5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDMpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGViMWYwODQyMDAyODE1ZWJlOWE2IiwiY2xhc3MgTG9ne1xuICAgIGNvbnN0cnVjdG9yKG5hbWUpe1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cbiAgICB3KC4uLm1zZyl7XG4gICAgICAgIGNvbnNvbGUud2FybihcbmBbJHt0aGlzLm5hbWV9XT09PT0+ICR7bmV3IERhdGUoKS50b1RpbWVTdHJpbmcoKX1cbiAgICAgICAgICAgICAgOiBgLC4uLm1zZ1xuICAgICAgICAgICAgICApO1xuICAgIH1cbiAgICBsKG1zZyl7XG4gICAgICAgIGNvbnNvbGUubG9nKFxuYFske3RoaXMubmFtZX1dPT09PT4gJHtuZXcgRGF0ZSgpLnRvVGltZVN0cmluZygpfVxuICAgICAgICAgICAgICA6ICR7bXNnfWBcbiAgICAgICAgICAgICAgKTsgICAgICBcbiAgICB9XG4gICAgZShtc2cpe1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuYFske3RoaXMubmFtZX1dPT09PT4gJHtuZXcgRGF0ZSgpLnRvVGltZVN0cmluZygpfVxuICAgICAgICAgICAgICA6ICR7bXNnfWBcbiAgICAgICAgICAgICAgKTsgICAgIFxuICAgIH1cbiAgICBpKG1zZyl7XG4gICAgICAgIGNvbnNvbGUuaW5mbyhcbmBbJHt0aGlzLm5hbWV9XT09PT0+ICR7bmV3IERhdGUoKS50b1RpbWVTdHJpbmcoKX1cbiAgICAgICAgICAgICAgOiAke21zZ31gXG4gICAgICAgICAgICAgICk7ICAgIFxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTG9nO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9sb2cuanMiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuXG4gIGlmIChpc1VuZGVmaW5lZChnbG9iYWwucHJvY2VzcykpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59O1xuXG5cbnZhciBkZWJ1Z3MgPSB7fTtcbnZhciBkZWJ1Z0Vudmlyb247XG5leHBvcnRzLmRlYnVnbG9nID0gZnVuY3Rpb24oc2V0KSB7XG4gIGlmIChpc1VuZGVmaW5lZChkZWJ1Z0Vudmlyb24pKVxuICAgIGRlYnVnRW52aXJvbiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUcgfHwgJyc7XG4gIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xuICBpZiAoIWRlYnVnc1tzZXRdKSB7XG4gICAgaWYgKG5ldyBSZWdFeHAoJ1xcXFxiJyArIHNldCArICdcXFxcYicsICdpJykudGVzdChkZWJ1Z0Vudmlyb24pKSB7XG4gICAgICB2YXIgcGlkID0gcHJvY2Vzcy5waWQ7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbXNnID0gZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge307XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWJ1Z3Nbc2V0XTtcbn07XG5cblxuLyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqL1xuLyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIGV4cG9ydHMuX2V4dGVuZChjdHgsIG9wdHMpO1xuICB9XG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn1cbmV4cG9ydHMuaW5zcGVjdCA9IGluc3BlY3Q7XG5cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXG5pbnNwZWN0LmNvbG9ycyA9IHtcbiAgJ2JvbGQnIDogWzEsIDIyXSxcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxuICAndW5kZXJsaW5lJyA6IFs0LCAyNF0sXG4gICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcbiAgJ2dyZXknIDogWzkwLCAzOV0sXG4gICdibGFjaycgOiBbMzAsIDM5XSxcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXG4gICdjeWFuJyA6IFszNiwgMzldLFxuICAnZ3JlZW4nIDogWzMyLCAzOV0sXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxuICAncmVkJyA6IFszMSwgMzldLFxuICAneWVsbG93JyA6IFszMywgMzldXG59O1xuXG4vLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGVcbmluc3BlY3Quc3R5bGVzID0ge1xuICAnc3BlY2lhbCc6ICdjeWFuJyxcbiAgJ251bWJlcic6ICd5ZWxsb3cnLFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuICAndW5kZWZpbmVkJzogJ2dyZXknLFxuICAnbnVsbCc6ICdib2xkJyxcbiAgJ3N0cmluZyc6ICdncmVlbicsXG4gICdkYXRlJzogJ21hZ2VudGEnLFxuICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuICAncmVnZXhwJzogJ3JlZCdcbn07XG5cblxuZnVuY3Rpb24gc3R5bGl6ZVdpdGhDb2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIHJldHVybiAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcbiAgICAgICAgICAgJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgcmV0dXJuIHN0cjtcbn1cblxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG4gICAgICB2YWx1ZSAmJlxuICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICB9XG5cbiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxuICBpZiAoaXNFcnJvcih2YWx1ZSlcbiAgICAgICYmIChrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwIHx8IGtleXMuaW5kZXhPZignZGVzY3JpcHRpb24nKSA+PSAwKSkge1xuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG4gIGlmIChpc051bGwodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcbiAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7XG4gICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTtcbiAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cblxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgdmFyIG51bUxpbmVzRXN0ID0gMDtcbiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgbnVtTGluZXNFc3QrKztcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXG4gICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSByZXF1aXJlKCcuL3N1cHBvcnQvaXNCdWZmZXInKTtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5cbmZ1bmN0aW9uIHBhZChuKSB7XG4gIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuLnRvU3RyaW5nKDEwKSA6IG4udG9TdHJpbmcoMTApO1xufVxuXG5cbnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJyxcbiAgICAgICAgICAgICAgJ09jdCcsICdOb3YnLCAnRGVjJ107XG5cbi8vIDI2IEZlYiAxNjoxOTozNFxuZnVuY3Rpb24gdGltZXN0YW1wKCkge1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRNaW51dGVzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7XG4gIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7XG59XG5cblxuLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcFxuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7XG59O1xuXG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLlxuICpcbiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmVcbiAqIGZ1bmN0aW9uIChub3Qgb24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZFxuICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcbiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhc1xuICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZVxuICogICAgIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuICovXG5leHBvcnRzLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZXhwb3J0cy5fZXh0ZW5kID0gZnVuY3Rpb24ob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIG9yaWdpbjtcbn07XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdXRpbC91dGlsLmpzIiwiZXhwb3J0cy5kb3dubG9hZCA9IGZ1bmN0aW9uIChtcDQpIHtcblx0bGV0IGJsb2IgPSBuZXcgQmxvYihtcDQsIHtcblx0XHQvLyB0eXBlOiAndmlkZW8vbXA0J1xuXHRcdHR5cGU6ICdhcHBsaWNhdGlvbi9vY3RldC1iaW5hcnknXG5cdH0pO1xuXHR2YXIgdXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cdHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXHRhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdGEuaHJlZiA9IHVybDtcblx0YS5kb3dubG9hZCA9ICd0ZXN0Lm1wNCc7XG5cdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XG5cdGEuY2xpY2soKTtcblx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhKTtcblx0XHR3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuXHR9LCAxMDApO1xufVxuXG5leHBvcnRzLmRvd25maWxlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdHlwZSkge1xuXHRsZXQgbXA0ID0gbmV3IEZpbGUoW2J1ZmZlcl0sICdjZS5tcDQnLCB7XG5cdFx0dHlwZTogJ3ZpZGVvL21wNCdcblx0fSk7XG5cdGxldCB1cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChtcDQpO1xuXHRsZXQgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblx0YS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRhLmhyZWYgPSB1cmw7XG5cdGEuZG93bmxvYWQgPSB0eXBlICsgJy5tcDQnO1xuXHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpO1xuXHRhLmNsaWNrKCk7XG5cdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYSk7XG5cdFx0d2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcblx0fSwgMTAwKTtcbn1cblxuZXhwb3J0cy5kb3duRkxWPSBmdW5jdGlvbiAoYnVmZmVyLCB0eXBlKSB7XG5cdGxldCBtcDQgPSBuZXcgRmlsZShbYnVmZmVyXSwgJ2NlLmZsdicsIHtcblx0XHR0eXBlOiAndmlkZW8veC1mbHYnXG5cdH0pO1xuXHRsZXQgdXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwobXA0KTtcblx0bGV0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cdGEuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0YS5ocmVmID0gdXJsO1xuXHRhLmRvd25sb2FkID0gdHlwZSArICcuZmx2Jztcblx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTtcblx0YS5jbGljaygpO1xuXHRzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGEpO1xuXHRcdHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7XG5cdH0sIDEwMCk7XG59XG5cbmV4cG9ydHMuZG93bkF1ZGlvID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuXHRsZXQgbXA0ID0gbmV3IEZpbGUoW2J1ZmZlcl0sICdjZS5tcGVnJywge1xuXHRcdHR5cGU6ICdhdWRpby9tcGVnJ1xuXHR9KTtcblx0bGV0IHVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG1wNCk7XG5cdGxldCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXHRhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdGEuaHJlZiA9IHVybDtcblx0YS5kb3dubG9hZCA9ICd0ZXN0Lm1wMyc7XG5cdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XG5cdGEuY2xpY2soKTtcblx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhKTtcblx0XHR3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuXHR9LCAxMDApO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QnVmZmVyfSBwYXJhbTogbW9yZSB0aGFuIG9uZSBwYXJhbXMgdG8gY3JlYXRlIGEgY29tYmluZWQgYnVmZmVyXG4gKi9cbmV4cG9ydHMubWVyZ2Vib3ggPSBmdW5jdGlvbiAoKSB7XG5cdGxldCBib3hlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cblx0bGV0IGJveExlbmd0aCA9IGJveGVzLnJlZHVjZSgocHJlLCB2YWwpID0+IHtcblx0XHRyZXR1cm4gcHJlICsgdmFsLmJ5dGVMZW5ndGg7XG5cdH0sIDApO1xuXG5cdGxldCBidWZmZXIgPSBuZXcgVWludDhBcnJheShib3hMZW5ndGgpO1xuXG5cdGxldCBvZmZzZXQgPSAwO1xuXG5cdGJveGVzLmZvckVhY2goYm94ID0+IHtcblx0XHRib3ggPSBuZXcgVWludDhBcnJheShib3gpO1xuXHRcdGJ1ZmZlci5zZXQoYm94LCBvZmZzZXQpO1xuXHRcdG9mZnNldCArPSBib3guYnl0ZUxlbmd0aDtcblx0fSk7XG5cblx0cmV0dXJuIGJ1ZmZlcjtcbn1cblxuLyoqXG4gKiBjb21iaW5lIGJ1ZmZlciBhbmQgZG93bmxvYWQgaXRzIE1JTUUgdHlwZSBsaWtlIG1wNFxuICovXG5leHBvcnRzLmNvbmNhdEJ1ZmZlciA9IChmdW5jdGlvbiAoKSB7XG5cdGxldCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoMCk7XG5cdGxldCBfdGhpcyA9IGV4cG9ydHM7XG5cdHJldHVybiBmdW5jdGlvbiAoc2VnbWVudCxsZW5ndGgpIHtcblx0XHRidWZmZXIgPSBfdGhpcy5tZXJnZWJveChidWZmZXIsc2VnbWVudC5idWZmZXIpO1xuXHRcdFxuXHRcdGlmKGJ1ZmZlci5ieXRlTGVuZ3RoID4gbGVuZ3RoKSBfdGhpcy5kb3duZmlsZShidWZmZXIsJ3ZpZGVvJyk7XG5cdH1cbn0pKClcblxuXG5leHBvcnRzLnN0b3AgPSAoZnVuY3Rpb24oKXtcblx0bGV0IG51bSA9IDA7XG5cblx0cmV0dXJuIGZ1bmN0aW9uKGxpbWl0KXtcblx0XHRjb25zb2xlLmxvZyhudW0pO1xuXHRcdHJldHVybiBsaW1pdCA8PSBudW0rKztcblx0fVxuXG5cbn0pKCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kZWJ1Zy9oZWxwZXIuanMiLCJpbXBvcnQgSFRUUENodW5rZWQgZnJvbSAnLi4vc3JjL2h0dHBmbHYvc3JjJztcbmltcG9ydCBNdXhDb250cm9sbGVyIGZyb20gJy4uL3NyYy9tdXgnO1xuaW1wb3J0IHtkb3duZmlsZSxkb3dubG9hZCxkb3duRkxWfSBmcm9tICdkZWJ1Zy9oZWxwZXInO1xuXG5cbmxldCBodHRwQ2h1bmtlZCA9IG5ldyBIVFRQQ2h1bmtlZCgnaHR0cDovLzY3MjEubGl2ZXBsYXkubXlxY2xvdWQuY29tL2xpdmUvNjcyMV85OGFkNDMwYmEzOTBhMmNhYWZlNTk1MTI1MGNiYzY3ZC5mbHYnKTtcbmxldCBtdXhDb250cm9sbGVyID0gbmV3IE11eENvbnRyb2xsZXIoKTtcblxuLyoqXG4gKiBEcm9wIFRlc3RDYXNlXG4gKi9cblxuLy8gIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4vLyAgICAgaHR0cENodW5rZWQuZHJvcCgpO1xuLy8gIH0sIDIwMDApO1xuXG5cblxuLyoqXG4gKiBSZXBsYWNlIFRlc3RDYXNlXG4gKi9cblxuLy8gaHR0cENodW5rZWQucmVwbGFjZSgnaHR0cDovLzY3MjEubGl2ZXBsYXkubXlxY2xvdWQuY29tL2xpdmUvNjcyMV85MjkwNmIyMGVhYmUyNjYzYTJmYjUyNTA4Mzc3Yjg0My5mbHYnKTtcblxuXG4vKipcbiAqIFJldHJ5IFRlc3RDYXNlXG4gKi9cblxuLy8gIGh0dHBDaHVua2VkLnJldHJ5KCk7XG5cbi8qKlxuICogU3RyZWFtIEV2ZW50IFRlc3RDYXNlXG4gKi9cblxuIGh0dHBDaHVua2VkLmJpbmQoJ3N0cmVhbScsKHN0cmVhbSx0eXBlKT0+e1xuXG4gICAgICAgIC8vIGRvd25GTFYoc3RyZWFtLCd2aWRlbycpO1xuICAgICAgICBtdXhDb250cm9sbGVyLnBhcnNlKHN0cmVhbSx0eXBlKTtcbiAgICBcbiAgICBcbiAgICBcblxuIH0pXG5cblxuIC8qKlxuICAqIEVuZCBFdmVudCBUZXN0Q2FzZVxuICAqL1xuXG4vLyBUT0RPIFxuLy8gMS4gYmluZFxuLy8gMi4gZW5kXG4vLyAzLiBzdGFydFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3Rlc3QvaW5kZXguanMiLCJpbXBvcnQgTWl0dCBmcm9tICdsaWIvbWl0dCc7XG5pbXBvcnQge1xuICAgIEhUVFBDQU5DRUwsXG4gICAgQ0hVTktFRFNUUkVBTSxcbiAgICBDSFVOS0VERU5ELFxuICAgIENIVU5LRURFUlJcbn0gZnJvbSAnbGliL2NvbnN0YW50cyc7XG5pbXBvcnQge21lcmdlQnVmZmVyfSBmcm9tICdsaWIvdXRpbHMnO1xuaW1wb3J0IEhlYWRlclJlYWQgZnJvbSAnLi4vbGliL2hlYWRlcic7XG5pbXBvcnQgeyBkZWJ1ZyB9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IHtzdG9wfSBmcm9tICdkZWJ1Zy9oZWxwZXInO1xuXG5jbGFzcyBIVFRQQ2h1bmtlZCBleHRlbmRzIEhlYWRlclJlYWQge1xuICAgIGNvbnN0cnVjdG9yKHVybCA9ICcnKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgaWYgKCF3aW5kb3cuZmV0Y2gpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigneW91ciBicm93c2VyIGRvblwidCBzdXBwb3J0IGZldGNoIEFQSSwgcGxlYXNlIHVzZSBtb2Rlcm4gQnJvd3NlcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZW1pdHRlciA9IE1pdHQoKTtcbiAgICAgICAgdGhpcy5fdXJsID0gdXJsO1xuICAgICAgICB0aGlzLl9DQUxDRUwgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fRVJST1IgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fY2h1bmsgPSBuZXcgQXJyYXlCdWZmZXIoMCk7XG5cbiAgICAgICAgdGhpcy5fYnVmZmVyTGVuO1xuICAgICAgICB0aGlzLl9yZWFkTGVuID0gMDtcblxuICAgICAgICB0aGlzLl9yZXR1cm5BcnIgPSBbXTtcblxuXG4gICAgICAgIHVybCAmJiB0aGlzLl9mZXRjaCh1cmwpO1xuICAgIH1cbiAgICBfZmV0Y2godXJsKSB7XG4gICAgICAgIHRoaXMuX3N0YXJ0KCk7XG5cbiAgICAgICAgZmV0Y2godXJsKVxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcmVhZGVyID0gcmVzLmJvZHkuZ2V0UmVhZGVyKCk7XG5cbiAgICAgICAgICAgICAgICByZWFkZXIucmVhZCgpLnRoZW4oZnVuY3Rpb24gY2h1bmtlZFJlYWRlcih7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgICAgfSkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gXG4gICAgICAgICAgICAgICAgICAgIC8vIDEuIHdoZW4gdXNlIGRlaWNpZGUgdG8gZHJvcCB0aGUgdXJsXG4gICAgICAgICAgICAgICAgICAgIC8vIDIuIHdoZW4gZGV2ZWxvcGVyIHdhbm5hIHN3aXRjaCB0byBhbm90aGVyIHVybFxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fQ0FMQ0VMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgdXNlciBkcm9wIHRoaXMgdmlkZW9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkcm9wIHRoaXMgdXJsLCAnLCB1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmJvZHkuY2FuY2VsKFwidGhlIHVzZXIgZGVjaWRlIHRvIGRyb3BcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW1pdChIVFRQQ0FOQ0VMKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbWl0KENIVU5LRURFTkQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2RvbnRcInQgc3VwcG9ydCBkcm9wKCkuIGJlY2F1c2UgeW91IGJyb3dlciBkb25cInQgc3VwcG9ydCByZWFkZXIucmVsZWFzZUxvY2soKSBBUEkgXFxuJywgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndGhlIGNodW5rZWQgY29ubmVjdGlvbiBoYXMgc3RvcHBlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW1pdChDSFVOS0VERU5EKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2V2ZXJ5IHNlZ21lbnQgbGVuIGlzICcsIHZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuX2VtaXQoQ0hVTktFRFNUUkVBTSwgdmFsdWUpOyAvLyB0cmlnZ2VyIHRoZSByZWFkZSBzdHJlYW1cbiAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkQ2h1bmsodmFsdWUuYnVmZmVyKTtcblxuICAgICAgICAgICAgICAgICAgICBpZihzdG9wKDUwMCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wKCk7IC8vIFRPRE8gZGVidWdnZXJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5yZWFkKCkudGhlbihjaHVua2VkUmVhZGVyLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9FUlJPUiA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0KENIVU5LRURFUlIsIGVycik7XG5cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH0pXG4gICAgfVxuICAgIC8vIGV4dHJhY3QgdGhlIHRhZyBkYXRhXG4gICAgICAgIC8vIHJlYWRlciBib2R5XG4gICAgICAgIC8vIHJlYWRlciBUYWdcbiAgICAgICAgLy8gIHNjcmlwdFxuICAgICAgICAvLyAgdmlkZW9cbiAgICAgICAgLy8gIGF1ZGlvXG4gICAgcmVhZENodW5rKGNodW5rKSB7XG4gICAgICAgIC8vIHJlZGVyIEZMViBoZWFkZXJcbiAgICAgICAgdGhpcy5fY2h1bmsgPSBtZXJnZUJ1ZmZlcih0aGlzLl9jaHVuayxjaHVuayk7XG5cbiAgICAgICAgbGV0IHRtcERhdGEsYWIsdmlldztcblxuICAgICAgICB0aGlzLl9idWZmZXJMZW4gPSB0aGlzLl9jaHVuay5ieXRlTGVuZ3RoO1xuICAgICAgICB0aGlzLl9yZWFkTGVuID0gMDtcbiAgICAgICAgdGhpcy5fcmV0dXJuQXJyID0gW107XG4gICAgICAgIFxuICAgICAgICBsZXQgdHlwZSA9ICdNUyc7XG4gICAgICAgIFxuXG4gICAgICAgIHdoaWxlKHRoaXMuX2J1ZmZlckxlbiAtIHRoaXMuX3JlYWRMZW4gPiAxMSl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYWIgPSBuZXcgVWludDhBcnJheSh0aGlzLl9jaHVuayk7XG5cblxuICAgICAgICAgICAgLy8gcmVhZGVyIEZMViBGaWxlIEhlYWRlclxuICAgICAgICAgICAgaWYgKGFiWzBdID09PSAweDQ2ICYmIGFiWzFdID09PSAweDRDICYmIGFiWzJdID09PSAweDU2KSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gcmVhZGVyIEZMViBoZWFkZXJcbiAgICAgICAgICAgICAgICB0bXBEYXRhID0gdGhpcy5fZmx2SGVhZGVyKHRoaXMuX2NodW5rLnNsaWNlKDAsOSkpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fcmV0dXJuQXJyLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBidWZmZXI6dG1wRGF0YS5idWZmZXIsXG4gICAgICAgICAgICAgICAgICAgIGluZm86e1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTp0bXBEYXRhLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOnRtcERhdGEudmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ09mZnNldDogdG1wRGF0YS50YWdPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNBdWRpbzogdG1wRGF0YS5oYXNBdWRpbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc1ZpZGVvOiB0bXBEYXRhLmhhc1ZpZGVvLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkTGVuICs9IDk7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2h1bmsgPSB0aGlzLl9jaHVuay5zbGljZSg5KTtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSAnSVMnO1xuXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJlYWRlciBEYXRhU2l6ZVxuICAgICAgICAgICAgdmlldyA9IG5ldyBEYXRhVmlldyh0aGlzLl9jaHVuayk7XG5cbiAgICAgICAgICAgIC8vIGdldCB0aGUgcHJldmlvdXMgdGFnIHNpemVcbiAgICAgICAgICAgIGxldCBwcnZEYXRhU2l6ZSA9IHZpZXcuZ2V0VWludDMyKDApO1xuICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGxldCBkYXRhU2l6ZSA9IHZpZXcuZ2V0VWludDMyKDQpICYgMTY3NzcyMTU7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGFTaXplKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYodGhpcy5fYnVmZmVyTGVuIC0gdGhpcy5fcmVhZExlbiA8IDExICsgZGF0YVNpemUpe1xuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIHJlbWFpbmVkIGRhdGEgaXMgbm90IGEgY29tcGxldGUgdGFnLCByZXR1cm47XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLl9yZXR1cm5BcnIpO1xuICAgICAgICAgICAgLy8gZGVjb2RlIEZsdiB0YWdcbiAgICAgICAgICAgIHRtcERhdGEgPSB0aGlzLl9mbHZUYWcodGhpcy5fY2h1bmsuc2xpY2UoNCkpO1xuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX3JldHVybkFyci5wdXNoKHtcbiAgICAgICAgICAgICAgICBidWZmZXI6dG1wRGF0YS5idWZmZXIsXG4gICAgICAgICAgICAgICAgaW5mbzp7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6dG1wRGF0YS50eXBlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhT2Zmc2V0OnRtcERhdGEuZGF0YU9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVNpemU6dG1wRGF0YS5kYXRhU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgdGltZVN0YW1wOnRtcERhdGEudGltZVN0YW1wLFxuICAgICAgICAgICAgICAgICAgICB0YWdMZW46dG1wRGF0YS50YWdMZW5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5fY2h1bmsgPSB0aGlzLl9jaHVuay5zbGljZSh0bXBEYXRhLnRhZ0xlbiArIDQpOyAvLyBwcnZUYWcgc2l6ZVxuICAgICAgICAgICAgdGhpcy5fcmVhZExlbiArPSB0bXBEYXRhLnRhZ0xlbiArIDQ7XG4gXG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXRlY3QgdGhlIGFyciBpcyBlbXB0eSwgdGhlbiBkb24ndCByZXR1cm5cbiAgICAgICAgaWYoIXRoaXMuX3JldHVybkFyci5sZW5ndGgpIHJldHVybjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIHR5cGUgY29udGFpbiBJUy9NUzpcbiAgICAgICAgICogICAgICBJUzogaW5pdGlhbCBTZWdtZW50XG4gICAgICAgICAqICAgICAgTVM6IG1lZGlhIFNlZ21lbnRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2VtaXQoQ0hVTktFRFNUUkVBTSwgdGhpcy5fcmV0dXJuQXJyLHR5cGUpO1xuXG4gICAgICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmw6IHJlcGxhY2UgdGhlIG9yaWdpbiB1cmwgdG8gYSBuZXcgdXJsIE9iamVjdFxuICAgICAqL1xuICAgIHJlcGxhY2UodXJsKSB7XG4gICAgICAgIHRoaXMuX3VybCA9IHVybDtcblxuICAgICAgICB0aGlzLmRyb3AoKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZldGNoKHVybCk7XG4gICAgICAgICAgICB9KVxuXG4gICAgfVxuICAgIHJldHJ5KCkge1xuICAgICAgICBjb25zb2xlLmxvZygncmV0cnknKTtcblxuICAgICAgICAvLyB3aGVuIG1lZXQgZXJyb3IsIGRpcmVjdGx5IGZldGNoIHRoZSByZXNvdXJjZVxuICAgICAgICBpZiAodGhpcy5fRVJST1IpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mZXRjaCh0aGlzLl91cmwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2hlbiB0aGUgZmV0Y2ggaXMgZ29vZCwgZHJvcCBpdCBhbmQgZmV0Y2ggYSBuZXcgb25lXG4gICAgICAgIHRoaXMuZHJvcCgpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmV0Y2godGhpcy5fdXJsKTtcbiAgICAgICAgICAgIH0pXG5cbiAgICB9XG4gICAgLyoqXG4gICAgICogdHJpZ2dlcmluZyBjb25kaXRpb246XG4gICAgICogIDEuIHdoZW4gZGV2ZWxvcCB3YW5uYSB1c2Ugb3RoZXIgdXJsLCBsaWtlIGNhbGxpbmcgcmV0cnkoeHgpXG4gICAgICogIDIuIHdoZW4gc3RhcnQgYSBuZXcgZmV0Y2gsIHJlc2V0IHRoZSBjYW5jYWwncyBzdGF0ZVxuICAgICAqL1xuICAgIF9zdGFydCgpIHtcbiAgICAgICAgdGhpcy5fQ0FMQ0VMID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX0VSUk9SID0gZmFsc2U7XG4gICAgfVxuICAgIGRyb3AoKSB7XG4gICAgICAgIHRoaXMuX0NBTENFTCA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb24oSFRUUENBTkNFTCwgKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgcmVzKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cbiAgICBhZGRFdmVudExpc3RlbmVyKG5hbWUsIGZuKSB7XG4gICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgY2FzZSAnc3RyZWFtJzpcbiAgICAgICAgICAgICAgICB0aGlzLl9vbihDSFVOS0VEU1RSRUFNLCAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmbiguLi5hcmdzKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIHRoaXMuX29uKENIVU5LRURFTkQsICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGZuKC4uLmFyZ3MpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgICAgICAgICB0aGlzLl9vbihDSFVOS0VERVJSLCAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmbiguLi5hcmdzKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuX29uKG5hbWUsICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGZuKC4uLmFyZ3MpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbiAgICBiaW5kKC4uLmFyZ3Mpe1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoLi4uYXJncyk7XG4gICAgfVxuICAgIG9uKC4uLmFyZ3Mpe1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoLi4uYXJncyk7XG4gICAgfVxuICAgIFxuICAgIF9vbiguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIub24oLi4uYXJncyk7XG4gICAgfVxuICAgIF9lbWl0KC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KC4uLmFyZ3MpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSFRUUENodW5rZWQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2h0dHBmbHYvc3JjL2luZGV4LmpzIiwiZXhwb3J0IGNvbnN0IEhUVFBDQU5DRUwgPSAnSFRUUENBTkNFTCc7IC8vIGFib3J0IHRoZSBmZXRjaCBldmVudFxuXG4vKipcbiAqIHRocmVlIGZsYWdzXG4gKi9cbmV4cG9ydCBjb25zdCBDSFVOS0VEU1RSRUFNPSdDSFVOS0VEU1RSRUFNJzsgLy8gaW5kaWNhdGUgcmVjZXZpbmcgdGhlIHN0cmVhbSBjb250aW51c2x5XG5leHBvcnQgY29uc3QgQ0hVTktFREVORD0nQ0hVTktFREVORCc7ICAgLy8gaW5kaWNhdGUgdGhlIGVuZCBvZiBzdHJlYW1cbmV4cG9ydCBjb25zdCBDSFVOS0VERVJSPSdDSFVOS0VERVJSJzsgICAvLyBpbmRpY2F0ZSB0aGVyZSBpcyBzb21lIGVycm9yIG9mIHN0cmVhbVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9jb25zdGFudHMuanMiLCJleHBvcnQgY29uc3QgbWVyZ2VCdWZmZXIgPSAoLi4uYnVmZmVycykgPT4ge1xuICAgIC8vIGJ1ZmZlcnMgYXJlIGFycmF5QnVmZmVyXG4gICAgbGV0IGJveExlbmd0aCA9IGJ1ZmZlcnMucmVkdWNlKChwcmUsIHZhbCkgPT4ge1xuICAgICAgICByZXR1cm4gcHJlICsgdmFsLmJ5dGVMZW5ndGg7XG4gICAgfSwgMCk7XG5cbiAgICBsZXQgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYm94TGVuZ3RoKTtcblxuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIFxuICAgIGJ1ZmZlcnMuZm9yRWFjaChib3ggPT4ge1xuICAgICAgICBidWZmZXIuc2V0KG5ldyBVaW50OEFycmF5KGJveCksIG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSBib3guYnl0ZUxlbmd0aDtcbiAgICB9KTtcblxuXG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXI7XG59XG5cbi8vIGdldCBVbml0OEFycmF5XG4vLyByZXR1cm4gVW5pdDhBcnJheVxuZXhwb3J0IGNvbnN0IG1lcmdlVHlwZWRBcnJheSA9ICguLi5idWZmZXJzKSA9PiB7XG4gICAgLy8gYnVmZmVycyBhcmUgYXJyYXlCdWZmZXJcbiAgICBsZXQgYm94TGVuZ3RoID0gYnVmZmVycy5yZWR1Y2UoKHByZSwgdmFsKSA9PiB7XG4gICAgICAgIHJldHVybiBwcmUgKyB2YWwuYnl0ZUxlbmd0aDtcbiAgICB9LCAwKTtcblxuICAgIGxldCBidWZmZXIgPSBuZXcgVWludDhBcnJheShib3hMZW5ndGgpO1xuXG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgXG4gICAgYnVmZmVycy5mb3JFYWNoKGJveCA9PiB7XG4gICAgICAgIGJ1ZmZlci5zZXQoYm94LCBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gYm94LmJ5dGVMZW5ndGg7XG4gICAgfSk7XG5cblxuICAgIHJldHVybiBidWZmZXI7XG59XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi91dGlscy5qcyIsImltcG9ydCB7IGRlYnVnIH0gZnJvbSBcInV0aWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGVhZGVyUmVhZHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLl90eXBlID0ge1xuICAgICAgICAgICAgODonYXVkaW8nLFxuICAgICAgICAgICAgOTondmlkZW8nLFxuICAgICAgICAgICAgMTg6J3NjcmlwdCdcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZmx2SGVhZGVyKGNodW5rKXtcbiAgICAgICAgbGV0IGRhdGEgPSBjaHVuay5zbGljZSgzKTtcbiAgICAgICAgbGV0IHZpZXcgPSBuZXcgRGF0YVZpZXcoZGF0YSksXG4gICAgICAgICB2ZXJzaW9uID0gdmlldy5nZXRVaW50OCgwKSxcbiAgICAgICAgIGZsYWdzID0gdmlldy5nZXRVaW50OCgxKSxcbiAgICAgICAgIHRhZ09mZnNldCA9IHZpZXcuZ2V0VWludDMyKDIpO1xuXG4gICAgICAgIGxldCBoYXNWaWRlbyA9IHRydWUsXG4gICAgICAgICAgICBoYXNBdWRpbyA9IHRydWU7XG5cblxuICAgICAgICAgaWYoZmxhZ3MgIT09IDUpe1xuICAgICAgICAgICAgaGFzQXVkaW8gPSAhIShmbGFncyAmIDQgPj4gMik7XG4gICAgICAgICAgICBoYXNWaWRlbyA9ICEhKGZsYWdzICYgMSk7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC8vIFRPRE8gaGVhZGVyIG9mZnNldFxuICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICB0eXBlOidoZWFkZXInLFxuICAgICAgICAgICAgIHZlcnNpb24sXG4gICAgICAgICAgICAgdGFnT2Zmc2V0LFxuICAgICAgICAgICAgIGhhc0F1ZGlvLFxuICAgICAgICAgICAgIGhhc1ZpZGVvLFxuICAgICAgICAgICAgIGJ1ZmZlcjpjaHVua1xuICAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgX2ZsdlRhZyhjaHVuayl7XG4gICAgICAgIGxldCB2aWV3ID0gbmV3IERhdGFWaWV3KGNodW5rKTtcblxuICAgICAgICBsZXQgdHlwZSA9IHRoaXMuX3R5cGVbdmlldy5nZXRVaW50OCgwKV07XG5cbiAgICAgICAgbGV0IGRhdGFTaXplID0gdmlldy5nZXRVaW50MzIoMCkgJiAxNjc3NzIxNTtcblxuICAgICAgICBsZXQgZGF0YU9mZnNldCA9IDExO1xuXG4gICAgICAgIGxldCB0aW1lU3RhbXAgPSB2aWV3LmdldFVpbnQzMig0KSA+PiA4O1xuXG4gICAgICAgIGxldCB1cHBlclRpbWUgPSB2aWV3LmdldFVpbnQ4KDcpO1xuXG4gICAgICAgIGlmKHVwcGVyVGltZSAhPT0gMCl7XG4gICAgICAgICAgICB0aW1lU3RhbXB8PSAodXBwZXJUaW1lIDw8IDI0KTtcbiAgICAgICAgfVxuXG5cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGRhdGFTaXplLFxuICAgICAgICAgICAgdGltZVN0YW1wLFxuICAgICAgICAgICAgZGF0YU9mZnNldCxcbiAgICAgICAgICAgIHRhZ0xlbjpkYXRhU2l6ZStkYXRhT2Zmc2V0LFxuICAgICAgICAgICAgYnVmZmVyOmNodW5rLnNsaWNlKDAsZGF0YVNpemUgKyBkYXRhT2Zmc2V0KVxuICAgICAgICB9XG5cbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2h0dHBmbHYvbGliL2hlYWRlci5qcyIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2goZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxuXHRcdGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7XG4gIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCdcbiAgICAmJiB0eXBlb2YgYXJnLmNvcHkgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcyIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJpbXBvcnQgTG9nIGZyb20gJ2xpYi9sb2cnO1xuaW1wb3J0IEJhc2VJbmZvIGZyb20gJy4vbGliL2Jhc2VpbmZvJztcbmltcG9ydCBBTUYgZnJvbSAnLi9saWIvYW1mJztcbmltcG9ydCBBVkMgZnJvbSAnLi9hdmNkZW11eCc7XG5pbXBvcnQgQUFDIGZyb20gJy4vYWFjZGVtdXgnO1xuXG5cbmNvbnN0IGxvZyA9IG5ldyBMb2coJ0ZMVkRlbXV4Jyk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZMVkRlbXV4IGV4dGVuZHMgQmFzZUluZm8ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl90eXBlID0ge1xuICAgICAgICAgICAgaGVhZGVyOiAnaGVhZGVyJyxcbiAgICAgICAgICAgIHZpZGVvOiBcInZpZGVvXCIsXG4gICAgICAgICAgICBhdWRpbzogXCJhdWRpb1wiLFxuICAgICAgICAgICAgc2NyaXB0OiBcInNjcmlwdFwiXG4gICAgICAgIH1cblxuICAgICAgICAvLyB3ZSBkb24ndCBnZXQgcmV0dXJuIG9mIGZ1bmN0aW9uIHRvIHNhdmUgdmFsdWVzIGp1c3QgcGFzcyB0aGUgdmlkZW8gYW5kIGF1ZGlvXG4gICAgICAgIC8vIG9iamVjdCB0byBzYXZlIHZhbHVlcyBhbGwgZm9sbG93aW5nIGNvZGUgaGF2ZSBvbmx5IG9uZSBlbnRyeSAtLSBwYXJzZSgpXG4gICAgICAgIHRoaXMuQVZDID0gbmV3IEFWQyh7XG4gICAgICAgICAgICB2aWRlb1RyYWNrOiB0aGlzLl92aWRlb1RyYWNrLFxuICAgICAgICAgICAgbWVkaWFJbmZvOiB0aGlzLl9tZWRpYUluZm9cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuQUFDID0gbmV3IEFBQyh7XG4gICAgICAgICAgICBhdWRpb1RyYWNrOiB0aGlzLl9hdWRpb1RyYWNrLFxuICAgICAgICAgICAgbWVkaWFJbmZvOiB0aGlzLl9tZWRpYUluZm9cbiAgICAgICAgfSk7XG5cbiAgICB9XG4gICAgcGFyc2UoY2h1bmtBcnJheSkge1xuICAgICAgICBmb3IgKHZhciBjaHVuayBvZiBjaHVua0FycmF5KSB7XG4gICAgICAgICAgICBsZXQgaW5mbyA9IGNodW5rLmluZm87XG4gICAgICAgICAgICBzd2l0Y2ggKGluZm8udHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fdHlwZS5oZWFkZXI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhSW5mby5oYXNWaWRlbyA9IGluZm8uaGFzVmlkZW87XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhSW5mby5oYXNBdWRpbyA9IGluZm8uaGFzQXVkaW87XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5fdHlwZS52aWRlbzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9tZWRpYUluZm8uaGFzVmlkZW8pIHJldHVybiBsb2cudygnVGhlIEZMVmhlYWRlciBpbmRpY2F0ZXMgaGFzVmlkZW8gJywgdGhpcy5faGFzVmlkZW8sICcgYnV0IGFjY2lkZW50YWxseSBlbm91bnRlciBhIHZpZGVvIHRhZycsIGNodW5rKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJzZVZpZGVvKGNodW5rKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLl90eXBlLmF1ZGlvOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX21lZGlhSW5mby5oYXNBdWRpbykgcmV0dXJuIGxvZy53KCdUaGUgRkxWaGVhZGVyIGluZGljYXRlcyBoYXNWaWRlbyAnLCB0aGlzLl9oYXNBdWRpbywgJyBidXQgYWNjaWRlbnRhbGx5IGVub3VudGVyIGEgYXVkaW8gdGFnJywgY2h1bmspXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhcnNlQXVkaW8oY2h1bmspO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuX3R5cGUuc2NyaXB0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJzZVNjcmlwdChjaHVuayk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9wYXJzZVZpZGVvKGNodW5rKSB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgICBpbmZvXG4gICAgICAgIH0gPSBjaHVuaztcblxuICAgICAgICBidWZmZXIgPSBidWZmZXIuc2xpY2UoaW5mby5kYXRhT2Zmc2V0KTtcblxuICAgICAgICBsZXQgaGVhZGVyID0gbmV3IERhdGFWaWV3KGJ1ZmZlcikuZ2V0VWludDgoMCksXG4gICAgICAgICAgICBmcmFtZVR5cGUgPSAoaGVhZGVyICYgMjQwKSA+Pj4gNCxcbiAgICAgICAgICAgIGNvZGVjSWQgPSBoZWFkZXIgJiAxNTtcblxuICAgICAgICBpZiAoY29kZWNJZCAhPT0gNykge1xuICAgICAgICAgICAgbG9nLmUoXCJJdCBpcyBvbmx5IHN1cHBvcnQgQVZDIGZvcm1hdCg3KSwgYnV0IHlvdSB0eXBlIGNvZGUgaXMgXCIgKyBjb2RlY0lkKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuQVZDLnBhcnNlKGJ1ZmZlci5zbGljZSgxKSwgZnJhbWVUeXBlLCBjb2RlY0lkLGluZm8udGltZVN0YW1wKTtcblxuICAgIH1cbiAgICBfcGFyc2VBdWRpbyhjaHVuaykge1xuICAgICAgICBsZXQge2J1ZmZlcixpbmZvfSA9IGNodW5rO1xuXG4gICAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5zbGljZShpbmZvLmRhdGFPZmZzZXQpO1xuXG4gICAgICAgIGxldCB2ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XG5cbiAgICAgICAgbGV0IHNvdW5kU3BlYyA9IHYuZ2V0VWludDgoMCk7XG5cbiAgICAgICAgbGV0IHNvdW5kRm9ybWF0ID0gc291bmRTcGVjID4+PiA0O1xuICAgICAgICBpZiAoc291bmRGb3JtYXQgIT09IDIgJiYgc291bmRGb3JtYXQgIT09IDEwKSB7XG4gICAgICAgICAgICAvLyBvbmx5IHN1cHBvcnQgTVAzIG9yIEFDQyBmb3JtYXRcbiAgICAgICAgICAgIGxvZy5lKCd3ZSBkbyBub3Qgc3VwcG9ydCB0aGlzIHR5cGUnICsgc291bmRGb3JtYXQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNvdW5kUmF0ZSA9IChzb3VuZFNwZWMgJiAxMikgPj4+IDI7XG4gICAgICAgIGlmIChzb3VuZFJhdGUgPj0gMCAmJiBzb3VuZFJhdGUgPD0gNCkge1xuICAgICAgICAgICAgc291bmRSYXRlID0gdGhpcy5fZmx2U291bmRSYXRlVGFibGVbc291bmRSYXRlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZy5lKCdJbnZhbGlkIHNvdW5kUmF0ZTogJyArIHNvdW5kUmF0ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc291bmRTaXplID0gKHNvdW5kU3BlYyAmIDIpID4+PiAxOyAvLyB1bnVzZWRcbiAgICAgICAgbGV0IHNvdW5kVHlwZSA9IChzb3VuZFNwZWMgJiAxKTtcblxuICAgICAgICBsZXQgbWV0YSA9IHRoaXMuX2F1ZGlvVHJhY2subWV0YTtcblxuICAgICAgICBtZXRhLmF1ZGlvU2FtcGxlUmF0ZSA9IHNvdW5kUmF0ZTtcbiAgICAgICAgbWV0YS5jaGFubmVsQ291bnQgPSAoc291bmRUeXBlID09PSAwXG4gICAgICAgICAgICA/IDFcbiAgICAgICAgICAgIDogMik7IC8vIG1vbm8gb3Igc3RlcmVvXG5cbiAgICAgICAgdiA9IG51bGw7XG5cbiAgICAgICAgYnVmZmVyID0gYnVmZmVyLnNsaWNlKDEpO1xuXG4gICAgICAgIGlmKHNvdW5kRm9ybWF0ID09PSAyKXtcbiAgICAgICAgICAgIC8vIE1QM1xuICAgICAgICB9ZWxzZSBpZihzb3VuZEZvcm1hdCA9PT0gMTApe1xuICAgICAgICAgICAgLy8gQUFDXG4gICAgICAgICAgICB0aGlzLkFBQy5wYXJzZShidWZmZXIpXG5cbiAgICAgICAgfVxuXG5cbiAgICB9XG4gICAgX3BhcnNlU2NyaXB0KGNodW5rKSB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgICBpbmZvXG4gICAgICAgIH0gPSBjaHVuaztcblxuICAgICAgICBsZXQgc2NyaXB0RGF0YSA9IEFNRi5wYXJzZVNjcmlwdERhdGEoYnVmZmVyLCBpbmZvLmRhdGFPZmZzZXQsIGluZm8uZGF0YVNpemUpO1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fbWVkaWFJbmZvLCBzY3JpcHREYXRhLm9uTWV0YURhdGEpO1xuXG4gICAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tdXgvZGVtdXgvZmx2ZGVtdXguanMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFja0luZm8ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl92aWRlb1RyYWNrID0ge1xuICAgICAgICAgICAgdHlwZTogJ3ZpZGVvJyxcbiAgICAgICAgICAgIGlkOjEsXG4gICAgICAgICAgICBzYW1wbGVzOiBbXSxcbiAgICAgICAgICAgIGxlbmd0aDogMCwgLy8gdGhlIGRhdGEgbGVuZ3RoIG9mIHNhbXBsZXNcbiAgICAgICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAndmlkZW8nLFxuICAgICAgICAgICAgICAgIGlkOjEsXG4gICAgICAgICAgICAgICAgdGltZXNjYWxlOiAxMDAwLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgICAgICAgICAgIGNvZGVjOicnLFxuICAgICAgICAgICAgICAgIHJlZlNhbXBsZUR1cmF0aW9uOm51bGwsXG4gICAgICAgICAgICAgICAgYXZjYzonJywgLy8gdXNlZCBmb3Igc3RzZCBib3hcbiAgICAgICAgICAgICAgICBjb2RlY1dpZHRoOicnLFxuICAgICAgICAgICAgICAgIGNvZGVjSGVpZ2h0OicnLFxuICAgICAgICAgICAgICAgIHByZXNlbnRXaWR0aDowLFxuICAgICAgICAgICAgICAgIHByZXNlbnRIZWlnaHQ6MCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cblxuICAgICAgICB0aGlzLl9hdWRpb1RyYWNrID0ge1xuICAgICAgICAgICAgdHlwZTogJ2F1ZGlvJyxcbiAgICAgICAgICAgIGlkOiAyLFxuICAgICAgICAgICAgc2VxdWVuY2VOdW1iZXI6IDAsXG4gICAgICAgICAgICBzYW1wbGVzOiBbXSxcbiAgICAgICAgICAgIGxlbmd0aDogMCxcbiAgICAgICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXVkaW8nLFxuICAgICAgICAgICAgICAgIGlkOiAyLFxuICAgICAgICAgICAgICAgIHRpbWVzY2FsZTogMTAwMCxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMCxcbiAgICAgICAgICAgICAgICBjb2RlYzonJyxcbiAgICAgICAgICAgICAgICByZWZTYW1wbGVEdXJhdGlvbjpudWxsLFxuICAgICAgICAgICAgICAgIGF1ZGlvU2FtcGxlUmF0ZTpudWxsLFxuICAgICAgICAgICAgICAgIGNvbmZpZzpudWxsLCAvLyB1c1xuICAgICAgICAgICAgICAgIGNoYW5uZWxDb3VudDpudWxsLFxuICAgICAgICAgICAgICAgIGNvZGVjOm51bGwsICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2ZsdlNvdW5kUmF0ZVRhYmxlID0gWzU1MDAsIDExMDI1LCAyMjA1MCwgNDQxMDAsIDQ4MDAwXTsgLy8gNS41a0h6fjQ0a0h6XG4gICAgICAgIHRoaXMuX2hhc1ZpZGVvO1xuICAgICAgICB0aGlzLl9oYXNBdWRpbztcblxuICAgICAgICB0aGlzLl9tZWRpYUluZm8gPSB7XG4gICAgICAgICAgICBhdWRpb2NvZGVjaWQ6IDEwLFxuICAgICAgICAgICAgYXVkaW9kYXRhcmF0ZTogNjIuNSxcbiAgICAgICAgICAgIGF1ZGlvc2FtcGxlcmF0ZTogNDgwMDAsXG4gICAgICAgICAgICBhdWRpb3NhbXBsZXNpemU6IDE2LFxuICAgICAgICAgICAgZHVyYXRpb246IDAsXG4gICAgICAgICAgICBlbmNvZGVyOiBcIkxhdmY1Ny41Ni4xMDFcIiwgXG4gICAgICAgICAgICBmaWxlc2l6ZTogMCxcbiAgICAgICAgICAgIGhlaWdodDogNjQwLFxuICAgICAgICAgICAgc3RlcmVvOiB0cnVlLFxuICAgICAgICAgICAgdmlkZW9jb2RlY2lkOiA3LFxuICAgICAgICAgICAgdmlkZW9kYXRhcmF0ZTogMTE3MS44NzUsXG4gICAgICAgICAgICB3aWR0aDogMzY4LFxuICAgICAgICAgICAgaGFzVmlkZW86ZmFsc2UsXG4gICAgICAgICAgICBoYXNBdWRpbzpmYWxzZSxcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgdmlkZW9UcmFjaygpe1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlkZW9UcmFjaztcbiAgICB9XG4gICAgZ2V0IGF1ZGlvVHJhY2soKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1ZGlvVHJhY2s7XG4gICAgfVxuICAgIGdldCBtZWRpYUluZm8oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21lZGlhSW5mbztcbiAgICB9XG4gICAgZ2V0IE1JTUUoKXtcbiAgICAgICAgcmV0dXJuICd2aWRlby9tcDQ7IGNvZGVjcz1cIicgKyB0aGlzLl92aWRlb1RyYWNrLm1ldGEuY29kZWMgKyAnLCcgKyB0aGlzLl9hdWRpb1RyYWNrLm1ldGEuY29kZWMgKyAnXCInO1xuICAgIH1cbiAgICBnZXQgdmlkZW9NSU1FKCl7XG4gICAgICAgIHJldHVybiAndmlkZW8vbXA0OyBjb2RlY3M9XCInICsgdGhpcy5fdmlkZW9UcmFjay5tZXRhLmNvZGVjICsgJ1wiJztcbiAgICB9XG4gICAgZ2V0IGF1ZGlvTUlNRSgpe1xuICAgICAgICByZXR1cm4gJ3ZpZGVvL21wNDsgY29kZWNzPVwiJyArIHRoaXMuX2F1ZGlvVHJhY2subWV0YS5jb2RlYyArICdcIic7XG4gICAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tdXgvZGVtdXgvbGliL2Jhc2VpbmZvLmpzIiwiaW1wb3J0IExvZyBmcm9tICdsaWIvbG9nJztcblxubGV0IGxvZyA9IG5ldyBMb2coJ0FNRicpO1xuXG5cbmxldCBBTUYgPSB7XG4gICAgcGFyc2VTY3JpcHREYXRhKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSkge1xuICAgICAgICBsZXQgZGF0YSA9IHt9O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgbmFtZSA9IEFNRi5wYXJzZVZhbHVlKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSk7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBBTUYucGFyc2VWYWx1ZShhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCArIG5hbWUuc2l6ZSwgZGF0YVNpemUgLSBuYW1lLnNpemUpO1xuXG4gICAgICAgICAgICBkYXRhW25hbWUuZGF0YV0gPSB2YWx1ZS5kYXRhO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2cuZSgnQU1GJywgZS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH0sXG4gICAgcGFyc2VPYmplY3QoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKSB7XG4gICAgICAgIGlmIChkYXRhU2l6ZSA8IDMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YSBub3QgZW5vdWdoIHdoZW4gcGFyc2UgU2NyaXB0RGF0YU9iamVjdCcpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuYW1lID0gQU1GLnBhcnNlU3RyaW5nKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSk7XG4gICAgICAgIGxldCB2YWx1ZSA9IEFNRi5wYXJzZVZhbHVlKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0ICsgbmFtZS5zaXplLCBkYXRhU2l6ZSAtIG5hbWUuc2l6ZSk7XG4gICAgICAgIGxldCBpc09iamVjdEVuZCA9IHZhbHVlLm9iamVjdEVuZDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUuZGF0YSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUuZGF0YVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNpemU6IG5hbWUuc2l6ZSArIHZhbHVlLnNpemUsXG4gICAgICAgICAgICBvYmplY3RFbmQ6IGlzT2JqZWN0RW5kXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBwYXJzZVZhcmlhYmxlKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSkge1xuICAgICAgICByZXR1cm4gQU1GLnBhcnNlT2JqZWN0KGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSk7XG4gICAgfSxcbiAgICBwYXJzZVN0cmluZyhhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpIHtcbiAgICAgICAgaWYgKGRhdGFTaXplIDwgMikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhIG5vdCBlbm91Z2ggd2hlbiBwYXJzZSBTdHJpbmcnKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdiA9IG5ldyBEYXRhVmlldyhhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpO1xuICAgICAgICBsZXQgbGVuZ3RoID0gdi5nZXRVaW50MTYoMCk7XG5cbiAgICAgICAgbGV0IHN0cjtcbiAgICAgICAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHN0ciA9IEFNRi5kZWNvZGVVVEY4KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0ICsgMiwgbGVuZ3RoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHIgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiBzdHIsXG4gICAgICAgICAgICBzaXplOiAyICsgbGVuZ3RoXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBwYXJzZUxvbmdTdHJpbmcoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKSB7XG4gICAgICAgIGlmIChkYXRhU2l6ZSA8IDQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YSBub3QgZW5vdWdoIHdoZW4gcGFyc2UgTG9uZ1N0cmluZycpO1xuICAgICAgICB9XG4gICAgICAgIGxldCB2ID0gbmV3IERhdGFWaWV3KGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSk7XG4gICAgICAgIGxldCBsZW5ndGggPSB2LmdldFVpbnQzMigwKTtcblxuICAgICAgICBsZXQgc3RyO1xuICAgICAgICBpZiAobGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc3RyID0gQU1GLmRlY29kZVVURjgobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQgKyA0LCBsZW5ndGgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0ciA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHN0cixcbiAgICAgICAgICAgIHNpemU6IDQgKyBsZW5ndGhcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHBhcnNlRGF0ZShhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCwgZGF0YVNpemUpIHtcbiAgICAgICAgaWYgKGRhdGFTaXplIDwgMTApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YSBzaXplIGludmFsaWQgd2hlbiBwYXJzZSBEYXRlJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHYgPSBuZXcgRGF0YVZpZXcoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHYuZ2V0RmxvYXQ2NCgwKTtcbiAgICAgICAgbGV0IGxvY2FsVGltZU9mZnNldCA9IHYuZ2V0SW50MTYoOCk7XG4gICAgICAgIHRpbWVzdGFtcCArPSBsb2NhbFRpbWVPZmZzZXQgKiA2MCAqIDEwMDA7IC8vIGdldCBVVEMgdGltZVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiBuZXcgRGF0ZSh0aW1lc3RhbXApLFxuICAgICAgICAgICAgc2l6ZTogOCArIDJcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHBhcnNlVmFsdWUoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQsIGRhdGFTaXplKSB7XG4gICAgICAgIGlmIChkYXRhU2l6ZSA8IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YSBub3QgZW5vdWdoIHdoZW4gcGFyc2UgVmFsdWUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB2ID0gbmV3IERhdGFWaWV3KGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0LCBkYXRhU2l6ZSk7XG5cbiAgICAgICAgbGV0IG9mZnNldCA9IDE7XG4gICAgICAgIGxldCB0eXBlID0gdi5nZXRVaW50OCgwKTtcbiAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICBsZXQgb2JqZWN0RW5kID0gZmFsc2U7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogLy8gTnVtYmVyKERvdWJsZSkgdHlwZVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHYuZ2V0RmxvYXQ2NCgxKTtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgeyAvLyBCb29sZWFuIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBiID0gdi5nZXRVaW50OCgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICB7IC8vIFN0cmluZyB0eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYW1mc3RyID0gQU1GLnBhcnNlU3RyaW5nKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0ICsgMSwgZGF0YVNpemUgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYW1mc3RyLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gYW1mc3RyLnNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgeyAvLyBPYmplY3QocykgdHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZXJtaW5hbCA9IDA7IC8vIHdvcmthcm91bmQgZm9yIG1hbGZvcm1lZCBPYmplY3RzIHdoaWNoIGhhcyBtaXNzaW5nIFNjcmlwdERhdGFPYmplY3RFbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodi5nZXRVaW50MzIoZGF0YVNpemUgLSA0KSAmIDB4MDBGRkZGRkYpID09PSA5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVybWluYWwgPSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG9mZnNldCA8IGRhdGFTaXplIC0gNCkgeyAvLyA0ID09PSB0eXBlKFVJOCkgKyBTY3JpcHREYXRhT2JqZWN0RW5kKFVJMjQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFtZm9iaiA9IEFNRi5wYXJzZU9iamVjdChhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCArIG9mZnNldCwgZGF0YVNpemUgLSBvZmZzZXQgLSB0ZXJtaW5hbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFtZm9iai5vYmplY3RFbmQpIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVthbWZvYmouZGF0YS5uYW1lXSA9IGFtZm9iai5kYXRhLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBhbWZvYmouc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPD0gZGF0YVNpemUgLSAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtlciA9IHYuZ2V0VWludDMyKG9mZnNldCAtIDEpICYgMHgwMEZGRkZGRjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFya2VyID09PSA5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICB7IC8vIEVDTUEgYXJyYXkgdHlwZSAoTWl4ZWQgYXJyYXkpXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7IC8vIEVDTUFBcnJheUxlbmd0aChVSTMyKVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlcm1pbmFsID0gMDsgLy8gd29ya2Fyb3VuZCBmb3IgbWFsZm9ybWVkIE1peGVkQXJyYXlzIHdoaWNoIGhhcyBtaXNzaW5nIFNjcmlwdERhdGFPYmplY3RFbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodi5nZXRVaW50MzIoZGF0YVNpemUgLSA0KSAmIDB4MDBGRkZGRkYpID09PSA5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVybWluYWwgPSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG9mZnNldCA8IGRhdGFTaXplIC0gOCkgeyAvLyA4ID09PSB0eXBlKFVJOCkgKyBFQ01BQXJyYXlMZW5ndGgoVUkzMikgKyBTY3JpcHREYXRhVmFyaWFibGVFbmQoVUkyNClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYW1mdmFyID0gQU1GLnBhcnNlVmFyaWFibGUoYXJyYXlCdWZmZXIsIGRhdGFPZmZzZXQgKyBvZmZzZXQsIGRhdGFTaXplIC0gb2Zmc2V0IC0gdGVybWluYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbWZ2YXIub2JqZWN0RW5kKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVbYW1mdmFyLmRhdGEubmFtZV0gPSBhbWZ2YXIuZGF0YS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gYW1mdmFyLnNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0IDw9IGRhdGFTaXplIC0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXJrZXIgPSB2LmdldFVpbnQzMihvZmZzZXQgLSAxKSAmIDB4MDBGRkZGRkY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtlciA9PT0gOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgOTogLy8gU2NyaXB0RGF0YU9iamVjdEVuZFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0RW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgeyAvLyBTdHJpY3QgYXJyYXkgdHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2NyaXB0RGF0YVZhbHVlW25dLiBOT1RFOiBhY2NvcmRpbmcgdG8gdmlkZW9fZmlsZV9mb3JtYXRfc3BlY192MTBfMS5wZGZcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RyaWN0QXJyYXlMZW5ndGggPSB2LmdldFVpbnQzMigxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpY3RBcnJheUxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbCA9IEFNRi5wYXJzZVZhbHVlKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0ICsgb2Zmc2V0LCBkYXRhU2l6ZSAtIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUucHVzaCh2YWwuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IHZhbC5zaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICB7IC8vIERhdGUgdHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGUgPSBBTUYucGFyc2VEYXRlKGFycmF5QnVmZmVyLCBkYXRhT2Zmc2V0ICsgMSwgZGF0YVNpemUgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZGF0ZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IGRhdGUuc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgeyAvLyBMb25nIHN0cmluZyB0eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYW1mTG9uZ1N0ciA9IEFNRi5wYXJzZVN0cmluZyhhcnJheUJ1ZmZlciwgZGF0YU9mZnNldCArIDEsIGRhdGFTaXplIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGFtZkxvbmdTdHIuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBhbWZMb25nU3RyLnNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSBhbmQgc2tpcFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBkYXRhU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgbG9nLncoJ0FNRicsICdVbnN1cHBvcnRlZCBBTUYgdmFsdWUgdHlwZSAnICsgdHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGxvZy5lKCdBTUYnLCBlLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtkYXRhOiB2YWx1ZSwgc2l6ZTogb2Zmc2V0LCBvYmplY3RFbmQ6IG9iamVjdEVuZH07XG4gICAgfSxcbiAgICBkZWNvZGVVVEY4KGRhdGEpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGMgPSAwO1xuICAgICAgICB2YXIgYzEgPSAwO1xuICAgICAgICB2YXIgYzIgPSAwO1xuXG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBCT00gc2tpcCBpdFxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPj0gMyAmJiBkYXRhWzBdID09PSAweGVmICYmIGRhdGFbMV0gPT09IDB4YmIgJiYgZGF0YVsyXSA9PT0gMHhiZikge1xuICAgICAgICAgICAgaSA9IDM7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoaSA8IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBjID0gZGF0YVtpXTtcblxuICAgICAgICAgICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMgPiAxOTEgJiYgYyA8IDIyNCkge1xuICAgICAgICAgICAgICAgIGlmIChpICsgMSA+PSBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIlVURi04IERlY29kZSBmYWlsZWQuIFR3byBieXRlIGNoYXJhY3RlciB3YXMgdHJ1bmNhdGVkLlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjMiA9IGRhdGFbaSArIDFdO1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYyAmIDMxKSA8PCA2KSB8IChjMiAmIDYzKSk7XG4gICAgICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaSArIDIgPj0gZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJVVEYtOCBEZWNvZGUgZmFpbGVkLiBNdWx0aSBieXRlIGNoYXJhY3RlciB3YXMgdHJ1bmNhdGVkLlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjMiA9IGRhdGFbaSArIDFdO1xuICAgICAgICAgICAgICAgIGMzID0gZGF0YVtpICsgMl07XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjICYgMTUpIDw8IDEyKSB8ICgoYzIgJiA2MykgPDwgNikgfCAoYzMgJiA2MykpO1xuICAgICAgICAgICAgICAgIGkgKz0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBTUY7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL211eC9kZW11eC9saWIvYW1mLmpzIiwiaW1wb3J0IExvZyBmcm9tICdsaWIvbG9nJztcbmltcG9ydCB7bWVyZ2VUeXBlZEFycmF5fSBmcm9tICdsaWIvdXRpbHMnO1xuaW1wb3J0IFNQU1BhcnNlciBmcm9tICcuL2xpYi9zcHNfcGFyc2UnO1xuXG5cbmNvbnN0IGxvZyA9IG5ldyBMb2coJ0FWQ0RlbXV4JylcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQVZDRGVtdXgge1xuICAgIGNvbnN0cnVjdG9yKHtcbiAgICAgICAgdmlkZW9UcmFjayxcbiAgICAgICAgbWVkaWFJbmZvXG4gICAgfSkge1xuICAgICAgICB0aGlzLl92aWRlb1RyYWNrID0gdmlkZW9UcmFjaztcbiAgICAgICAgdGhpcy5fbWVkaWFJbmZvID0gbWVkaWFJbmZvO1xuXG5cbiAgICAgICAgLy8gc2V0IHRoZSBkZWZhdWx0IGZyYW1lIHJhdGUgaWYgaXMgbm90IGZpeGVkXG4gICAgICAgIHRoaXMuX3JlZmVyZW5jZUZyYW1lUmF0ZSA9IHtcbiAgICAgICAgICAgIGZpeGVkOiB0cnVlLFxuICAgICAgICAgICAgZnBzOiAyMy45NzYsXG4gICAgICAgICAgICBmcHNfbnVtOiAyMzk3NixcbiAgICAgICAgICAgIGZwc19kZW46IDEwMDBcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9uYWx1TGVuZ3RoU2l6ZSA9IDQ7XG4gICAgICAgIHRoaXMuX3RpbWVzdGFtcEJhc2UgPSAwO1xuXG4gICAgICAgIHRoaXMuX2tleUZyYW1lID0gezE6dHJ1ZSwyOmZhbHNlfTtcbiAgICB9XG5cbiAgICBwYXJzZShjaHVuaywgZnJhbWVUeXBlLCBjb2RlY0lkLHRpbWVTdGFtcCkge1xuXG4gICAgICAgIGxldCB2ID0gbmV3IERhdGFWaWV3KGNodW5rKTtcblxuICAgICAgICBsZXQgdHlwZSA9IHYuZ2V0VWludDgoMCksXG4gICAgICAgICAgICBjdHMgPSB2LmdldFVpbnQzMigwKSAmIDB4MDBGRkZGRkY7XG5cbiAgICAgICAgdiA9IG51bGw7XG5cbiAgICAgICAgY2h1bmsgPSBjaHVuay5zbGljZSg0KTtcblxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJzZUNvbmZpZyhjaHVuayk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VBVkMoY2h1bmsse2N0cyxmcmFtZVR5cGUsdGltZVN0YW1wfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgLy8gZW1wdHlcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0geyp9IGNodW5rIFxuICAgICAqIEBwYXJhbSB7Kn0gT2JqZWN0XG4gICAgICovXG4gICAgX3BhcnNlQVZDKGNodW5rLHtjdHMsZnJhbWVUeXBlLHRpbWVTdGFtcH0pIHtcbiAgICAgICAgbGV0IHYgPSBuZXcgRGF0YVZpZXcoY2h1bmspO1xuXG4gICAgICAgIGxldCBzbGljZXMgPSBbXSxcbiAgICAgICAgICAgIGRhdGFTaXplID0gY2h1bmsuYnl0ZUxlbmd0aCxcbiAgICAgICAgICAgIG9mZnNldCA9IDA7XG5cbiAgICAgICAgbGV0IGtleUZyYW1lID0gISF0aGlzLl9rZXlGcmFtZVtmcmFtZVR5cGVdO1xuXG4gICAgICAgIGxldCBuYWx1TGVuID0gdGhpcy5fbmFsdUxlbmd0aFNpemU7XG4gICAgICAgIGxldCBkdHMgPSB0aGlzLl90aW1lc3RhbXBCYXNlO1xuXG4gICAgICAgIHRoaXMuX3RpbWVzdGFtcEJhc2UgKz0gdGhpcy5fdmlkZW9UcmFjay5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uO1xuXG4gICAgICAgIHdoaWxlKG9mZnNldCA8IGRhdGFTaXplICl7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ICsgNCA+PSBkYXRhU2l6ZSkge1xuICAgICAgICAgICAgICAgIGxvZy53KCdub3QgZW5vdWdodCBkYXRhIHRvIHBhcnNlJylcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gZGF0YSBub3QgZW5vdWdoIGZvciBuZXh0IE5hbHVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgIC8vIEFWQzEgZGVjb2RlXG4gICAgICAgICAgICAgbGV0IG5hbHVTaXplID0gdi5nZXRVaW50MzIob2Zmc2V0KTsgLy8gQmlnLUVuZGlhbiByZWFkXG4gICAgICAgICAgICAgaWYgKG5hbHVMZW4gPT09IDMpIHtcbiAgICAgICAgICAgICAgICAgbmFsdVNpemUgPj4+PSA4O1xuICAgICAgICAgICAgIH1cbiBcbiAgICAgICAgICAgICBpZiAobmFsdVNpemUgPiBkYXRhU2l6ZSAtIG5hbHVMZW4pIHtcbiAgICAgICAgICAgICAgICAgbG9nLncoJ2ludmFsaWQgbmFsdSB2YWx1ZScpO1xuICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgfVxuIFxuICAgICAgICAgICAgIGxldCBzbGljZVR5cGUgPSB2LmdldFVpbnQ4KG9mZnNldCArIG5hbHVMZW4pICYgMHgxRjtcbiBcbiAgICAgICAgICAgICBpZiAoc2xpY2VUeXBlID09PSA1KSB7XG4gICAgICAgICAgICAgICAgIC8vID9cbiAgICAgICAgICAgICAgICAga2V5RnJhbWUgPSB0cnVlO1xuICAgICAgICAgICAgIH1cbiBcbiAgICAgICAgICAgICBsZXQgZGF0YSA9IG5ldyBVaW50OEFycmF5KGNodW5rLCBvZmZzZXQsIG5hbHVMZW4gKyBuYWx1U2l6ZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICBzbGljZXMucHVzaChkYXRhKTtcbiBcbiBcbiAgICAgICAgICAgICBvZmZzZXQgKz0gbmFsdUxlbiArIG5hbHVTaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgc2xpY2VzID0gbWVyZ2VUeXBlZEFycmF5LmFwcGx5KG51bGwsc2xpY2VzKTtcblxuXG4gICAgICAgIGlmKHNsaWNlcy5sZW5ndGgpe1xuICAgICAgICAgICAgdGhpcy5fdmlkZW9UcmFjay5zYW1wbGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIHNsaWNlcyxcbiAgICAgICAgICAgICAgICBsZW5ndGg6b2Zmc2V0LFxuICAgICAgICAgICAgICAgIGtleUZyYW1lLFxuICAgICAgICAgICAgICAgIGR0cyxcbiAgICAgICAgICAgICAgICBjdHMsXG4gICAgICAgICAgICAgICAgcHRzOiAoZHRzICsgY3RzKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl92aWRlb1RyYWNrLmxlbmd0aCArPSBvZmZzZXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3BhcnNlQ29uZmlnKGNodW5rKSB7XG4gICAgICAgIGxldCB2ID0gbmV3IERhdGFWaWV3KGNodW5rKTtcblxuICAgICAgICBsZXQgdmVyc2lvbiA9IHYuZ2V0VWludDgoMCk7IC8vIGNvbmZpZ3VyYXRpb25WZXJzaW9uXG4gICAgICAgIGxldCBhdmNQcm9maWxlID0gdi5nZXRVaW50OCgxKTsgLy8gYXZjUHJvZmlsZUluZGljYXRpb25cbiAgICAgICAgbGV0IHByb2ZpbGVDb21wYXRpYmlsaXR5ID0gdi5nZXRVaW50OCgyKTsgLy8gcHJvZmlsZV9jb21wYXRpYmlsaXR5XG4gICAgICAgIGxldCBhdmNMZXZlbCA9IHYuZ2V0VWludDgoMyk7IC8vIEFWQ0xldmVsSW5kaWNhdGlvblxuXG4gICAgICAgIGlmICh2ZXJzaW9uICE9PSAxIHx8IGF2Y1Byb2ZpbGUgPT09IDApIHtcbiAgICAgICAgICAgIGxvZy5lKCdJbnZhbGlkIEFWQ0RlY29kZXJDb25maWd1cmF0aW9uUmVjb3JkJylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBuYWx1X2xlbiA9IHRoaXMuX25hbHVMZW5ndGhTaXplID0gKHYuZ2V0VWludDgoNCkgJiAzKSArIDE7IC8vIGxlbmd0aFNpemVQbHVzT25lXG4gICAgICAgIGlmIChuYWx1X2xlbiAhPT0gMyAmJiBuYWx1X2xlbiAhPT0gNCkge1xuICAgICAgICAgICAgbG9nLmUoJ0ludmFsaWQgTmFsdUxlbmd0aFNpemVNaW51c09uZTogJyArIG5hbHVfbGVuKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzcHNDb3VudCA9IHYuZ2V0VWludDgoNSkgJiAzMTsgLy8gZ2V0IFNlcXVlbmNlUGFyYW1ldGVyU2V0cyBjb3VudFxuXG4gICAgICAgIGlmIChzcHNDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgbG9nLmUoJ3RoZSBTZXF1ZW5jZVBhcmFtZXRlclNldHMgY291bnQgY291bGRuXCJ0IGJlIDAnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChzcHNDb3VudCA+IDEpIHtcbiAgICAgICAgICAgIGxvZy5lKCdzdHJhbmdlIGNvdW50IG9mIFNQUywgaXQgc2hvdWxkIGJlIDEgYXMgdXN1YWwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNraXAgb3ZlciA2QiBoZWFkZXJcbiAgICAgICAgbGV0IG9mZnNldCA9IDY7XG5cbiAgICAgICAgLy8gc3RhcnQgdG8gZGVjb2RlIFNQUyB1c3VhbGx5IGhhcyBvbmx5IG9uZSBTUFNcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcHNDb3VudDsgaSsrKSB7XG5cbiAgICAgICAgICAgIC8vIHNraXAgb3ZlciBkZWNvZGluZyBvdGhlciBzdHJhbmdlIEFWQ0RlY29kZXJDb25maWd1cmF0aW9uUmVjb3JkXG4gICAgICAgICAgICBpZiAoaSA+IDApXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIC8vIHRoZSBkaXZpZGVkIGZsYWcgaXMgbm90IHRoZSBzdGFydCBjb2RlIDAwIDAwIDAwIDAxLCBidXQgdGhlIDRCIGxlbmd0aCBvZiBTUFNcbiAgICAgICAgICAgIGxldCBzcHNMZW4gPSB2LmdldFVpbnQxNihvZmZzZXQpO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IDI7XG5cbiAgICAgICAgICAgIGlmICghc3BzTGVuKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBsZXQgc3BzID0gbmV3IFVpbnQ4QXJyYXkoY2h1bmssIG9mZnNldCwgc3BzTGVuKTtcblxuICAgICAgICAgICAgb2Zmc2V0ICs9IHNwc0xlbjtcblxuICAgICAgICAgICAgbGV0IG1ldGFJbmZvID0gU1BTUGFyc2VyLnBhcnNlU1BTKHNwcyk7XG5cbiAgICAgICAgICAgIHRoaXMuX2V4dHJhY2tJbmZvKG1ldGFJbmZvLCBzcHMpO1xuXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl92aWRlb1RyYWNrLm1ldGEuYXZjYyA9IG5ldyBVaW50OEFycmF5KGNodW5rKTtcblxuICAgICAgICBjb25zb2xlLmxvZygncGFyc2VkIGFscmVhZHksICcsIHRoaXMuX3ZpZGVvVHJhY2spO1xuICAgIH1cbiAgICBfZXh0cmFja0luZm8oc3BzSW5mbywgc3BzKSB7XG4gICAgICAgIGxldCBtZXRhID0gdGhpcy5fdmlkZW9UcmFjay5tZXRhO1xuXG4gICAgICAgIG1ldGEuc3BzSW5mbyA9IHNwc0luZm87XG4gICAgICAgIG1ldGEuY29kZWNXaWR0aCA9IHNwc0luZm8uY29kZWNfc2l6ZS53aWR0aDtcbiAgICAgICAgbWV0YS5jb2RlY0hlaWdodCA9IHNwc0luZm8uY29kZWNfc2l6ZS5oZWlnaHQ7XG4gICAgICAgIG1ldGEucHJlc2VudFdpZHRoID0gc3BzSW5mby5wcmVzZW50X3NpemUud2lkdGg7XG4gICAgICAgIG1ldGEucHJlc2VudEhlaWdodCA9IHNwc0luZm8ucHJlc2VudF9zaXplLmhlaWdodDtcblxuICAgICAgICBjb25zb2xlLmxvZyhzcHNJbmZvKTtcbiAgICAgICAgaWYgKHNwc0luZm8uZnJhbWVfcmF0ZS5maXhlZCA9PT0gZmFsc2UgfHwgc3BzSW5mby5mcmFtZV9yYXRlLmZwc19udW0gPT09IDAgfHwgc3BzSW5mby5mcmFtZV9yYXRlLmZwc19kZW4gPT09IDApIHtcbiAgICAgICAgICAgIG1ldGEuZnJhbWVSYXRlID0gdGhpcy5fcmVmZXJlbmNlRnJhbWVSYXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGZwc19kZW4sXG4gICAgICAgICAgICBmcHNfbnVtXG4gICAgICAgIH0gPSBtZXRhLmZyYW1lUmF0ZTtcbiAgICAgICAgbWV0YS5yZWZTYW1wbGVEdXJhdGlvbiA9IE1hdGguZmxvb3IobWV0YS50aW1lc2NhbGUgKiAoZnBzX2RlbiAvIGZwc19udW0pKTtcblxuICAgICAgICAvLyBnZXQgQVZDIGNvZGVjXG4gICAgICAgIGxldCBjb2RlY0FycmF5ID0gc3BzLnN1YmFycmF5KDEsIDQpO1xuICAgICAgICBsZXQgY29kZWNTdHJpbmcgPSAnYXZjMS4nO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDM7IGorKykge1xuICAgICAgICAgICAgbGV0IGggPSBjb2RlY0FycmF5W2pdLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgIGlmIChoLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICBoID0gJzAnICsgaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvZGVjU3RyaW5nICs9IGg7XG4gICAgICAgIH1cbiAgICAgICAgbWV0YS5jb2RlYyA9IGNvZGVjU3RyaW5nO1xuICAgIH1cblxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tdXgvZGVtdXgvYXZjZGVtdXguanMiLCJpbXBvcnQgRXhwR29sb21iIGZyb20gJy4vZXhwX2dvbG9tYi5qcyc7XG5cbmNsYXNzIFNQU1BhcnNlciB7XG5cbiAgICBzdGF0aWMgX2Vic3AycmJzcCh1aW50OGFycmF5KSB7XG4gICAgICAgIGxldCBzcmMgPSB1aW50OGFycmF5O1xuICAgICAgICBsZXQgc3JjX2xlbmd0aCA9IHNyYy5ieXRlTGVuZ3RoO1xuICAgICAgICBsZXQgZHN0ID0gbmV3IFVpbnQ4QXJyYXkoc3JjX2xlbmd0aCk7XG4gICAgICAgIGxldCBkc3RfaWR4ID0gMDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNyY19sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPj0gMikge1xuICAgICAgICAgICAgICAgIC8vIFVuZXNjYXBlOiBTa2lwIDB4MDMgYWZ0ZXIgMDAgMDBcbiAgICAgICAgICAgICAgICBpZiAoc3JjW2ldID09PSAweDAzICYmIHNyY1tpIC0gMV0gPT09IDB4MDAgJiYgc3JjW2kgLSAyXSA9PT0gMHgwMCkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkc3RbZHN0X2lkeF0gPSBzcmNbaV07XG4gICAgICAgICAgICBkc3RfaWR4Kys7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZHN0LmJ1ZmZlciwgMCwgZHN0X2lkeCk7XG4gICAgfVxuXG4gICAgc3RhdGljIHBhcnNlU1BTKHVpbnQ4YXJyYXkpIHtcbiAgICAgICAgbGV0IHJic3AgPSBTUFNQYXJzZXIuX2Vic3AycmJzcCh1aW50OGFycmF5KTtcbiAgICAgICAgbGV0IGdiID0gbmV3IEV4cEdvbG9tYihyYnNwKTtcblxuICAgICAgICBnYi5yZWFkQnl0ZSgpO1xuICAgICAgICBsZXQgcHJvZmlsZV9pZGMgPSBnYi5yZWFkQnl0ZSgpOyAgLy8gcHJvZmlsZV9pZGNcbiAgICAgICAgZ2IucmVhZEJ5dGUoKTsgIC8vIGNvbnN0cmFpbnRfc2V0X2ZsYWdzWzVdICsgcmVzZXJ2ZWRfemVyb1szXVxuICAgICAgICBsZXQgbGV2ZWxfaWRjID0gZ2IucmVhZEJ5dGUoKTsgIC8vIGxldmVsX2lkY1xuICAgICAgICBnYi5yZWFkVUVHKCk7ICAvLyBzZXFfcGFyYW1ldGVyX3NldF9pZFxuXG4gICAgICAgIGxldCBwcm9maWxlX3N0cmluZyA9IFNQU1BhcnNlci5nZXRQcm9maWxlU3RyaW5nKHByb2ZpbGVfaWRjKTtcbiAgICAgICAgbGV0IGxldmVsX3N0cmluZyA9IFNQU1BhcnNlci5nZXRMZXZlbFN0cmluZyhsZXZlbF9pZGMpO1xuICAgICAgICBsZXQgY2hyb21hX2Zvcm1hdF9pZGMgPSAxO1xuICAgICAgICBsZXQgY2hyb21hX2Zvcm1hdCA9IDQyMDtcbiAgICAgICAgbGV0IGNocm9tYV9mb3JtYXRfdGFibGUgPSBbMCwgNDIwLCA0MjIsIDQ0NF07XG4gICAgICAgIGxldCBiaXRfZGVwdGggPSA4O1xuXG4gICAgICAgIGlmIChwcm9maWxlX2lkYyA9PT0gMTAwIHx8IHByb2ZpbGVfaWRjID09PSAxMTAgfHwgcHJvZmlsZV9pZGMgPT09IDEyMiB8fFxuICAgICAgICAgICAgcHJvZmlsZV9pZGMgPT09IDI0NCB8fCBwcm9maWxlX2lkYyA9PT0gNDQgfHwgcHJvZmlsZV9pZGMgPT09IDgzIHx8XG4gICAgICAgICAgICBwcm9maWxlX2lkYyA9PT0gODYgfHwgcHJvZmlsZV9pZGMgPT09IDExOCB8fCBwcm9maWxlX2lkYyA9PT0gMTI4IHx8XG4gICAgICAgICAgICBwcm9maWxlX2lkYyA9PT0gMTM4IHx8IHByb2ZpbGVfaWRjID09PSAxNDQpIHtcblxuICAgICAgICAgICAgY2hyb21hX2Zvcm1hdF9pZGMgPSBnYi5yZWFkVUVHKCk7XG4gICAgICAgICAgICBpZiAoY2hyb21hX2Zvcm1hdF9pZGMgPT09IDMpIHtcbiAgICAgICAgICAgICAgICBnYi5yZWFkQml0cygxKTsgIC8vIHNlcGFyYXRlX2NvbG91cl9wbGFuZV9mbGFnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hyb21hX2Zvcm1hdF9pZGMgPD0gMykge1xuICAgICAgICAgICAgICAgIGNocm9tYV9mb3JtYXQgPSBjaHJvbWFfZm9ybWF0X3RhYmxlW2Nocm9tYV9mb3JtYXRfaWRjXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYml0X2RlcHRoID0gZ2IucmVhZFVFRygpICsgODsgIC8vIGJpdF9kZXB0aF9sdW1hX21pbnVzOFxuICAgICAgICAgICAgZ2IucmVhZFVFRygpOyAgLy8gYml0X2RlcHRoX2Nocm9tYV9taW51czhcbiAgICAgICAgICAgIGdiLnJlYWRCaXRzKDEpOyAgLy8gcXBwcmltZV95X3plcm9fdHJhbnNmb3JtX2J5cGFzc19mbGFnXG4gICAgICAgICAgICBpZiAoZ2IucmVhZEJvb2woKSkgeyAgLy8gc2VxX3NjYWxpbmdfbWF0cml4X3ByZXNlbnRfZmxhZ1xuICAgICAgICAgICAgICAgIGxldCBzY2FsaW5nX2xpc3RfY291bnQgPSAoY2hyb21hX2Zvcm1hdF9pZGMgIT09IDMpID8gOCA6IDEyO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NhbGluZ19saXN0X2NvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHsgIC8vIHNlcV9zY2FsaW5nX2xpc3RfcHJlc2VudF9mbGFnXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA8IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTUFNQYXJzZXIuX3NraXBTY2FsaW5nTGlzdChnYiwgMTYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTUFNQYXJzZXIuX3NraXBTY2FsaW5nTGlzdChnYiwgNjQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdiLnJlYWRVRUcoKTsgIC8vIGxvZzJfbWF4X2ZyYW1lX251bV9taW51czRcbiAgICAgICAgbGV0IHBpY19vcmRlcl9jbnRfdHlwZSA9IGdiLnJlYWRVRUcoKTtcbiAgICAgICAgaWYgKHBpY19vcmRlcl9jbnRfdHlwZSA9PT0gMCkge1xuICAgICAgICAgICAgZ2IucmVhZFVFRygpOyAgLy8gbG9nMl9tYXhfcGljX29yZGVyX2NudF9sc2JfbWludXNfNFxuICAgICAgICB9IGVsc2UgaWYgKHBpY19vcmRlcl9jbnRfdHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgZ2IucmVhZEJpdHMoMSk7ICAvLyBkZWx0YV9waWNfb3JkZXJfYWx3YXlzX3plcm9fZmxhZ1xuICAgICAgICAgICAgZ2IucmVhZFNFRygpOyAgLy8gb2Zmc2V0X2Zvcl9ub25fcmVmX3BpY1xuICAgICAgICAgICAgZ2IucmVhZFNFRygpOyAgLy8gb2Zmc2V0X2Zvcl90b3BfdG9fYm90dG9tX2ZpZWxkXG4gICAgICAgICAgICBsZXQgbnVtX3JlZl9mcmFtZXNfaW5fcGljX29yZGVyX2NudF9jeWNsZSA9IGdiLnJlYWRVRUcoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtX3JlZl9mcmFtZXNfaW5fcGljX29yZGVyX2NudF9jeWNsZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZ2IucmVhZFNFRygpOyAgLy8gb2Zmc2V0X2Zvcl9yZWZfZnJhbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBnYi5yZWFkVUVHKCk7ICAvLyBtYXhfbnVtX3JlZl9mcmFtZXNcbiAgICAgICAgZ2IucmVhZEJpdHMoMSk7ICAvLyBnYXBzX2luX2ZyYW1lX251bV92YWx1ZV9hbGxvd2VkX2ZsYWdcblxuICAgICAgICBsZXQgcGljX3dpZHRoX2luX21ic19taW51czEgPSBnYi5yZWFkVUVHKCk7XG4gICAgICAgIGxldCBwaWNfaGVpZ2h0X2luX21hcF91bml0c19taW51czEgPSBnYi5yZWFkVUVHKCk7XG5cbiAgICAgICAgbGV0IGZyYW1lX21ic19vbmx5X2ZsYWcgPSBnYi5yZWFkQml0cygxKTtcbiAgICAgICAgaWYgKGZyYW1lX21ic19vbmx5X2ZsYWcgPT09IDApIHtcbiAgICAgICAgICAgIGdiLnJlYWRCaXRzKDEpOyAgLy8gbWJfYWRhcHRpdmVfZnJhbWVfZmllbGRfZmxhZ1xuICAgICAgICB9XG4gICAgICAgIGdiLnJlYWRCaXRzKDEpOyAgLy8gZGlyZWN0Xzh4OF9pbmZlcmVuY2VfZmxhZ1xuXG4gICAgICAgIGxldCBmcmFtZV9jcm9wX2xlZnRfb2Zmc2V0ID0gMDtcbiAgICAgICAgbGV0IGZyYW1lX2Nyb3BfcmlnaHRfb2Zmc2V0ID0gMDtcbiAgICAgICAgbGV0IGZyYW1lX2Nyb3BfdG9wX29mZnNldCA9IDA7XG4gICAgICAgIGxldCBmcmFtZV9jcm9wX2JvdHRvbV9vZmZzZXQgPSAwO1xuXG4gICAgICAgIGxldCBmcmFtZV9jcm9wcGluZ19mbGFnID0gZ2IucmVhZEJvb2woKTtcbiAgICAgICAgaWYgKGZyYW1lX2Nyb3BwaW5nX2ZsYWcpIHtcbiAgICAgICAgICAgIGZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQgPSBnYi5yZWFkVUVHKCk7XG4gICAgICAgICAgICBmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCA9IGdiLnJlYWRVRUcoKTtcbiAgICAgICAgICAgIGZyYW1lX2Nyb3BfdG9wX29mZnNldCA9IGdiLnJlYWRVRUcoKTtcbiAgICAgICAgICAgIGZyYW1lX2Nyb3BfYm90dG9tX29mZnNldCA9IGdiLnJlYWRVRUcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzYXJfd2lkdGggPSAxLCBzYXJfaGVpZ2h0ID0gMTtcbiAgICAgICAgbGV0IGZwcyA9IDAsIGZwc19maXhlZCA9IHRydWUsIGZwc19udW0gPSAwLCBmcHNfZGVuID0gMDtcblxuICAgICAgICBsZXQgdnVpX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnID0gZ2IucmVhZEJvb2woKTtcbiAgICAgICAgaWYgKHZ1aV9wYXJhbWV0ZXJzX3ByZXNlbnRfZmxhZykge1xuICAgICAgICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHsgIC8vIGFzcGVjdF9yYXRpb19pbmZvX3ByZXNlbnRfZmxhZ1xuICAgICAgICAgICAgICAgIGxldCBhc3BlY3RfcmF0aW9faWRjID0gZ2IucmVhZEJ5dGUoKTtcbiAgICAgICAgICAgICAgICBsZXQgc2FyX3dfdGFibGUgPSBbMSwgMTIsIDEwLCAxNiwgNDAsIDI0LCAyMCwgMzIsIDgwLCAxOCwgMTUsIDY0LCAxNjAsIDQsIDMsIDJdO1xuICAgICAgICAgICAgICAgIGxldCBzYXJfaF90YWJsZSA9IFsxLCAxMSwgMTEsIDExLCAzMywgMTEsIDExLCAxMSwgMzMsIDExLCAxMSwgMzMsICA5OSwgMywgMiwgMV07XG5cbiAgICAgICAgICAgICAgICBpZiAoYXNwZWN0X3JhdGlvX2lkYyA+IDAgJiYgYXNwZWN0X3JhdGlvX2lkYyA8IDE2KSB7XG4gICAgICAgICAgICAgICAgICAgIHNhcl93aWR0aCA9IHNhcl93X3RhYmxlW2FzcGVjdF9yYXRpb19pZGMgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgc2FyX2hlaWdodCA9IHNhcl9oX3RhYmxlW2FzcGVjdF9yYXRpb19pZGMgLSAxXTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFzcGVjdF9yYXRpb19pZGMgPT09IDI1NSkge1xuICAgICAgICAgICAgICAgICAgICBzYXJfd2lkdGggPSBnYi5yZWFkQnl0ZSgpIDw8IDggfCBnYi5yZWFkQnl0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBzYXJfaGVpZ2h0ID0gZ2IucmVhZEJ5dGUoKSA8PCA4IHwgZ2IucmVhZEJ5dGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7ICAvLyBvdmVyc2Nhbl9pbmZvX3ByZXNlbnRfZmxhZ1xuICAgICAgICAgICAgICAgIGdiLnJlYWRCb29sKCk7ICAvLyBvdmVyc2Nhbl9hcHByb3ByaWF0ZV9mbGFnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2IucmVhZEJvb2woKSkgeyAgLy8gdmlkZW9fc2lnbmFsX3R5cGVfcHJlc2VudF9mbGFnXG4gICAgICAgICAgICAgICAgZ2IucmVhZEJpdHMoNCk7ICAvLyB2aWRlb19mb3JtYXQgJiB2aWRlb19mdWxsX3JhbmdlX2ZsYWdcbiAgICAgICAgICAgICAgICBpZiAoZ2IucmVhZEJvb2woKSkgeyAgLy8gY29sb3VyX2Rlc2NyaXB0aW9uX3ByZXNlbnRfZmxhZ1xuICAgICAgICAgICAgICAgICAgICBnYi5yZWFkQml0cygyNCk7ICAvLyBjb2xvdXJfcHJpbWFyaWVzICYgdHJhbnNmZXJfY2hhcmFjdGVyaXN0aWNzICYgbWF0cml4X2NvZWZmaWNpZW50c1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnYi5yZWFkQm9vbCgpKSB7ICAvLyBjaHJvbWFfbG9jX2luZm9fcHJlc2VudF9mbGFnXG4gICAgICAgICAgICAgICAgZ2IucmVhZFVFRygpOyAgLy8gY2hyb21hX3NhbXBsZV9sb2NfdHlwZV90b3BfZmllbGRcbiAgICAgICAgICAgICAgICBnYi5yZWFkVUVHKCk7ICAvLyBjaHJvbWFfc2FtcGxlX2xvY190eXBlX2JvdHRvbV9maWVsZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdiLnJlYWRCb29sKCkpIHsgIC8vIHRpbWluZ19pbmZvX3ByZXNlbnRfZmxhZ1xuICAgICAgICAgICAgICAgIGxldCBudW1fdW5pdHNfaW5fdGljayA9IGdiLnJlYWRCaXRzKDMyKTtcbiAgICAgICAgICAgICAgICBsZXQgdGltZV9zY2FsZSA9IGdiLnJlYWRCaXRzKDMyKTtcbiAgICAgICAgICAgICAgICBmcHNfZml4ZWQgPSBnYi5yZWFkQm9vbCgpOyAgLy8gZml4ZWRfZnJhbWVfcmF0ZV9mbGFnXG5cbiAgICAgICAgICAgICAgICBmcHNfbnVtID0gdGltZV9zY2FsZTtcbiAgICAgICAgICAgICAgICBmcHNfZGVuID0gbnVtX3VuaXRzX2luX3RpY2sgKiAyO1xuICAgICAgICAgICAgICAgIGZwcyA9IGZwc19udW0gLyBmcHNfZGVuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNhclNjYWxlID0gMTtcbiAgICAgICAgaWYgKHNhcl93aWR0aCAhPT0gMSB8fCBzYXJfaGVpZ2h0ICE9PSAxKSB7XG4gICAgICAgICAgICBzYXJTY2FsZSA9IHNhcl93aWR0aCAvIHNhcl9oZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3JvcF91bml0X3ggPSAwLCBjcm9wX3VuaXRfeSA9IDA7XG4gICAgICAgIGlmIChjaHJvbWFfZm9ybWF0X2lkYyA9PT0gMCkge1xuICAgICAgICAgICAgY3JvcF91bml0X3ggPSAxO1xuICAgICAgICAgICAgY3JvcF91bml0X3kgPSAyIC0gZnJhbWVfbWJzX29ubHlfZmxhZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBzdWJfd2MgPSAoY2hyb21hX2Zvcm1hdF9pZGMgPT09IDMpID8gMSA6IDI7XG4gICAgICAgICAgICBsZXQgc3ViX2hjID0gKGNocm9tYV9mb3JtYXRfaWRjID09PSAxKSA/IDIgOiAxO1xuICAgICAgICAgICAgY3JvcF91bml0X3ggPSBzdWJfd2M7XG4gICAgICAgICAgICBjcm9wX3VuaXRfeSA9IHN1Yl9oYyAqICgyIC0gZnJhbWVfbWJzX29ubHlfZmxhZyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY29kZWNfd2lkdGggPSAocGljX3dpZHRoX2luX21ic19taW51czEgKyAxKSAqIDE2O1xuICAgICAgICBsZXQgY29kZWNfaGVpZ2h0ID0gKDIgLSBmcmFtZV9tYnNfb25seV9mbGFnKSAqICgocGljX2hlaWdodF9pbl9tYXBfdW5pdHNfbWludXMxICsgMSkgKiAxNik7XG5cbiAgICAgICAgY29kZWNfd2lkdGggLT0gKGZyYW1lX2Nyb3BfbGVmdF9vZmZzZXQgKyBmcmFtZV9jcm9wX3JpZ2h0X29mZnNldCkgKiBjcm9wX3VuaXRfeDtcbiAgICAgICAgY29kZWNfaGVpZ2h0IC09IChmcmFtZV9jcm9wX3RvcF9vZmZzZXQgKyBmcmFtZV9jcm9wX2JvdHRvbV9vZmZzZXQpICogY3JvcF91bml0X3k7XG5cbiAgICAgICAgbGV0IHByZXNlbnRfd2lkdGggPSBNYXRoLmNlaWwoY29kZWNfd2lkdGggKiBzYXJTY2FsZSk7XG5cbiAgICAgICAgZ2IuZGVzdHJveSgpO1xuICAgICAgICBnYiA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByb2ZpbGVfc3RyaW5nOiBwcm9maWxlX3N0cmluZywgIC8vIGJhc2VsaW5lLCBoaWdoLCBoaWdoMTAsIC4uLlxuICAgICAgICAgICAgbGV2ZWxfc3RyaW5nOiBsZXZlbF9zdHJpbmcsICAvLyAzLCAzLjEsIDQsIDQuMSwgNSwgNS4xLCAuLi5cbiAgICAgICAgICAgIGJpdF9kZXB0aDogYml0X2RlcHRoLCAgLy8gOGJpdCwgMTBiaXQsIC4uLlxuICAgICAgICAgICAgY2hyb21hX2Zvcm1hdDogY2hyb21hX2Zvcm1hdCwgIC8vIDQ6MjowLCA0OjI6MiwgLi4uXG4gICAgICAgICAgICBjaHJvbWFfZm9ybWF0X3N0cmluZzogU1BTUGFyc2VyLmdldENocm9tYUZvcm1hdFN0cmluZyhjaHJvbWFfZm9ybWF0KSxcblxuICAgICAgICAgICAgZnJhbWVfcmF0ZToge1xuICAgICAgICAgICAgICAgIGZpeGVkOiBmcHNfZml4ZWQsXG4gICAgICAgICAgICAgICAgZnBzOiBmcHMsXG4gICAgICAgICAgICAgICAgZnBzX2RlbjogZnBzX2RlbixcbiAgICAgICAgICAgICAgICBmcHNfbnVtOiBmcHNfbnVtXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzYXJfcmF0aW86IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogc2FyX3dpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogc2FyX2hlaWdodFxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY29kZWNfc2l6ZToge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBjb2RlY193aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGNvZGVjX2hlaWdodFxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcHJlc2VudF9zaXplOiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHByZXNlbnRfd2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBjb2RlY19oZWlnaHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzdGF0aWMgX3NraXBTY2FsaW5nTGlzdChnYiwgY291bnQpIHtcbiAgICAgICAgbGV0IGxhc3Rfc2NhbGUgPSA4LCBuZXh0X3NjYWxlID0gODtcbiAgICAgICAgbGV0IGRlbHRhX3NjYWxlID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobmV4dF9zY2FsZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGRlbHRhX3NjYWxlID0gZ2IucmVhZFNFRygpO1xuICAgICAgICAgICAgICAgIG5leHRfc2NhbGUgPSAobGFzdF9zY2FsZSArIGRlbHRhX3NjYWxlICsgMjU2KSAlIDI1NjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3Rfc2NhbGUgPSAobmV4dF9zY2FsZSA9PT0gMCkgPyBsYXN0X3NjYWxlIDogbmV4dF9zY2FsZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXRQcm9maWxlU3RyaW5nKHByb2ZpbGVfaWRjKSB7XG4gICAgICAgIHN3aXRjaCAocHJvZmlsZV9pZGMpIHtcbiAgICAgICAgICAgIGNhc2UgNjY6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdCYXNlbGluZSc7XG4gICAgICAgICAgICBjYXNlIDc3OlxuICAgICAgICAgICAgICAgIHJldHVybiAnTWFpbic7XG4gICAgICAgICAgICBjYXNlIDg4OlxuICAgICAgICAgICAgICAgIHJldHVybiAnRXh0ZW5kZWQnO1xuICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdIaWdoJztcbiAgICAgICAgICAgIGNhc2UgMTEwOlxuICAgICAgICAgICAgICAgIHJldHVybiAnSGlnaDEwJztcbiAgICAgICAgICAgIGNhc2UgMTIyOlxuICAgICAgICAgICAgICAgIHJldHVybiAnSGlnaDQyMic7XG4gICAgICAgICAgICBjYXNlIDI0NDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0hpZ2g0NDQnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1Vua25vd24nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldExldmVsU3RyaW5nKGxldmVsX2lkYykge1xuICAgICAgICByZXR1cm4gKGxldmVsX2lkYyAvIDEwKS50b0ZpeGVkKDEpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRDaHJvbWFGb3JtYXRTdHJpbmcoY2hyb21hKSB7XG4gICAgICAgIHN3aXRjaCAoY2hyb21hKSB7XG4gICAgICAgICAgICBjYXNlIDQyMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJzQ6MjowJztcbiAgICAgICAgICAgIGNhc2UgNDIyOlxuICAgICAgICAgICAgICAgIHJldHVybiAnNDoyOjInO1xuICAgICAgICAgICAgY2FzZSA0NDQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICc0OjQ6NCc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAnVW5rbm93bic7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU1BTUGFyc2VyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tdXgvZGVtdXgvbGliL3Nwc19wYXJzZS5qcyIsIlxuXG4vLyBFeHBvbmVudGlhbC1Hb2xvbWIgYnVmZmVyIGRlY29kZXJcbmNsYXNzIEV4cEdvbG9tYiB7XG5cbiAgICBjb25zdHJ1Y3Rvcih1aW50OGFycmF5KSB7XG4gICAgICAgIHRoaXMuVEFHID0gJ0V4cEdvbG9tYic7XG5cbiAgICAgICAgdGhpcy5fYnVmZmVyID0gdWludDhhcnJheTtcbiAgICAgICAgdGhpcy5fYnVmZmVyX2luZGV4ID0gMDtcbiAgICAgICAgdGhpcy5fdG90YWxfYnl0ZXMgPSB1aW50OGFycmF5LmJ5dGVMZW5ndGg7XG4gICAgICAgIHRoaXMuX3RvdGFsX2JpdHMgPSB1aW50OGFycmF5LmJ5dGVMZW5ndGggKiA4O1xuICAgICAgICB0aGlzLl9jdXJyZW50X3dvcmQgPSAwO1xuICAgICAgICB0aGlzLl9jdXJyZW50X3dvcmRfYml0c19sZWZ0ID0gMDtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9idWZmZXIgPSBudWxsO1xuICAgIH1cblxuICAgIF9maWxsQ3VycmVudFdvcmQoKSB7XG4gICAgICAgIGxldCBidWZmZXJfYnl0ZXNfbGVmdCA9IHRoaXMuX3RvdGFsX2J5dGVzIC0gdGhpcy5fYnVmZmVyX2luZGV4O1xuICAgICAgICBpZiAoYnVmZmVyX2J5dGVzX2xlZnQgPD0gMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwR29sb21iOiBfZmlsbEN1cnJlbnRXb3JkKCkgYnV0IG5vIGJ5dGVzIGF2YWlsYWJsZScpO1xuXG4gICAgICAgIGxldCBieXRlc19yZWFkID0gTWF0aC5taW4oNCwgYnVmZmVyX2J5dGVzX2xlZnQpO1xuICAgICAgICBsZXQgd29yZCA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgICAgICB3b3JkLnNldCh0aGlzLl9idWZmZXIuc3ViYXJyYXkodGhpcy5fYnVmZmVyX2luZGV4LCB0aGlzLl9idWZmZXJfaW5kZXggKyBieXRlc19yZWFkKSk7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRfd29yZCA9IG5ldyBEYXRhVmlldyh3b3JkLmJ1ZmZlcikuZ2V0VWludDMyKDAsIGZhbHNlKTtcblxuICAgICAgICB0aGlzLl9idWZmZXJfaW5kZXggKz0gYnl0ZXNfcmVhZDtcbiAgICAgICAgdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdCA9IGJ5dGVzX3JlYWQgKiA4O1xuICAgIH1cblxuICAgIHJlYWRCaXRzKGJpdHMpIHtcbiAgICAgICAgaWYgKGJpdHMgPiAzMilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwR29sb21iOiByZWFkQml0cygpIGJpdHMgZXhjZWVkZWQgbWF4IDMyYml0cyEnKTtcblxuICAgICAgICBpZiAoYml0cyA8PSB0aGlzLl9jdXJyZW50X3dvcmRfYml0c19sZWZ0KSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5fY3VycmVudF93b3JkID4+PiAoMzIgLSBiaXRzKTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRfd29yZCA8PD0gYml0cztcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQgLT0gYml0cztcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdCA/IHRoaXMuX2N1cnJlbnRfd29yZCA6IDA7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA+Pj4gKDMyIC0gdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdCk7XG4gICAgICAgIGxldCBiaXRzX25lZWRfbGVmdCA9IGJpdHMgLSB0aGlzLl9jdXJyZW50X3dvcmRfYml0c19sZWZ0O1xuXG4gICAgICAgIHRoaXMuX2ZpbGxDdXJyZW50V29yZCgpO1xuICAgICAgICBsZXQgYml0c19yZWFkX25leHQgPSBNYXRoLm1pbihiaXRzX25lZWRfbGVmdCwgdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdCk7XG5cbiAgICAgICAgbGV0IHJlc3VsdDIgPSB0aGlzLl9jdXJyZW50X3dvcmQgPj4+ICgzMiAtIGJpdHNfcmVhZF9uZXh0KTtcbiAgICAgICAgdGhpcy5fY3VycmVudF93b3JkIDw8PSBiaXRzX3JlYWRfbmV4dDtcbiAgICAgICAgdGhpcy5fY3VycmVudF93b3JkX2JpdHNfbGVmdCAtPSBiaXRzX3JlYWRfbmV4dDtcblxuICAgICAgICByZXN1bHQgPSAocmVzdWx0IDw8IGJpdHNfcmVhZF9uZXh0KSB8IHJlc3VsdDI7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVhZEJvb2woKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKDEpID09PSAxO1xuICAgIH1cblxuICAgIHJlYWRCeXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkQml0cyg4KTtcbiAgICB9XG5cbiAgICBfc2tpcExlYWRpbmdaZXJvKCkge1xuICAgICAgICBsZXQgemVyb19jb3VudDtcbiAgICAgICAgZm9yICh6ZXJvX2NvdW50ID0gMDsgemVyb19jb3VudCA8IHRoaXMuX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQ7IHplcm9fY291bnQrKykge1xuICAgICAgICAgICAgaWYgKDAgIT09ICh0aGlzLl9jdXJyZW50X3dvcmQgJiAoMHg4MDAwMDAwMCA+Pj4gemVyb19jb3VudCkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudF93b3JkIDw8PSB6ZXJvX2NvdW50O1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRfd29yZF9iaXRzX2xlZnQgLT0gemVyb19jb3VudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gemVyb19jb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9maWxsQ3VycmVudFdvcmQoKTtcbiAgICAgICAgcmV0dXJuIHplcm9fY291bnQgKyB0aGlzLl9za2lwTGVhZGluZ1plcm8oKTtcbiAgICB9XG5cbiAgICByZWFkVUVHKCkgeyAgLy8gdW5zaWduZWQgZXhwb25lbnRpYWwgZ29sb21iXG4gICAgICAgIGxldCBsZWFkaW5nX3plcm9zID0gdGhpcy5fc2tpcExlYWRpbmdaZXJvKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRCaXRzKGxlYWRpbmdfemVyb3MgKyAxKSAtIDE7XG4gICAgfVxuXG4gICAgcmVhZFNFRygpIHsgIC8vIHNpZ25lZCBleHBvbmVudGlhbCBnb2xvbWJcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5yZWFkVUVHKCk7XG4gICAgICAgIGlmICh2YWx1ZSAmIDB4MDEpIHtcbiAgICAgICAgICAgIHJldHVybiAodmFsdWUgKyAxKSA+Pj4gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtMSAqICh2YWx1ZSA+Pj4gMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRXhwR29sb21iO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tdXgvZGVtdXgvbGliL2V4cF9nb2xvbWIuanMiLCJpbXBvcnQgTG9nIGZyb20gJ2xpYi9sb2cnO1xuXG5jb25zdCBsb2cgPSBuZXcgTG9nKCdBQUNEZW11eCcpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBQUNEZW11eCB7XG5cdGNvbnN0cnVjdG9yKHtcblx0XHRhdWRpb1RyYWNrLFxuXHRcdG1lZGlhSW5mb1xuXHR9KSB7XG5cdFx0dGhpcy5fYXVkaW9UcmFjayA9IGF1ZGlvVHJhY2s7XG5cdFx0dGhpcy5fbWVkaWFJbmZvID0gbWVkaWFJbmZvO1xuXG5cdFx0dGhpcy5fbXBlZ1NhbXBsaW5nUmF0ZXMgPSBbXG5cdFx0XHQ5NjAwMCxcblx0XHRcdDg4MjAwLFxuXHRcdFx0NjQwMDAsXG5cdFx0XHQ0ODAwMCxcblx0XHRcdDQ0MTAwLFxuXHRcdFx0MzIwMDAsXG5cdFx0XHQyNDAwMCxcblx0XHRcdDIyMDUwLFxuXHRcdFx0MTYwMDAsXG5cdFx0XHQxMjAwMCxcblx0XHRcdDExMDI1LFxuXHRcdFx0ODAwMCxcblx0XHRcdDczNTBcblx0XHRdO1xuXG5cdFx0dGhpcy5fdGltZXN0YW1wQmFzZSA9IDA7XG5cdH1cblx0cGFyc2UoY2h1bmspIHtcblx0XHRsZXQgdiA9IG5ldyBEYXRhVmlldyhjaHVuayk7XG5cblx0XHRsZXQgdHlwZSA9IHYuZ2V0VWludDgoMCk7XG5cblx0XHRpZiAodHlwZSA9PT0gMCkge1xuXHRcdFx0dGhpcy5fcGFyc2VDb25maWcoY2h1bmsuc2xpY2UoMSkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9wYXJzZUFBQyhjaHVuay5zbGljZSgxKSk7XG5cdFx0fVxuXHR9XG5cdC8vIGNodW5rIGlzIFNvdW5kRGF0YSBpbiBmbHYgYXVkaW8gdGFnXG5cdF9wYXJzZUFBQyhjaHVuaykge1xuXHRcdGxldCBhdWRpbyA9IG5ldyBVaW50OEFycmF5KGNodW5rKTtcblx0XHRsZXQgZHRzID0gdGhpcy5fdGltZXN0YW1wQmFzZTtcblxuXHRcdHRoaXMuX3RpbWVzdGFtcEJhc2UgKz0gdGhpcy5fYXVkaW9UcmFjay5tZXRhLnJlZlNhbXBsZUR1cmF0aW9uO1xuXG5cdFx0dGhpcy5fYXVkaW9UcmFjay5zYW1wbGVzLnB1c2goe1xuXHRcdFx0dW5pdDphdWRpbyxcblx0XHRcdGR0cyxcblx0XHRcdHB0czpkdHMsXG5cdFx0XHRsZW5ndGg6YXVkaW8uYnl0ZUxlbmd0aFxuXHRcdH0pO1xuXG5cdFx0dGhpcy5fYXVkaW9UcmFjay5sZW5ndGggKz0gYXVkaW8uYnl0ZUxlbmd0aDtcblxuXHR9XG5cdF9wYXJzZUNvbmZpZyhjaHVuaykge1xuXHRcdGxldCBhdWRpbyA9IG5ldyBVaW50OEFycmF5KGNodW5rKSxcblx0XHRcdG1ldGEgPSB0aGlzLl9hdWRpb1RyYWNrLm1ldGEsXG5cdFx0XHRjb25maWcsXG5cdFx0XHR1c2VyQWdlbnQgPSBuYXZpZ2F0b3Jcblx0XHRcdC51c2VyQWdlbnRcblx0XHRcdC50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0bGV0IGF1ZGlvT2JqZWN0VHlwZSA9IGF1ZGlvWzBdID4+PiAzOyAvLyA1YlxuXHRcdGxldCBvcmlnaW5UeXBlID0gYXVkaW9PYmplY3RUeXBlO1xuXHRcdGxldCBzYW1wbGluZ0ZyZUluZGV4ID0gKChhdWRpb1swXSAmIDB4MDcpIDw8IDEpIHwgKGF1ZGlvWzFdID4+PiA3KTsgLy8gNGJcblx0XHRsZXQgZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IG51bGw7XG5cblx0XHQvLyBvbmx5IGRlY29kZSB0aGUgc2FtcGxlIGZyZXF1ZW5jdCBiZXR3ZWVuIDAgLSAxMy5cblx0XHRpZiAoc2FtcGxpbmdGcmVJbmRleCA8IDAgfHwgc2FtcGxpbmdGcmVJbmRleCA+PSB0aGlzLl9tcGVnU2FtcGxpbmdSYXRlcy5sZW5ndGgpIHtcblx0XHRcdGxvZy5lKCdpbnZhbGlkIHNhbXBsaW5nRnJlSW5kZXg6ICcgKyBzYW1wbGluZ0ZyZUluZGV4KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblxuXHRcdGxldCBzYW1wbGluZ0ZyZSA9IHRoaXMuX21wZWdTYW1wbGluZ1JhdGVzW3NhbXBsaW5nRnJlSW5kZXhdO1xuXG5cdFx0bGV0IGNoYW5uZWxDb25maWcgPSAoYXVkaW9bMV0gJiAweDc4KSA+Pj4gMztcblx0XHRpZiAoY2hhbm5lbENvbmZpZyA8IDAgfHwgY2hhbm5lbENvbmZpZyA+IDcpIHtcblx0XHRcdGxvZy5lKCdpbnZhbGlkIGNoYW5uZWwgQ291bnQ6ICcgKyBjaGFubmVsQ29uZmlnKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoYXVkaW9PYmplY3RUeXBlID09PSA1KSB7IC8vIEhFLUFBQy9TQlJcblx0XHRcdC8vIDQgYml0c1xuXHRcdFx0ZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9ICgoYXVkaW9bMV0gJiAweDA3KSA8PCAxKSB8IChhdWRpb1syXSA+Pj4gNyk7XG5cdFx0XHQvLyA1IGJpdHNcblx0XHRcdGF1ZGlvRXh0ZW5zaW9uT2JqZWN0VHlwZSA9IChhdWRpb1syXSAmIDB4N0MpID4+PiAyO1xuXHRcdH1cblxuXHRcdC8vIHJlZmVyIGFkdHMuanMgaW4gaGxzLmpzXG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvLWRldi9obHMuanMvYmxvYi9tYXN0ZXIvc3JjL2RlbXV4L2FkdHMuanNcblxuXHRcdGxvZy5pKGB1c2VyQWdlbnQgaXMgJHt1c2VyQWdlbnR9YCk7XG5cblx0XHRsb2cuaShgdGhlIGF1ZGlvT2JqZWN0VHlwZSBpbiBBQUMgaXMgJHthdWRpb09iamVjdFR5cGV9YCk7XG5cblx0XHQvLyBmaXJlZm94OiBmcmVxIGxlc3MgdGhhbiAyNGtIeiA9IEFBQyBTQlIgKEhFLUFBQylcblx0XHRpZiAodXNlckFnZW50LmluZGV4T2YoJ2ZpcmVmb3gnKSAhPT0gLTEpIHtcblx0XHRcdGlmIChzYW1wbGluZ0ZyZUluZGV4ID49IDYpIHtcblx0XHRcdFx0YXVkaW9PYmplY3RUeXBlID0gNTtcblx0XHRcdFx0Y29uZmlnID0gbmV3IEFycmF5KDQpO1xuXG5cdFx0XHRcdC8vIEhFLUFBQyB1c2VzIFNCUiAoU3BlY3RyYWwgQmFuZCBSZXBsaWNhdGlvbikgLCBoaWdoIGZyZXF1ZW5jaWVzIGFyZVxuXHRcdFx0XHQvLyBjb25zdHJ1Y3RlZCBmcm9tIGxvdyBmcmVxdWVuY2llcyBzbyB0aGVyZSBpcyBhIGZhY3RvciAyIGJldHdlZW4gc2FtcGxlIGZyZVxuXHRcdFx0XHQvLyByYXRlIGFuZCBleHRlbiBmcmUgcmF0ZSBhbmQgcmVmZXJpbmcgdG8gX21wZWdTYW1wbGluZ1JhdGVzIGxpc3QgbXV0aXBseSB0aGVcblx0XHRcdFx0Ly8gc2FtcGxlIHJhdGUgYnkgMiwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byBzdWJzdHJhY3QgMyBmcm9tIHNhbXBsaW5nRnJlSW5kZXhcblx0XHRcdFx0ZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHNhbXBsaW5nRnJlSW5kZXggLSAzO1xuXHRcdFx0fSBlbHNlIHsgLy8gdXNlIExDLUFBQ1xuXHRcdFx0XHRhdWRpb09iamVjdFR5cGUgPSAyO1xuXHRcdFx0XHRjb25maWcgPSBuZXcgQXJyYXkoMik7XG5cdFx0XHRcdGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSBzYW1wbGluZ0ZyZUluZGV4O1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAodXNlckFnZW50LmluZGV4T2YoJ2FuZHJvaWQnKSAhPT0gLTEpIHtcblx0XHRcdC8vIEFuZHJvaWQ6IHVzZSBMQy1BQUNcblx0XHRcdGF1ZGlvT2JqZWN0VHlwZSA9IDI7XG5cdFx0XHRjb25maWcgPSBuZXcgQXJyYXkoMik7XG5cdFx0XHRleHRlbnNpb25TYW1wbGluZ0luZGV4ID0gc2FtcGxpbmdGcmVJbmRleDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gb3RoZXIgYnJvd3NlcnMgYWx3YXlzIHVzZSBIRS1BQUMgU0JSIHR5cGUgdGhleSBkb24ndCBzdXBwb3J0IGNvZGVjIHN3aXRjaFxuXG5cdFx0XHRhdWRpb09iamVjdFR5cGUgPSA1O1xuXHRcdFx0ZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHNhbXBsaW5nRnJlSW5kZXg7XG5cdFx0XHRjb25maWcgPSBuZXcgQXJyYXkoNCk7XG5cblx0XHRcdGlmIChzYW1wbGluZ0ZyZUluZGV4ID49IDYpIHtcblx0XHRcdFx0ZXh0ZW5zaW9uU2FtcGxpbmdJbmRleCA9IHNhbXBsaW5nRnJlSW5kZXggLSAzO1xuXHRcdFx0fSBlbHNlIGlmIChjaGFubmVsQ29uZmlnID09PSAxKSB7IC8vIE1vbm8gY2hhbm5lbFxuXHRcdFx0XHRhdWRpb09iamVjdFR5cGUgPSAyO1xuXHRcdFx0XHRjb25maWcgPSBuZXcgQXJyYXkoMik7XG5cdFx0XHRcdGV4dGVuc2lvblNhbXBsaW5nSW5kZXggPSBzYW1wbGluZ0ZyZUluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRjb25maWdbMF0gPSBhdWRpb09iamVjdFR5cGUgPDwgMztcblx0XHRcdGNvbmZpZ1swXSB8PSAoc2FtcGxpbmdGcmVJbmRleCAmIDB4MEYpID4+PiAxO1xuXHRcdFx0Y29uZmlnWzFdID0gKHNhbXBsaW5nRnJlSW5kZXggJiAweDBGKSA8PCA3O1xuXHRcdFx0Y29uZmlnWzFdIHw9IChjaGFubmVsQ29uZmlnICYgMHgwRikgPDwgMztcblxuXHRcdH1cblxuXHRcdGNvbmZpZ1swXSA9IGF1ZGlvT2JqZWN0VHlwZSA8PCAzO1xuXHRcdGNvbmZpZ1swXSB8PSAoc2FtcGxpbmdGcmVJbmRleCAmIDB4MEYpID4+PiAxO1xuXHRcdGNvbmZpZ1sxXSA9IChzYW1wbGluZ0ZyZUluZGV4ICYgMHgwRikgPDwgNztcblx0XHRjb25maWdbMV0gfD0gKGNoYW5uZWxDb25maWcgJiAweDBGKSA8PCAzO1xuXHRcdGlmIChhdWRpb09iamVjdFR5cGUgPT09IDUpIHtcblx0XHRcdC8vIGF1ZGlvT2JqZWN0VHlwZSAoZm9yY2UgdG8gMiwgY2hyb21lIGlzIGNoZWNraW5nIHRoYXQgb2JqZWN0IHR5cGUgaXMgbGVzcyB0aGFuXG5cdFx0XHQvLyA1ID8/P1xuXHRcdFx0Ly8gaHR0cHM6Ly9jaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYy5naXQvKy9tYXN0ZXIvbWVkaWEvZm9ybWF0cy9tcDRcblx0XHRcdC8vXG5cdFx0XHRjb25maWdbMV0gfD0gKChleHRlbnNpb25TYW1wbGluZ0luZGV4ICYgMHgwRikgPj4+IDEpO1xuXHRcdFx0Y29uZmlnWzJdID0gKGV4dGVuc2lvblNhbXBsaW5nSW5kZXggJiAweDAxKSA8PCA3O1xuXHRcdFx0Ly8gZXh0ZW5kZWQgYXVkaW8gb2JqZWN0IHR5cGU6IGZvcmNlIHRvIDIgKExDLUFBQylcblx0XHRcdGNvbmZpZ1syXSB8PSAoMiA8PCAyKTtcblx0XHRcdGNvbmZpZ1szXSA9IDA7XG5cdFx0fVxuXG5cdFx0bWV0YS5jb25maWcgPSBjb25maWc7XG5cdFx0bWV0YS5hdWRpb1NhbXBsZVJhdGUgPSBzYW1wbGluZ0ZyZTtcblx0XHRtZXRhLmNoYW5uZWxDb3VudCA9IGNoYW5uZWxDb25maWc7XG5cdFx0bWV0YS5jb2RlYyA9ICdtcDRhLjQwLicgKyBhdWRpb09iamVjdFR5cGU7XG5cblx0XHRtZXRhLnJlZlNhbXBsZUR1cmF0aW9uID0gTWF0aC5mbG9vcigxMDI0IC8gbWV0YS5hdWRpb1NhbXBsZVJhdGUgKiBtZXRhLnRpbWVzY2FsZSk7XG5cblx0fVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tdXgvZGVtdXgvYWFjZGVtdXguanMiLCJpbXBvcnQgRkxWRGVtdXggZnJvbSAnLi9kZW11eC9mbHZkZW11eCc7XG5pbXBvcnQgTVA0UmVtdXggZnJvbSAnLi9yZW11eC9tcDRyZW11eCc7XG5pbXBvcnQge2NvbmNhdEJ1ZmZlcn0gZnJvbSAnZGVidWcvaGVscGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXV4Q29udHJvbGxlcntcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLl9mbHZEZW11eCA9IG5ldyBGTFZEZW11eCgpO1xuXG4gICAgICAgIHRoaXMuX21wNFJlbXV4ID0gbmV3IE1QNFJlbXV4KHtcbiAgICAgICAgICAgIGF1ZGlvVHJhY2s6dGhpcy5fZmx2RGVtdXguYXVkaW9UcmFjayxcbiAgICAgICAgICAgIHZpZGVvVHJhY2s6dGhpcy5fZmx2RGVtdXgudmlkZW9UcmFjayxcbiAgICAgICAgICAgIG1lZGlhSW5mbzp0aGlzLl9mbHZEZW11eC5tZWRpYUluZm9cbiAgICAgICAgfSlcbiAgICB9XG4gICAgcGFyc2UoY2h1bmtBcnJheSx0eXBlPVwiTVNcIil7XG4gICAgICAgIHRoaXMuX2ZsdkRlbXV4LnBhcnNlKGNodW5rQXJyYXkpO1xuICAgICAgICBsZXQgYnVmZmVyO1xuICAgICAgICBpZih0eXBlID09PSBcIklTXCIpe1xuICAgICAgICAgICAgYnVmZmVyID0gdGhpcy5fbXA0UmVtdXguZ2VuZXJhdGVJUygpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGJ1ZmZlciA9IHRoaXMuX21wNFJlbXV4LmdlbmVyYXRlTVMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmNhdEJ1ZmZlcihidWZmZXIsMTAyNCoxMDApO1xuICAgICAgICBcbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL211eC9pbmRleC5qcyIsImltcG9ydCBNUDQgZnJvbSAnLi9saWIvbXA0X2dlbmVyYXRvcic7XG5pbXBvcnQge1xuICAgIG1lcmdlVHlwZWRBcnJheVxufSBmcm9tICdsaWIvdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNUDRSZW11eCB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBhdWRpb1RyYWNrLFxuICAgICAgICB2aWRlb1RyYWNrLFxuICAgICAgICBtZWRpYUluZm9cbiAgICB9KSB7XG4gICAgICAgIHRoaXMuX2F1ZGlvVHJhY2sgPSBhdWRpb1RyYWNrO1xuICAgICAgICB0aGlzLl92aWRlb1RyYWNrID0gdmlkZW9UcmFjaztcbiAgICAgICAgdGhpcy5fbWVkaWFJbmZvID0gbWVkaWFJbmZvO1xuXG4gICAgICAgIHRoaXMuX3NlcSA9IDA7XG4gICAgfVxuICAgIGdlbmVyYXRlSVMoKSB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgICBoYXNWaWRlbyxcbiAgICAgICAgICAgIGhhc0F1ZGlvXG4gICAgICAgIH0gPSB0aGlzLl9tZWRpYUluZm87XG4gICAgICAgIGlmIChoYXNWaWRlbyAmJiBoYXNBdWRpbykge1xuICAgICAgICAgICAgcmV0dXJuIE1QNC5pbml0Qm94KHRoaXMuX3ZpZGVvVHJhY2subWV0YSwgdGhpcy5fYXVkaW9UcmFjay5tZXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZW5lcmF0ZU1TKCkge1xuICAgICAgICBsZXQgdmlkZW9NUyA9IG5ldyBVaW50OEFycmF5KDApLFxuICAgICAgICAgICAgYXVkaW9NUyA9IG5ldyBVaW50OEFycmF5KDApO1xuXG4gICAgICAgIGlmKHRoaXMuX3ZpZGVvVHJhY2suc2FtcGxlcy5sZW5ndGgpe1xuICAgICAgICAgICAgdmlkZW9NUyA9IHRoaXMuX3JlbXV4VmlkZW8oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHRoaXMuX2F1ZGlvVHJhY2suc2FtcGxlcy5sZW5ndGgpe1xuICAgICAgICAgICAgYXVkaW9NUyA9IHRoaXMuX3JlbXV4QXVkaW8oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3ZpZGVvVHJhY2suc2FtcGxlcyA9IFtdO1xuICAgICAgICB0aGlzLl9hdWRpb1RyYWNrLnNhbXBsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fdmlkZW9UcmFjay5sZW5ndGggPSB0aGlzLl9hdWRpb1RyYWNrLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgcmV0dXJuIG1lcmdlVHlwZWRBcnJheShhdWRpb01TKTtcblxuICAgIH1cbiAgICBcbiAgICBfcmVtdXhBdWRpbygpe1xuICAgICAgICBsZXQge1xuICAgICAgICAgICAgYXVkaW9NZGF0LGJhc2VEdHNcbiAgICAgICAgfSA9IHRoaXMuX3JlbXV4QXVkaW9NZGF0KCk7XG5cbiAgICAgICAgbGV0IG1vb2YgPSBNUDQubW9vZih0aGlzLl9hdWRpb1RyYWNrLGJhc2VEdHMsdGhpcy5fc2VxKTtcblxuICAgICAgICByZXR1cm4gbWVyZ2VUeXBlZEFycmF5KG1vb2YsYXVkaW9NZGF0KTtcbiAgICB9XG4gICAgX3JlbXV4VmlkZW8oKSB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgICB2aWRlb01kYXQsXG4gICAgICAgICAgICBiYXNlRHRzXG4gICAgICAgIH0gPSB0aGlzLl9yZW11eFZpZGVvTWRhdCgpO1xuXG4gICAgICAgIGxldCBtb29mID0gTVA0Lm1vb2YodGhpcy5fdmlkZW9UcmFjaywgYmFzZUR0cywgdGhpcy5fc2VxKTtcblxuXG4gICAgICAgIHJldHVybiBtZXJnZVR5cGVkQXJyYXkobW9vZiwgdmlkZW9NZGF0KTtcbiAgICB9XG4gICAgX3JlbXV4QXVkaW9NZGF0KCl7XG4gICAgICAgIGxldCBhdWRpb01kYXQgPSBNUDQubWRhdCh0aGlzLl9hdWRpb1RyYWNrLmxlbmd0aCk7XG5cbiAgICAgICAgbGV0IG9mZnNldCA9IDgsXG4gICAgICAgICAgICB0cmFjayA9IHRoaXMuX2F1ZGlvVHJhY2ssXG4gICAgICAgICAgICBtZXRhID0gdHJhY2subWV0YSxcbiAgICAgICAgICAgIHJlZkR1cmF0aW9uID0gbWV0YS5yZWZTYW1wbGVEdXJhdGlvbixcbiAgICAgICAgICAgIHNhbXBsZXMgPSB0cmFjay5zYW1wbGVzLFxuICAgICAgICAgICAgYmFzZUR0cyA9IHNhbXBsZXNbMF0uZHRzLFxuICAgICAgICAgICAgbXA0U2FtcGxlcyA9IFtdO1xuXG4gICAgICAgIHNhbXBsZXMuZm9yRWFjaCgoYWNjU2FtcGxlLGluZGV4KT0+e1xuICAgICAgICAgICAgbGV0IGR0cyA9IGFjY1NhbXBsZS5kdHMsXG4gICAgICAgICAgICBwdHMgPSBhY2NTYW1wbGUucHRzLFxuICAgICAgICAgICAgY3RzID0gcHRzIC0gZHRzO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBhdWRpb01kYXQuc2V0KGFjY1NhbXBsZS51bml0LCBvZmZzZXQpO1xuXG5cdFx0XHRsZXQgc2FtcGxlU2l6ZSA9IGFjY1NhbXBsZS51bml0LmJ5dGVMZW5ndGg7XG5cblxuICAgICAgICAgICAgbXA0U2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBkdHMsXG5cdFx0XHRcdHB0cyxcbiAgICAgICAgICAgICAgICBjdHM6IDAsXG4gICAgICAgICAgICAgICAgc2FtcGxlU2l6ZSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjpyZWZEdXJhdGlvbixcbiAgICAgICAgICAgICAgICBjaHVua09mZnNldDpvZmZzZXQsXG4gICAgICAgICAgICAgICAgZmxhZ3M6IHtcblx0XHRcdFx0XHRpc0xlYWRpbmc6IDAsXG5cdFx0XHRcdFx0ZGVwZW5kc09uOiAxLCAvLyBvcmlnaW4gaXMgMVxuXHRcdFx0XHRcdGlzRGVwZW5kZWQ6IDAsXG5cdFx0XHRcdFx0aGFzUmVkdW5kYW5jeTogMFxuXHRcdFx0XHR9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBvZmZzZXQgKz0gc2FtcGxlU2l6ZTtcblxuICAgICAgICB9KTtcblxuICAgICAgICB0cmFjay5zYW1wbGVzID0gbXA0U2FtcGxlcztcbiAgICAgICAgdGhpcy5fc2VxKys7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJhc2VEdHMsXG4gICAgICAgICAgICBhdWRpb01kYXRcbiAgICAgICAgfVxuXG4gICAgfVxuICAgXG4gICAgX3JlbXV4VmlkZW9NZGF0KCkge1xuICAgICAgICBsZXQgdmlkZW9NZGF0ID0gTVA0Lm1kYXQodGhpcy5fdmlkZW9UcmFjay5sZW5ndGgpO1xuXG4gICAgICAgIGxldCBvZmZzZXQgPSA4LFxuICAgICAgICAgICAgdHJhY2sgPSB0aGlzLl92aWRlb1RyYWNrLFxuICAgICAgICAgICAgbWV0YSA9IHRyYWNrLm1ldGEsXG4gICAgICAgICAgICByZWZEdXJhdGlvbiA9IG1ldGEucmVmU2FtcGxlRHVyYXRpb24sXG4gICAgICAgICAgICBzYW1wbGVzID0gdHJhY2suc2FtcGxlcyxcbiAgICAgICAgICAgIG1wNFNhbXBsZXMgPSBbXTtcblxuICAgICAgICBsZXQgYmFzZUR0cyA9IHNhbXBsZXNbMF0uZHRzO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuX3ZpZGVvVHJhY2spO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLl9hdWRpb1RyYWNrKTtcblxuICAgICAgICBzYW1wbGVzLmZvckVhY2goKHZpU2FtcGxlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgbGV0IGR0cyA9IHZpU2FtcGxlLmR0cyxcbiAgICAgICAgICAgICAgICBjdHMgPSB2aVNhbXBsZS5jdHMsXG4gICAgICAgICAgICAgICAgcHRzID0gZHRzICsgY3RzO1xuXG5cbiAgICAgICAgICAgIGxldCBzYW1wbGVTaXplID0gdmlTYW1wbGUuc2xpY2VzLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZpZGVvTWRhdC5zZXQodmlTYW1wbGUuc2xpY2VzLCBvZmZzZXQpO1xuXG4gICAgICAgICAgICBtZXRhLmR1cmF0aW9uICs9IHJlZkR1cmF0aW9uO1xuXG4gICAgICAgICAgICBsZXQga2V5RnJhbWUgPSB2aVNhbXBsZS5rZXlGcmFtZTtcblxuICAgICAgICAgICAgbXA0U2FtcGxlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBkdHMsXG4gICAgICAgICAgICAgICAgcHRzLFxuICAgICAgICAgICAgICAgIGN0cyxcbiAgICAgICAgICAgICAgICBsZW5ndGg6IHZpU2FtcGxlLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBrZXlGcmFtZSxcbiAgICAgICAgICAgICAgICBzYW1wbGVTaXplLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiByZWZEdXJhdGlvbixcbiAgICAgICAgICAgICAgICBjaHVua09mZnNldDogb2Zmc2V0LFxuICAgICAgICAgICAgICAgIGZsYWdzOiB7XG4gICAgICAgICAgICAgICAgICAgIGlzTGVhZGluZzogMCxcbiAgICAgICAgICAgICAgICAgICAgZGVwZW5kc09uOiBrZXlGcmFtZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAyIDogMSwgLy8gYW4gSSBwaWN0dXJlIDogbm90IEkgcGljdHVyZVxuICAgICAgICAgICAgICAgICAgICBpc0RlcGVuZGVkOiBrZXlGcmFtZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAxIDogMCwgLy8gIHVua25vd24gZGVwZW5kZW50IHNhbXBsZTogbm90IGRpc3Bvc2FibGVcbiAgICAgICAgICAgICAgICAgICAgaGFzUmVkdW5kYW5jeTogMCwgLy8gZm9yIHNkdHBcbiAgICAgICAgICAgICAgICAgICAgaXNOb25TeW5jOiBrZXlGcmFtZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAwIDogMVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cblxuICAgICAgICAgICAgb2Zmc2V0ICs9IHZpU2FtcGxlLmxlbmd0aDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKG1wNFNhbXBsZXMpO1xuXG4gICAgICAgIHRyYWNrLnNhbXBsZXMgPSBtcDRTYW1wbGVzO1xuICAgICAgICB0aGlzLl9zZXErKztcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmlkZW9NZGF0LFxuICAgICAgICAgICAgYmFzZUR0c1xuICAgICAgICB9XG5cbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL211eC9yZW11eC9tcDRyZW11eC5qcyIsImxldCBNUDQgPSB7fTtcblxuTVA0LnR5cGVzID0ge1xuXHQvLyBjb2RpbmduYW1lXG5cdGF2YzE6IFtdLFxuXHRhdmNDOiBbXSxcblx0YnRydDogW10sXG5cdGRpbmY6IFtdLFxuXHRkcmVmOiBbXSxcblx0ZXNkczogW10sXG5cdGZ0eXA6IFtdLFxuXHRoZGxyOiBbXSxcblx0bWRhdDogW10sXG5cdG1kaGQ6IFtdLFxuXHRtZGlhOiBbXSxcblx0bWZoZDogW10sXG5cdG1pbmY6IFtdLFxuXHRtb29mOiBbXSxcblx0bW9vdjogW10sXG5cdG1wNGE6IFtdLFxuXHQnLm1wMyc6IFtdLFxuXHRtdmV4OiBbXSxcblx0bXZoZDogW10sXG5cdHBhc3A6IFtdLFxuXHRzZHRwOiBbXSxcblx0c3RibDogW10sXG5cdHN0Y286IFtdLFxuXHRzdHNjOiBbXSxcblx0c3RzZDogW10sXG5cdHN0c3o6IFtdLFxuXHRzdHRzOiBbXSxcblx0dGZkdDogW10sXG5cdHRmaGQ6IFtdLFxuXHR0cmFmOiBbXSxcblx0dHJhazogW10sXG5cdHRydW46IFtdLFxuXHR0cmV4OiBbXSxcblx0dGtoZDogW10sXG5cdHZtaGQ6IFtdLFxuXHRzbWhkOiBbXSxcblx0ZnJlZTogW10sXG5cdHN0c3M6IFtdLFxuXHRjdHRzOiBbXVxufVxuXG5cbk1QNC5zeW1ib2xWYWx1ZSA9IHtcblx0RlRZUDogbmV3IFVpbnQ4QXJyYXkoW1xuXHRcdDB4NjksIDB4NzMsIDB4NkYsIDB4NkQsIC8vIG1ham9yX2JyYW5kOiBpc29tXG5cdFx0MHgwLCAweDAsIDB4MCwgMHgxLCAvLyBtaW5vcl92ZXJzaW9uOiAweDAxXG5cdFx0MHg2OSwgMHg3MywgMHg2RiwgMHg2RCwgLy8gaXNvbVxuXHRcdDB4NjEsIDB4NzYsIDB4NjMsIDB4MzEgLy8gYXZjMVxuXHRdKSxcblx0SERMUl9WSURFTzogbmV3IFVpbnQ4QXJyYXkoW1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkXG5cdFx0MHg3NiwgMHg2OSwgMHg2NCwgMHg2NSwgLy8gaGFuZGxlcl90eXBlOiAndmlkZSdcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZDogMyAqIDQgYnl0ZXNcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLFxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG5cdFx0MHg1NiwgMHg2OSwgMHg2NCwgMHg2NSxcblx0XHQweDZGLCAweDQ4LCAweDYxLCAweDZFLFxuXHRcdDB4NjQsIDB4NkMsIDB4NjUsIDB4NzIsIDB4MDAgLy8gbmFtZTogVmlkZW9IYW5kbGVyXG5cdF0pLFxuXHRIRExSX0FVRElPOiBuZXcgVWludDhBcnJheShbXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gdmVyc2lvbigwKSArIGZsYWdzXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcHJlX2RlZmluZWRcblx0XHQweDczLCAweDZGLCAweDc1LCAweDZFLCAvLyBoYW5kbGVyX3R5cGU6ICdzb3VuJ1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkOiAzICogNCBieXRlc1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcblx0XHQweDUzLCAweDZGLCAweDc1LCAweDZFLFxuXHRcdDB4NjQsIDB4NDgsIDB4NjEsIDB4NkUsXG5cdFx0MHg2NCwgMHg2QywgMHg2NSwgMHg3MiwgMHgwMCAvLyBuYW1lOiBTb3VuZEhhbmRsZXJcblx0XSksXG5cdFNUU0M6IG5ldyBVaW50OEFycmF5KFtcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyB2ZXJzaW9uKDApICsgZmxhZ3Ncblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBlbnRyeV9jb3VudFxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMSxcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAxXG5cdF0pLFxuXHRGU1RUUzogbmV3IFVpbnQ4QXJyYXkoW1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gZW50cnlfY291bnRcblx0XSksXG5cdEZTVFNDOiBuZXcgVWludDhBcnJheShbXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gdmVyc2lvbigwKSArIGZsYWdzXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyBlbnRyeV9jb3VudFxuXHRdKSxcblx0RlNUU1o6IG5ldyBVaW50OEFycmF5KFtcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyB2ZXJzaW9uKDApICsgZmxhZ3Ncblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBzYW1wbGVfc2l6ZVxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gc2FtcGxlX2NvdW50XG5cdF0pLFxuXHRGU1RDTzogbmV3IFVpbnQ4QXJyYXkoW1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gZW50cnlfY291bnRcblx0XSksXG5cdFNUVFM6IG5ldyBVaW50OEFycmF5KFtcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuXHRdKSxcblx0Q1RUUzogbmV3IFVpbnQ4QXJyYXkoW1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAgLy8gdmVyc2lvbigwKSArIGZsYWdzXG5cdF0pLFxuXHRTVENPOiBuZXcgVWludDhBcnJheShbXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyB2ZXJzaW9uKDApICsgZmxhZ3Ncblx0XSksXG5cdFNUU1o6IG5ldyBVaW50OEFycmF5KFtcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuXHRdKSxcblx0U1RTRDogbmV3IFVpbnQ4QXJyYXkoW1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEgLy8gZW50cnlfY291bnRcblx0XSksXG5cdERSRUY6IG5ldyBVaW50OEFycmF5KFtcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyB2ZXJzaW9uKDApICsgZmxhZ3Ncblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBlbnRyeV9jb3VudFxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MEMsIC8vIGVudHJ5X3NpemVcblx0XHQweDc1LCAweDcyLCAweDZDLCAweDIwLCAvLyB0eXBlICd1cmwgJ1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEgLy8gdmVyc2lvbigwKSArIGZsYWdzXG5cdF0pLFxuXHRWTUhEOiBuZXcgVWludDhBcnJheShbXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gdmVyc2lvbigwKSArIGZsYWdzXG5cdFx0MHgwMCwgMHgwMCwgLy8gZ3JhcGhpY3Ntb2RlOiAyIGJ5dGVzXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gb3Bjb2xvcjogMyAqIDIgYnl0ZXNcblx0XHQweDAwLCAweDAwXG5cdF0pLFxuXHRTTUhEOiBuZXcgVWludDhBcnJheShbXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gdmVyc2lvbigwKSArIGZsYWdzXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCAvLyBiYWxhbmNlKDIpICsgcmVzZXJ2ZWQoMilcblx0XSksXG5cdFNUU1M6IG5ldyBVaW50OEFycmF5KFtcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwIC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuXHRdKVxufVxuXG4vKipcbiAqIEBwYXJhbSB0eXBlIHtNUDQudHlwZXN9IG9uZSBvZiBNUDQudHlwZXNcbiAqIEBwYXJhbSBidWZmZXJzIHtBcnJheX0gdGhlIGJvZHkgYnVmZmVyIG9mIGJveC5cbiAqIEByZXR1cm4gYnVmZmVyIHtUeXBlQXJyYXl9IHRoZSBjb21wbGV0ZSBib3ggYnVmZmVyLlxuICovXG5NUDQuYm94ID0gZnVuY3Rpb24gKHR5cGUpIHtcblx0bGV0IGJveExlbmd0aCA9IDg7IC8vIGluY2x1ZGUgdGhlIHRvdGFsIDggYnl0ZSBsZW5ndGggb2Ygc2l6ZSBhbmQgdHlwZVxuXG5cdGxldCBidWZmZXJzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuXHRidWZmZXJzLmZvckVhY2godmFsID0+IHtcblx0XHRib3hMZW5ndGggKz0gdmFsLmJ5dGVMZW5ndGg7XG5cdH0pO1xuXG5cdGxldCBib3hCdWZmZXIgPSBuZXcgVWludDhBcnJheShib3hMZW5ndGgpO1xuXHQvLyB0aGUgZmlyc3QgZm91ciBieXRlIHN0YW5kcyBmb3IgYm94TGVuZ3RoXG5cdGJveEJ1ZmZlclswXSA9IChib3hMZW5ndGggPj4gMjQpICYgMHhmZjtcblx0Ym94QnVmZmVyWzFdID0gKGJveExlbmd0aCA+PiAxNikgJiAweGZmO1xuXHRib3hCdWZmZXJbMl0gPSAoYm94TGVuZ3RoID4+IDgpICYgMHhmZjtcblx0Ym94QnVmZmVyWzNdID0gYm94TGVuZ3RoICYgMHhmZjtcblxuXHQvLyB0aGUgc2Vjb25kIGZvdXIgYnl0ZSBpcyBib3gncyB0eXBlXG5cdGJveEJ1ZmZlci5zZXQodHlwZSwgNCk7XG5cblx0bGV0IG9mZnNldCA9IDg7IC8vIHRoZSBieXRlTGVuZ3RoIG9mIHR5cGUgYW5kIHNpemVcblxuXHRidWZmZXJzLmZvckVhY2godmFsID0+IHtcblx0XHRib3hCdWZmZXIuc2V0KHZhbCwgb2Zmc2V0KTtcblx0XHRvZmZzZXQgKz0gdmFsLmJ5dGVMZW5ndGg7XG5cdH0pXG5cblx0cmV0dXJuIGJveEJ1ZmZlcjtcblxufVxuXG5NUDQuZnJlZSA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLmZyZWUpO1xufVxuXG5NUDQubW9vZiA9IGZ1bmN0aW9uICh0cmFjaywgYmFzZURUUyxzZXEpIHtcblx0cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLm1vb2YsIC8vIHdob2xlIGJveFxuXHRcdE1QNC5tZmhkKHNlcSksIC8vIG1maGQgYm94XG5cdFx0TVA0LnRyYWYodHJhY2ssIGJhc2VEVFMpIC8vIHRoZSBzdWJzZXQgYm94XG5cdCk7XG59XG5cbi8vIGl0IGlzIGEgZnVsbEJveCBub3QgYm94IVxuTVA0Lm1maGQgPSBmdW5jdGlvbiAoc2VxKSB7XG5cdHJldHVybiBNUDQuZnJhZ21lbnRCb3goTVA0LnR5cGVzLm1maGQsIHNlcSk7XG59XG5cbk1QNC5tZGF0ID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuXHRsZW5ndGggKz0gODtcblx0bGV0IG1kYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuXG5cdGxldCB2aWV3ID0gbmV3IERhdGFWaWV3KG1kYXQuYnVmZmVyKTtcblxuXHR2aWV3LnNldFVpbnQzMigwLCBsZW5ndGgpO1xuXHRtZGF0LnNldChNUDQudHlwZXMubWRhdCwgNCk7XG5cblx0cmV0dXJuIG1kYXQ7XG59XG5cbk1QNC50cmFmID0gZnVuY3Rpb24gKHRyYWNrLCBiYXNlRFRTKSB7XG5cblx0Ly8gdHJhY2sgZnJhZ21lbnQgaGVhZGVyXG5cdGxldCB0ZmhkID0gTVA0LnRmaGQodHJhY2suaWQpO1xuXG5cdC8vIHRyYWNrIGZyYWdtZW50IERlY29kZSBUaW1lXG5cdGxldCB0ZmR0ID0gTVA0LnRmZHQoYmFzZURUUyk7XG5cblx0Ly8gU2FtcGxlRGVwZW5kZW5jeVR5cGVCb3hcblx0bGV0IHNkdHAgPSBNUDQuc2R0cCh0cmFjayk7XG5cblx0Ly8gVHJhY2tSdW5Cb3hcblx0Ly8gdGhlIHNlY29uZCBwYXJhbSBpcyBkYXRhX29mZnNldC4gaXQgaXMgdGhlIHZhbHVlIGZyb20gbW9vZiB0byBtZGF0ICx3aGljaFxuXHQvLyBkb2Vzbid0IGluY2x1ZGUgdHJ1biBhcyBpdCBpcyBjYWxjdWxhdGVkIGluIE1QNC50cnVuIGZ1bmNcblx0Ly8gbW9yZSBpbmZvcm1hdGlvbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlby1kZXYvaGxzLmpzL2NvbW1pdC9hNGQ5MWYxNTYzNzk5Nzg3NDcyZjRlZGQxZmZjODIzM2E3ZGVkYTRjI2RpZmYtNTM3MDM5MWZjMGY2M2YzMGU4NDk4YWYzOGQ5YzQ0M2ZSNTUyXG5cdGxldCB0cnVuID0gTVA0LnRydW4odHJhY2ssXG5cdFx0OCArIC8vIG1vb2Zcblx0XHQxNiArIC8vIG1maGRcblx0XHQ4ICsgLy8gdHJhZlxuXHRcdDE2ICsgLy8gdGZoZFxuXHRcdDE2ICsgLy8gdGZkdFxuXHRcdC8vdHJ1biAgaW4gdGhlIGZ1bmN0aW9uIHRvIGFkZCB0cnVuLmxlbmd0aFxuXHRcdHNkdHAuYnl0ZUxlbmd0aCArIC8vIHNkdHAgbGVuZ3RoXG5cdFx0OCAvL21kYXRcblx0KTtcblxuXG5cdHJldHVybiBNUDQuYm94KE1QNC50eXBlcy50cmFmLCB0ZmhkLCB0ZmR0LCB0cnVuLCBzZHRwKTtcblxufVxuXG4vLyBUcmFja1J1bkJveFxuTVA0LnRydW4gPSBmdW5jdGlvbiAodHJhY2ssIG9mZnNldCkge1xuXHRsZXQgc2FtcGxlcyA9IHRyYWNrLnNhbXBsZXMgfHwgW10sXG5cdFx0c2FtcGxlQ291bnQgPSBzYW1wbGVzLmxlbmd0aCxcblx0XHRidWZmZXJMZW5ndGggPSAxMiArIDE2ICogc2FtcGxlQ291bnQsIC8vIDEyOiAzICogMzJiaXQuIDE2OiA0ICogMzJiaXRcblx0XHRidWZmZXIgPSBuZXcgVWludDhBcnJheShidWZmZXJMZW5ndGgpO1xuXG5cdG9mZnNldCArPSA4ICsgYnVmZmVyTGVuZ3RoOyAvLyA4OiB0eXBlICsgc2l6ZVxuXG5cdC8vIG5vdCBpbmNsdWRlIGZpcnN0X3NhbXBsZV9mbGFnc1xuXHRidWZmZXIuc2V0KFtcblx0XHQweDAwLCAvLyB2ZXJzaW9uXG5cdFx0MHgwMCxcblx0XHQweDBGLFxuXHRcdDB4MDEsIC8vIGZsYWdzOnRoZSB0b3RhbCBzdW0gb2YgbGlzdGVkIGZsYWdzIGluIG1wNFxuXHRcdChzYW1wbGVDb3VudCA+Pj4gMjQpICYgMHhGRiwgLy8gc2FtcGxlX2NvdW50XG5cdFx0KHNhbXBsZUNvdW50ID4+PiAxNikgJiAweEZGLFxuXHRcdChzYW1wbGVDb3VudCA+Pj4gOCkgJiAweEZGLFxuXHRcdChzYW1wbGVDb3VudCkgJiAweEZGLFxuXHRcdChvZmZzZXQgPj4+IDI0KSAmIDB4RkYsIC8vIGRhdGFfb2Zmc2V0XG5cdFx0KG9mZnNldCA+Pj4gMTYpICYgMHhGRixcblx0XHQob2Zmc2V0ID4+PiA4KSAmIDB4RkYsXG5cdFx0KG9mZnNldCkgJiAweEZGXG5cdF0sIDApO1xuXG5cdHNhbXBsZXMuZm9yRWFjaCgoc2FtcGxlLCBpbmRleCkgPT4ge1xuXHRcdGxldCB7XG5cdFx0XHRkdXJhdGlvbixcblx0XHRcdHNhbXBsZVNpemUsXG5cdFx0XHRmbGFncyxcblx0XHRcdGN0c1xuXHRcdH0gPSBzYW1wbGU7XG5cblx0XHRidWZmZXIuc2V0KFtcblx0XHRcdChkdXJhdGlvbiA+Pj4gMjQpICYgMHhGRiwgLy8gc2FtcGxlX2R1cmF0aW9uXG5cdFx0XHQoZHVyYXRpb24gPj4+IDE2KSAmIDB4RkYsXG5cdFx0XHQoZHVyYXRpb24gPj4+IDgpICYgMHhGRixcblx0XHRcdChkdXJhdGlvbikgJiAweEZGLFxuXHRcdFx0KHNhbXBsZVNpemUgPj4+IDI0KSAmIDB4RkYsIC8vIHNhbXBsZV9zaXplXG5cdFx0XHQoc2FtcGxlU2l6ZSA+Pj4gMTYpICYgMHhGRixcblx0XHRcdChzYW1wbGVTaXplID4+PiA4KSAmIDB4RkYsXG5cdFx0XHQoc2FtcGxlU2l6ZSkgJiAweEZGLFxuXHRcdFx0KGZsYWdzLmlzTGVhZGluZyA8PCAyKSB8IGZsYWdzLmRlcGVuZHNPbiwgLy8gc2FtcGxlX2ZsYWdzXG5cdFx0XHQoZmxhZ3MuaXNEZXBlbmRlZCA8PCA2KSB8IChmbGFncy5oYXNSZWR1bmRhbmN5IDw8IDQpIHwgZmxhZ3MuaXNOb25TeW5jLFxuXHRcdFx0MHgwMCxcblx0XHRcdDB4MDAsIC8vIHNhbXBsZV9kZWdyYWRhdGlvbl9wcmlvcml0eVxuXHRcdFx0KGN0cyA+Pj4gMjQpICYgMHhGRiwgLy8gc2FtcGxlX2NvbXBvc2l0aW9uX3RpbWVfb2Zmc2V0XG5cdFx0XHQoY3RzID4+PiAxNikgJiAweEZGLFxuXHRcdFx0KGN0cyA+Pj4gOCkgJiAweEZGLFxuXHRcdFx0KGN0cykgJiAweEZGXG5cdFx0XSwgMTIgKyAxNiAqIGluZGV4KTtcblx0fSk7XG5cdHJldHVybiBNUDQuYm94KE1QNC50eXBlcy50cnVuLCBidWZmZXIpO1xufVxuXG4vKipcbiAqIEBuYW1lIFNhbXBsZURlcGVuZGVuY3lUeXBlQm94XG4gKiBAZGVzYyBleHRlbmRzIGZ1bGxib3ggYW5kIHNhdmUgc29tZSB2YWx1ZXMgYWJvdXQgZGVwZW5kZW5jeSBmbGFnc1xuICogICAgICBsaWtlIHJlc2VydmVke2Fsd2F5cyAwfSBzYW1wbGVfZGVwZW5kc19vbiBzYW1wbGVfaXNfZGVwZW5kZWRfb25cbiAqIEByZXR1cm4gZnVsbGJveCArIDggKiBzYW1wbGVfY291bnRcbiAqL1xuTVA0LnNkdHAgPSBmdW5jdGlvbiAodHJhY2spIHtcblx0bGV0IHNhbXBsZXMgPSB0cmFjay5zYW1wbGVzIHx8IFtdLFxuXHRcdGxlbmd0aCA9IHNhbXBsZXMubGVuZ3RoLFxuXHRcdGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCArIDQpO1xuXG5cdGZvciAobGV0IGkgPSAwLCBmbGFnczsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0ZmxhZ3MgPSBzYW1wbGVzW2ldLmZsYWdzO1xuXHRcdC8vIHNraXAgNEIgdmVyc2lvbiAmJiB0eXBlIHdoaWNoIGFyZSBhbHdheXMgMHgwMFxuXHRcdGJ1ZmZlcltpICsgNF0gPSAoZmxhZ3MuZGVwZW5kc09uIDw8IDQpIHwgKGZsYWdzLmlzRGVwZW5kZWQgPDwgMikgfCAoZmxhZ3MuaGFzUmVkdW5kYW5jeSlcblx0XHQvLyBza2lwIDJiaXQgcmVzZXJ2ZWQgZmxhZyB3aGljaCBkZWZhdWx0IHZhbHVlIGlzIDBiMDA7XG5cdH1cblx0cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLnNkdHAsIGJ1ZmZlcik7XG5cbn1cblxuTVA0LnRmaGQgPSBmdW5jdGlvbiAodHJhY2tJZCkge1xuXHRyZXR1cm4gTVA0LmZyYWdtZW50Qm94KE1QNC50eXBlcy50ZmhkLCB0cmFja0lkKTtcbn1cblxuTVA0LnRmZHQgPSBmdW5jdGlvbiAoYmFzZURUUykge1xuXHRyZXR1cm4gTVA0LmZyYWdtZW50Qm94KE1QNC50eXBlcy50ZmR0LCBiYXNlRFRTKTtcbn1cblxuTVA0LmZyYWdtZW50Qm94ID0gZnVuY3Rpb24gKHR5cGUsIHBhcmFtKSB7XG5cdGxldCBidWZmZXIgPSBuZXcgVWludDhBcnJheShbXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgLy8gZmxnc1xuXHRcdDB4MDAsIC8vIHZlcnNpb25cblx0XHQocGFyYW0gPj4+IDI0KSAmIDB4RkYsIC8vIHRyYWNrX0lEXG5cdFx0KHBhcmFtID4+PiAxNikgJiAweEZGLFxuXHRcdChwYXJhbSA+Pj4gOCkgJiAweEZGLFxuXHRcdChwYXJhbSkgJiAweEZGXG5cdF0pO1xuXHRyZXR1cm4gTVA0LmJveCh0eXBlLCBidWZmZXIpO1xufVxuXG5NUDQuZnR5cCA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLmZ0eXAsIE1QNC5zeW1ib2xWYWx1ZS5GVFlQKTtcbn1cblxuTVA0LmluaXRCb3ggPSBmdW5jdGlvbiAobWV0YTEsbWV0YTIpIHtcblx0bGV0IGZ0eXAgPSBNUDQuYm94KE1QNC50eXBlcy5mdHlwLCBNUDQuc3ltYm9sVmFsdWUuRlRZUCksXG5cdFx0bW9vdiA9IE1QNC5mbW9vdihtZXRhMSxtZXRhMik7XG5cblx0bGV0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGZ0eXAuYnl0ZUxlbmd0aCArIG1vb3YuYnl0ZUxlbmd0aCk7XG5cblx0YnVmZmVyLnNldChmdHlwLCAwKTtcblx0YnVmZmVyLnNldChtb292LCBmdHlwLmJ5dGVMZW5ndGgpO1xuXHRyZXR1cm4gYnVmZmVyO1xufVxuXG5NUDQuZm1vb3YgPSBmdW5jdGlvbiAobWV0YTEsbWV0YTIpIHtcblx0bGV0IG12aGQgPSBNUDQubXZoZChtZXRhMS50aW1lc2NhbGUsIG1ldGExLmR1cmF0aW9uKTtcblx0aWYobWV0YTIpe1xuXHRcdHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5tb292LG12aGQsTVA0LnRyYWsobWV0YTEpLE1QNC50cmFrKG1ldGEyKSwgTVA0Lm12ZXgoMSwyKSlcblx0fVxuXG5cdHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5tb292LG12aGQsTVA0LnRyYWsobWV0YTEpLCBNUDQubXZleCgxKSlcblxuXG5cdC8vIHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5tb292LCBtdmhkLCB0cmFrLCBtdmV4KTtcbn1cblxuXG4vLyBUT0RPXG5NUDQubW9vdiA9IGZ1bmN0aW9uIChtdmhkLCB0cmFrLCBtdmV4KSB7XG5cdHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5tb292LCBtdmhkLCB0cmFrKTtcblx0Ly8gcmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLm1vb3YsIG12aGQsIHZpZGVvVHJhaywgYXVkaW9UcmFrKTtcbn1cblxuTVA0Lm12ZXggPSBmdW5jdGlvbiAoaWQxLGlkMikge1xuXHRpZihpZDIpe1xuXHRcdHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5tdmV4LCBNUDQudHJleChpZDEpLE1QNC50cmV4KGlkMikpO1x0XG5cdH1cblx0cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLm12ZXgsIE1QNC50cmV4KGlkMSkpO1xufVxuXG5NUDQudHJleCA9IGZ1bmN0aW9uICh0cmFja0lkKSB7XG5cdGxldCBidWZmZXIgPSBuZXcgVWludDhBcnJheShbXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gdmVyc2lvbigwKSArIGZsYWdzXG5cdFx0KHRyYWNrSWQgPj4+IDI0KSAmIDB4RkYsIC8vIHRyYWNrX0lEXG5cdFx0KHRyYWNrSWQgPj4+IDE2KSAmIDB4RkYsXG5cdFx0KHRyYWNrSWQgPj4+IDgpICYgMHhGRixcblx0XHQodHJhY2tJZCkgJiAweEZGLFxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDEsIC8vIGRlZmF1bHRfc2FtcGxlX2Rlc2NyaXB0aW9uX2luZGV4XG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gZGVmYXVsdF9zYW1wbGVfZHVyYXRpb25cblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBkZWZhdWx0X3NhbXBsZV9zaXplXG5cdFx0MHgwMCwgMHgwMSwgMHgwMCwgMHgwMSAvLyBkZWZhdWx0X3NhbXBsZV9mbGFnc1xuXHRdKTtcblx0cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLnRyZXgsIGJ1ZmZlcik7XG59XG5cblxuXG5NUDQudHJhayA9IGZ1bmN0aW9uIChtZXRhKSB7XG5cdHJldHVybiBNUDQuYm94KE1QNC50eXBlcy50cmFrLCBNUDQudGtoZChtZXRhKSwgTVA0Lm1kaWEobWV0YSkpO1xufVxuXG5NUDQubWRpYSA9IGZ1bmN0aW9uIChtZXRhKSB7XG5cdHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5tZGlhLCBNUDQubWRoZChtZXRhKSwgTVA0LmhkbHIobWV0YSksIE1QNC5taW5mKG1ldGEpKTtcbn1cblxuLy8gZGVjbGFyZXMgbWVkaWEgdHlwZVxuTVA0LmhkbHIgPSBmdW5jdGlvbiAobWV0YSkge1xuXHRyZXR1cm4gbWV0YS50eXBlID09PSAndmlkZW8nID9cblx0XHRNUDQuYm94KE1QNC50eXBlcy5oZGxyLCBNUDQuc3ltYm9sVmFsdWUuSERMUl9WSURFTykgOlxuXHRcdE1QNC5ib3goTVA0LnR5cGVzLmhkbHIsIE1QNC5zeW1ib2xWYWx1ZS5IRExSX0FVRElPKTtcbn1cblxuTVA0Lm1pbmYgPSBmdW5jdGlvbiAobWV0YSkge1xuXHRsZXQgdHlwZV9tZGggPSBtZXRhLnR5cGUgPT09ICd2aWRlbycgP1xuXHRcdE1QNC5ib3goTVA0LnR5cGVzLnZtaGQsIE1QNC5zeW1ib2xWYWx1ZS5WTUhEKSA6XG5cdFx0TVA0LmJveChNUDQudHlwZXMuc21oZCwgTVA0LnN5bWJvbFZhbHVlLlNNSEQpO1xuXG5cdC8vIFRPRE8geW91IGNhbiByZXBsYWNlIGZzdGJsIGFzIHN0Ymwgd2hlbiB5b3Ugd2FudCB0byBwcm9kdWNlIHN0YW5kYXJkIG1wNCBub3QgZnJhZ21lbnRlZCBtcDRcblx0cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLm1pbmYsIHR5cGVfbWRoLCBNUDQuZGluZigpLCBNUDQuZnN0YmwobWV0YSkpO1xuXG59XG5cbk1QNC5kaW5mID0gZnVuY3Rpb24gKCkge1xuXHRsZXQgZHJlZiA9IE1QNC5ib3goTVA0LnR5cGVzLmRyZWYsIE1QNC5zeW1ib2xWYWx1ZS5EUkVGKTtcblxuXHRyZXR1cm4gTVA0LmJveChNUDQudHlwZXMuZGluZiwgZHJlZik7XG59XG5cbk1QNC5zdHNzID0gZnVuY3Rpb24gKG1ldGEpIHtcblx0bGV0IHtcblx0XHR0cmFja1xuXHR9ID0gbWV0YTtcblxuXHRsZXQgc2FtcGxlcyA9IHRyYWNrLnNhbXBsZXM7XG5cblx0bGV0IGtleWZyYW1lcyA9IFtdO1xuXG5cblx0c2FtcGxlcy5mb3JFYWNoKCh7XG5cdFx0a2V5ZnJhbWVcblx0fSwgaW5kZXgpID0+IHtcblx0XHRpZiAoa2V5ZnJhbWUpIGtleWZyYW1lcy5wdXNoKGluZGV4KTtcblx0fSlcblxuXHRsZXQgc3Rzc0J1ZmZlciA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoNCArIGtleWZyYW1lcy5sZW5ndGggKiA0KSk7XG5cblx0c3Rzc0J1ZmZlci5zZXRVaW50MzIoMCwga2V5ZnJhbWVzLmxlbmd0aCk7XG5cblx0bGV0IG9mZnNldCA9IDQ7XG5cdGtleWZyYW1lcy5mb3JFYWNoKHZhbCA9PiB7XG5cdFx0c3Rzc0J1ZmZlci5zZXRVaW50MzIob2Zmc2V0LCB2YWwgKyAxKTtcblx0XHRvZmZzZXQgKz0gNDtcblx0fSlcblxuXHRyZXR1cm4gTVA0LmJveChNUDQudHlwZXMuc3RzcywgTVA0LnN5bWJvbFZhbHVlLlNUU1MsIG5ldyBVaW50OEFycmF5KHN0c3NCdWZmZXIuYnVmZmVyKSk7XG59XG5cbi8vIHNvIGltcG9ydGFudFxuLy8gc2FtcGxlIHRhYmxlIGJveFxuLy8gVE9ETzogc2VwYXJhdGUgdGhlIGF1ZGlvIHRyYWsgYW5kIHRoZSB2aWRlbyB0cmFrXG5NUDQuc3RibCA9IGZ1bmN0aW9uIChtZXRhKSB7XG5cdGlmIChtZXRhLnR5cGUgPT09ICdhdWRpbycpIHtcblx0XHRyZXR1cm4gTVA0LmJveChNUDQudHlwZXMuc3RibCwgTVA0LnN0c2QobWV0YSksIE1QNC5zdHRzKG1ldGEpLCBNUDQuc3RzYyhtZXRhKSwgTVA0LnN0c3oobWV0YSksIE1QNC5zdGNvKG1ldGEpKTtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gTVA0LmJveChNUDQudHlwZXMuc3RibCwgTVA0LnN0c2QobWV0YSksIE1QNC5zdHRzKG1ldGEpLCBNUDQuY3R0cyhtZXRhKSwgTVA0LnN0c2MobWV0YSksIE1QNC5zdHNzKG1ldGEpLCBNUDQuc3RzeihtZXRhKSwgTVA0LnN0Y28obWV0YSkpO1xuXHR9XG59XG5cbi8qKlxuICogdXNlZCBmb3IgZm1wNCBzdGJsIGJveFxuICovXG5NUDQuZnN0YmwgPSBmdW5jdGlvbiAobWV0YSkge1xuXHRyZXR1cm4gTVA0LmJveChNUDQudHlwZXMuc3RibCwgLy8gdHlwZTogc3RibFxuXHRcdE1QNC5zdHNkKG1ldGEpLCAvLyBTYW1wbGUgRGVzY3JpcHRpb24gVGFibGVcblx0XHRNUDQuYm94KE1QNC50eXBlcy5zdHRzLCBNUDQuc3ltYm9sVmFsdWUuRlNUVFMpLCAvLyBUaW1lLVRvLVNhbXBsZVxuXHRcdE1QNC5ib3goTVA0LnR5cGVzLnN0c2MsIE1QNC5zeW1ib2xWYWx1ZS5GU1RTQyksIC8vIFNhbXBsZS1Uby1DaHVua1xuXHRcdE1QNC5ib3goTVA0LnR5cGVzLnN0c3osIE1QNC5zeW1ib2xWYWx1ZS5GU1RTWiksIC8vIFNhbXBsZSBzaXplXG5cdFx0TVA0LmJveChNUDQudHlwZXMuc3RjbywgTVA0LnN5bWJvbFZhbHVlLkZTVENPKSAvLyBDaHVuayBvZmZzZXRcblx0KTtcbn1cblxuTVA0LnN0dHMgPSBmdW5jdGlvbiAobWV0YSkge1xuXHRsZXQge1xuXHRcdHRyYWNrXG5cdH0gPSBtZXRhLFxuXHRjb250ZW50RGF0YSA9IFtdLFxuXHRcdHNhbXBsZURlbHRhcyA9IFtdO1xuXG5cdGxldCB7XG5cdFx0c2FtcGxlc1xuXHR9ID0gdHJhY2ssIGRlbHRhID0gc2FtcGxlc1swXS5kdXJhdGlvbixcblx0XHRjb3VudCA9IDAsXG5cdFx0c2FtcGxlc0xlbmd0aCA9IHNhbXBsZXMubGVuZ3RoO1xuXG5cdHNhbXBsZXMuZm9yRWFjaCgoe1xuXHRcdGR1cmF0aW9uXG5cdH0sIGluZGV4KSA9PiB7XG5cdFx0aWYgKGR1cmF0aW9uID09PSBkZWx0YSkge1xuXHRcdFx0Y291bnQrKztcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGVudERhdGEucHVzaChbY291bnQsIGRlbHRhXSk7XG5cdFx0XHRkZWx0YSA9IGR1cmF0aW9uO1xuXHRcdFx0Y291bnQgPSAxO1xuXHRcdH1cblx0XHQvLyB3aGVuIG1lZXQgdGhlIGxhc3Qgc2FtcGxlLFxuXHRcdC8vIHNhdmUgaXRzIGRlbHRhIGFuZCBjb3VudFxuXHRcdGlmIChpbmRleCA9PT0gc2FtcGxlc0xlbmd0aCAtIDEpIHtcblx0XHRcdGNvbnRlbnREYXRhLnB1c2goW2NvdW50LCBkZWx0YV0pO1xuXHRcdH1cblx0fSlcblxuXHQvLyBpbml0aWFsIGNvdW50QnVmZmVyXG5cdGxldCBzYW1wbGVCdWZmZXIgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDggKiBjb250ZW50RGF0YS5sZW5ndGggKyA0KSk7XG5cblx0Ly8gc2V0IHRoZSBlbnRyeV9jb3VudFxuXHRzYW1wbGVCdWZmZXIuc2V0VWludDMyKDAsIGNvbnRlbnREYXRhLmxlbmd0aCk7XG5cblx0bGV0IG9mZnNldCA9IDQ7XG5cdGNvbnRlbnREYXRhLmZvckVhY2goZGF0YSA9PiB7XG5cdFx0c2FtcGxlQnVmZmVyLnNldFVpbnQzMihvZmZzZXQsIGRhdGFbMF0pO1xuXHRcdHNhbXBsZUJ1ZmZlci5zZXRVaW50MzIob2Zmc2V0ICsgNCwgZGF0YVsxXSk7XG5cdFx0b2Zmc2V0ICs9IDg7XG5cdH0pO1xuXG5cdC8vIHZlcnNpb24gKyBmbGFnICsgc2FtcGxlX2NvdW50cyArIHNhbXBsZV9kZWx0YXNcblx0Ly8gVE9ETzogc2V0IHRoZSBlbnRyeV9jb3VudFxuXHRyZXR1cm4gTVA0LmJveChNUDQudHlwZXMuc3R0cywgTVA0LnN5bWJvbFZhbHVlLlNUVFMsIG5ldyBVaW50OEFycmF5KHNhbXBsZUJ1ZmZlci5idWZmZXIpKTtcblxufVxuXG5NUDQuY3R0cyA9IGZ1bmN0aW9uIChtZXRhKSB7XG5cdGxldCB7XG5cdFx0dHJhY2tcblx0fSA9IG1ldGEsXG5cdGNvbnRlbnREYXRhID0gW10sXG5cdFx0c2FtcGxlRGVsdGFzID0gW107XG5cblx0bGV0IHtcblx0XHRzYW1wbGVzXG5cdH0gPSB0cmFjaywgZGVsdGEgPSBzYW1wbGVzWzBdLmN0cyxcblx0XHRjb3VudCA9IDAsXG5cdFx0c2FtcGxlc0xlbmd0aCA9IHNhbXBsZXMubGVuZ3RoO1xuXG5cdHNhbXBsZXMuZm9yRWFjaCgoe1xuXHRcdGN0c1xuXHR9LCBpbmRleCkgPT4ge1xuXHRcdGlmIChjdHMgPT09IGRlbHRhKSB7XG5cdFx0XHRjb3VudCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZW50RGF0YS5wdXNoKFtjb3VudCwgZGVsdGFdKTtcblx0XHRcdGRlbHRhID0gY3RzO1xuXHRcdFx0Y291bnQgPSAxO1xuXHRcdH1cblx0XHQvLyB3aGVuIG1lZXQgdGhlIGxhc3Qgc2FtcGxlLFxuXHRcdC8vIHNhdmUgaXRzIGRlbHRhIGFuZCBjb3VudFxuXHRcdGlmIChpbmRleCA9PT0gc2FtcGxlc0xlbmd0aCAtIDEpIHtcblx0XHRcdGNvbnRlbnREYXRhLnB1c2goW2NvdW50LCBkZWx0YV0pO1xuXHRcdH1cblx0fSlcblxuXHQvLyBpbml0aWFsIGNvdW50QnVmZmVyXG5cdGxldCBzYW1wbGVCdWZmZXIgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDggKiBjb250ZW50RGF0YS5sZW5ndGggKyA0KSk7XG5cblx0Ly8gc2V0IHRoZSBlbnRyeV9jb3VudFxuXHRzYW1wbGVCdWZmZXIuc2V0VWludDMyKDAsIGNvbnRlbnREYXRhLmxlbmd0aCk7XG5cblx0bGV0IG9mZnNldCA9IDQ7XG5cdGNvbnRlbnREYXRhLmZvckVhY2goZGF0YSA9PiB7XG5cdFx0c2FtcGxlQnVmZmVyLnNldFVpbnQzMihvZmZzZXQsIGRhdGFbMF0pO1xuXHRcdHNhbXBsZUJ1ZmZlci5zZXRVaW50MzIob2Zmc2V0ICsgNCwgZGF0YVsxXSk7XG5cdFx0b2Zmc2V0ICs9IDg7XG5cdH0pO1xuXG5cdC8vIHZlcnNpb24gKyBmbGFnICsgc2FtcGxlX2NvdW50cyArIHNhbXBsZV9kZWx0YXNcblx0Ly8gVE9ETzogc2V0IHRoZSBlbnRyeV9jb3VudFxuXHRyZXR1cm4gTVA0LmJveChNUDQudHlwZXMuY3R0cywgTVA0LnN5bWJvbFZhbHVlLkNUVFMsIG5ldyBVaW50OEFycmF5KHNhbXBsZUJ1ZmZlci5idWZmZXIpKTtcblxufVxuXG5NUDQuc3RjbyA9IGZ1bmN0aW9uIChtZXRhKSB7XG5cdGxldCB7XG5cdFx0c2FtcGxlc1xuXHR9ID0gbWV0YS50cmFjaztcblxuXHRsZXQgc3Rjb0J1ZmZlciA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoNCAqIHNhbXBsZXMubGVuZ3RoICsgNCkpO1xuXG5cdHN0Y29CdWZmZXIuc2V0VWludDMyKDAsIHNhbXBsZXMubGVuZ3RoKTtcblxuXHRsZXQgb2Zmc2V0ID0gNDsgLy8gc2tpcCB0aGUgZW50cnlfY291bnRcblxuXHRzYW1wbGVzLmZvckVhY2goc2FtcGxlID0+IHtcblx0XHRzdGNvQnVmZmVyLnNldFVpbnQzMihvZmZzZXQsIHNhbXBsZS5jaHVua09mZnNldCk7XG5cdFx0b2Zmc2V0ICs9IDQ7XG5cdH0pXG5cblxuXHRyZXR1cm4gTVA0LmJveChNUDQudHlwZXMuc3RjbywgTVA0LnN5bWJvbFZhbHVlLlNUQ08sIG5ldyBVaW50OEFycmF5KHN0Y29CdWZmZXIuYnVmZmVyKSlcblxufVxuXG5NUDQuc3RzYyA9IGZ1bmN0aW9uIChtZXRhKSB7XG5cdC8vIG9ubHkgc2V0IDEsMSwxIHRvIGtlZXAgZXZlcnkgc2FtcGxlIGludG8gb25lIGNodW5rXG5cdHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5zdHNjLCBNUDQuc3ltYm9sVmFsdWUuU1RTQylcbn1cblxuTVA0LnN0c3ogPSBmdW5jdGlvbiAobWV0YSkge1xuXHRsZXQge1xuXHRcdHNhbXBsZXNcblx0fSA9IG1ldGEudHJhY2s7XG5cblx0bGV0IHN0c3pCdWZmZXIgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDQgKiBzYW1wbGVzLmxlbmd0aCArIDgpKTtcblxuXHRzdHN6QnVmZmVyLnNldFVpbnQzMigwLCAwKTsgLy8gc2V0IHRoZSBzYW1wbGVfc2l6ZSB0byB6ZXJvXG5cblx0c3RzekJ1ZmZlci5zZXRVaW50MzIoNCwgc2FtcGxlcy5sZW5ndGgpOyAvLyBzZXQgdGhlIHNhbXBsZV9jb3VudHNcblxuXHRsZXQgb2Zmc2V0ID0gODtcblx0c2FtcGxlcy5mb3JFYWNoKCh7XG5cdFx0c2FtcGxlU2l6ZVxuXHR9KSA9PiB7XG5cdFx0c3RzekJ1ZmZlci5zZXRVaW50MzIob2Zmc2V0LCBzYW1wbGVTaXplKTtcblx0XHRvZmZzZXQgKz0gNDtcblx0fSk7XG5cblx0cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLnN0c3osIE1QNC5zeW1ib2xWYWx1ZS5TVFNaLCBuZXcgVWludDhBcnJheShzdHN6QnVmZmVyLmJ1ZmZlcikpO1xufVxuXG5NUDQuc3RzZCA9IGZ1bmN0aW9uIChtZXRhKSB7XG5cblx0cmV0dXJuIG1ldGEudHlwZSA9PT0gJ3ZpZGVvJyA/XG5cdFx0TVA0LmJveChNUDQudHlwZXMuc3RzZCwgTVA0LnN5bWJvbFZhbHVlLlNUU0QsIE1QNC5hdmMxKG1ldGEpKSAvLyBmb3IgQXVkaW9TYW1wbGVFbnRyeVxuXHRcdDpcblx0XHQobWV0YS5jb2RlYyA9PT0gJ21wMycgPyAvLyBhdWRpb1xuXHRcdFx0TVA0LmJveChNUDQudHlwZXMuc3RzZCwgTVA0LnN5bWJvbFZhbHVlLlNUU0QsIE1QNC5tcDMobWV0YSkpIC8vIGZvciBtcDMgZm9ybWF0XG5cdFx0XHQ6XG5cdFx0XHRNUDQuYm94KE1QNC50eXBlcy5zdHNkLCBNUDQuc3ltYm9sVmFsdWUuU1RTRCwgTVA0Lm1wNGEobWV0YSkpKTsgLy8gZm9yIEFDQyAsIGxpa2UgbXA0YVxuXG5cbn1cblxuTVA0Lm1wMyA9IGZ1bmN0aW9uIChtZXRhKSB7XG5cdGxldCB7XG5cdFx0Y2hhbm5lbENvdW50LFxuXHRcdGF1ZGlvU2FtcGxlUmF0ZVxuXHR9ID0gbWV0YTtcblxuXHRsZXQgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoW1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkKDQpXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gcmVzZXJ2ZWQoMikgKyBkYXRhX3JlZmVyZW5jZV9pbmRleCgyKVxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkOiAyICogNCBieXRlc1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG5cdFx0MHgwMCwgY2hhbm5lbENvdW50LCAvLyBjaGFubmVsQ291bnQoMilcblx0XHQweDAwLCAweDEwLCAvLyBzYW1wbGVTaXplKDIpXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWQoNClcblx0XHQoc2FtcGxlUmF0ZSA+Pj4gOCkgJiAweEZGLCAvLyBBdWRpbyBzYW1wbGUgcmF0ZVxuXHRcdChzYW1wbGVSYXRlKSAmIDB4RkYsXG5cdFx0MHgwMCwgMHgwMFxuXHRdKTtcblxuXHRyZXR1cm4gTVA0LmJveChNUDQudHlwZXNbJy5tcDMnXSwgYnVmZmVyKTtcbn1cblxuTVA0Lm1wNGEgPSBmdW5jdGlvbiAobWV0YSkge1xuXHRsZXQge1xuXHRcdGNoYW5uZWxDb3VudCxcblx0XHRhdWRpb1NhbXBsZVJhdGVcblx0fSA9IG1ldGE7XG5cblxuXHRsZXQgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoW1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkKDQpXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gcmVzZXJ2ZWQoMikgKyBkYXRhX3JlZmVyZW5jZV9pbmRleCgyKVxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkOiAyICogNCBieXRlc1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG5cdFx0MHgwMCwgY2hhbm5lbENvdW50LCAvLyBjaGFubmVsQ291bnQoMilcblx0XHQweDAwLCAweDEwLCAvLyBzYW1wbGVTaXplKDIpXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWQoNClcblx0XHQoYXVkaW9TYW1wbGVSYXRlID4+PiA4KSAmIDB4RkYsIC8vIEF1ZGlvIHNhbXBsZSByYXRlXG5cdFx0KGF1ZGlvU2FtcGxlUmF0ZSkgJiAweEZGLFxuXHRcdDB4MDAsIDB4MDBcblx0XSk7XG5cblx0cmV0dXJuIE1QNC5ib3goTVA0LnR5cGVzLm1wNGEsIGJ1ZmZlciwgTVA0LmVzZHMobWV0YSkpO1xufVxuXG4vLyByZWZlciB0byBtcDQtZ2VuZXJhdG9yLmpzIFxuTVA0LmVzZHMgPSBmdW5jdGlvbiAobWV0YSkge1xuXHRsZXQgY29uZmlnID0gbWV0YS5jb25maWcgfHwgW10sXG5cdFx0Y29uZmlnTGVuID0gY29uZmlnLmxlbmd0aDtcblxuXHRsZXQgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoW1xuXHRcdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gdmVyc2lvbiAwICsgZmxhZ3NcblxuXHRcdFx0MHgwMywgLy8gZGVzY3JpcHRvcl90eXBlXG5cdFx0XHQweDE3ICsgY29uZmlnTGVuLCAvLyBsZW5ndGgzXG5cdFx0XHQweDAwLCAweDAxLCAvLyBlc19pZFxuXHRcdFx0MHgwMCwgLy8gc3RyZWFtX3ByaW9yaXR5XG5cblx0XHRcdDB4MDQsIC8vIGRlc2NyaXB0b3JfdHlwZVxuXHRcdFx0MHgwRiArIGNvbmZpZ0xlbiwgLy8gbGVuZ3RoXG5cdFx0XHQweDQwLCAvLyBjb2RlYzogbXBlZzRfYXVkaW9cblx0XHRcdDB4MTUsIC8vIHN0cmVhbV90eXBlOiBBdWRpb1xuXHRcdFx0MHgwMCwgMHgwMCwgMHgwMCwgLy8gYnVmZmVyX3NpemVcblx0XHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1heEJpdHJhdGVcblx0XHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGF2Z0JpdHJhdGVcblxuXHRcdFx0MHgwNSAvLyBkZXNjcmlwdG9yX3R5cGVcblx0XHRdLmNvbmNhdChbIC8vIGxlbmd0aCBBdWRpb1NwZWNpZmljQ29uZmlnXG5cdFx0XHRjb25maWdMZW5cblx0XHRdKVxuXHRcdC5jb25jYXQoY29uZmlnKSAvLyBhdWRpbyBcblx0XHQuY29uY2F0KFsweDA2LCAweDAxLCAweDAyXSkgLy8gR0FTcGVjaWZpY0NvbmZpZ1xuXHQpO1xuXG5cdHJldHVybiBNUDQuYm94KE1QNC50eXBlcy5lc2RzLCBidWZmZXIpO1xuXG59XG5cblxuXG5NUDQuYXZjMSA9IGZ1bmN0aW9uIChtZXRhKSB7XG5cdGxldCBhdmNjID0gbWV0YS5hdmNjLFxuXHRcdHdpZHRoID0gbWV0YS5jb2RlY1dpZHRoLFxuXHRcdGhlaWdodCA9IG1ldGEuY29kZWNIZWlnaHQ7XG5cblxuXHRsZXQgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoW1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkKDQpXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMSwgLy8gcmVzZXJ2ZWQoMikgKyBkYXRhX3JlZmVyZW5jZV9pbmRleCgyKVxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHByZV9kZWZpbmVkKDIpICsgcmVzZXJ2ZWQoMilcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBwcmVfZGVmaW5lZDogMyAqIDQgYnl0ZXNcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLFxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG5cdFx0KHdpZHRoID4+PiA4KSAmIDB4RkYsIC8vIHdpZHRoOiAyIGJ5dGVzXG5cdFx0KHdpZHRoKSAmIDB4RkYsXG5cdFx0KGhlaWdodCA+Pj4gOCkgJiAweEZGLCAvLyBoZWlnaHQ6IDIgYnl0ZXNcblx0XHQoaGVpZ2h0KSAmIDB4RkYsXG5cdFx0MHgwMCwgMHg0OCwgMHgwMCwgMHgwMCwgLy8gaG9yaXpyZXNvbHV0aW9uOiA0IGJ5dGVzXG5cdFx0MHgwMCwgMHg0OCwgMHgwMCwgMHgwMCwgLy8gdmVydHJlc29sdXRpb246IDQgYnl0ZXNcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZDogNCBieXRlc1xuXHRcdDB4MDAsIDB4MDEsIC8vIGZyYW1lX2NvdW50XG5cdFx0MHgwRiwgLy8gY29tcHJlc3Nvcm5hbWUgbGVuZ3RoXG5cdFx0MHg3NiwgMHg2OSwgMHg2YywgMHg2YywgLy8gdmlsbGFpbmhyL2F2LmpzXG5cdFx0MHg2MSwgMHg2OSwgMHg2ZSwgMHg2OCxcblx0XHQweDcyLCAweDJmLCAweDYxLCAweDc2LFxuXHRcdDB4MmUsIDB4NmEsIDB4NzMsIDB4MDAsXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLFxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCxcblx0XHQweDAwLCAweDE4LCAvLyBkZXB0aFxuXHRcdDB4RkYsIDB4RkYgLy8gcHJlX2RlZmluZWQgPSAtMVxuXHRdKTtcblxuXHRyZXR1cm4gTVA0LmJveChNUDQudHlwZXMuYXZjMSwgYnVmZmVyLFxuXHRcdE1QNC5ib3goTVA0LnR5cGVzLmF2Y0MsIGF2Y2MpIC8vIGdldCBBVkMgRGVjb2RlciBDb25maWd1cmF0aW9uXG5cdCk7XG59XG5cbk1QNC5tZGhkID0gZnVuY3Rpb24gKG1ldGEpIHtcblx0bGV0IHtcblx0XHR0aW1lc2NhbGUsXG5cdFx0ZHVyYXRpb25cblx0fSA9IG1ldGE7XG5cblxuXHRyZXR1cm4gTVA0LmJveChNUDQudHlwZXMubWRoZCwgbmV3IFVpbnQ4QXJyYXkoW1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGNyZWF0aW9uX3RpbWVcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBtb2RpZmljYXRpb25fdGltZVxuXHRcdCh0aW1lc2NhbGUgPj4+IDI0KSAmIDB4RkYsIC8vIHRpbWVzY2FsZTogNCBieXRlc1xuXHRcdCh0aW1lc2NhbGUgPj4+IDE2KSAmIDB4RkYsXG5cdFx0KHRpbWVzY2FsZSA+Pj4gOCkgJiAweEZGLFxuXHRcdCh0aW1lc2NhbGUpICYgMHhGRixcblx0XHQoZHVyYXRpb24gPj4+IDI0KSAmIDB4RkYsIC8vIGR1cmF0aW9uOiA0IGJ5dGVzXG5cdFx0KGR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuXHRcdChkdXJhdGlvbiA+Pj4gOCkgJiAweEZGLFxuXHRcdChkdXJhdGlvbikgJiAweEZGLFxuXHRcdDB4NTUsIDB4QzQsIC8vIGxhbmd1YWdlOiB1bmQgKHVuZGV0ZXJtaW5lZClcblx0XHQweDAwLCAweDAwIC8vIHByZV9kZWZpbmVkID0gMFxuXHRdKSk7XG59XG5cbk1QNC50a2hkID0gZnVuY3Rpb24gKG1ldGEpIHtcblx0bGV0IHtcblx0XHRpZCxcblx0XHRwcmVzZW50V2lkdGgsXG5cdFx0dHJhY2ssXG5cdFx0ZHVyYXRpb24sXG5cdFx0cHJlc2VudEhlaWdodFxuXHR9ID0gbWV0YTtcblxuXG5cdGxldCBidWYgPSBuZXcgVWludDhBcnJheShbXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwNywgLy8gdmVyc2lvbigwKSArIGZsYWdzXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gY3JlYXRpb25fdGltZVxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIG1vZGlmaWNhdGlvbl90aW1lXG5cdFx0KGlkID4+PiAyNCkgJiAweEZGLCAvLyB0cmFja19JRDogNCBieXRlc1xuXHRcdChpZCA+Pj4gMTYpICYgMHhGRixcblx0XHQoaWQgPj4+IDgpICYgMHhGRixcblx0XHQoaWQpICYgMHhGRixcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyByZXNlcnZlZDogNCBieXRlc1xuXHRcdChkdXJhdGlvbiA+Pj4gMjQpICYgMHhGRiwgLy8gZHVyYXRpb246IDQgYnl0ZXNcblx0XHQoZHVyYXRpb24gPj4+IDE2KSAmIDB4RkYsXG5cdFx0KGR1cmF0aW9uID4+PiA4KSAmIDB4RkYsXG5cdFx0KGR1cmF0aW9uKSAmIDB4RkYsXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gcmVzZXJ2ZWQ6IDIgKiA0IGJ5dGVzXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAxLCAvLyBsYXllcigyYnl0ZXMpICsgYWx0ZXJuYXRlX2dyb3VwKDJieXRlcylcblx0XHQweDAxLCAweDAwLCAweDAwLCAweDAwLCAvLyB2b2x1bWUoMmJ5dGVzKSArIHJlc2VydmVkKDJieXRlcylcblx0XHQweDAwLCAweDAxLCAweDAwLCAweDAwLCAvLyAtLS0tYmVnaW4gY29tcG9zaXRpb24gbWF0cml4LS0tLVxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLFxuXHRcdDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLFxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG5cdFx0MHg0MCwgMHgwMCwgMHgwMCwgMHgwMCwgLy8gLS0tLWVuZCBjb21wb3NpdGlvbiBtYXRyaXgtLS0tXG5cdFx0KHByZXNlbnRXaWR0aCA+Pj4gOCkgJiAweEZGLCAvLyBwcmVzZW50V2lkdGggYW5kIHByZXNlbnRIZWlnaHRcblx0XHQocHJlc2VudFdpZHRoKSAmIDB4RkYsXG5cdFx0MHgwMCwgMHgwMCxcblx0XHQocHJlc2VudEhlaWdodCA+Pj4gOCkgJiAweEZGLFxuXHRcdChwcmVzZW50SGVpZ2h0KSAmIDB4RkYsXG5cdFx0MHgwMCwgMHgwMFxuXHRdKVxuXG5cdGxldCB2aWV3ID0gbmV3IERhdGFWaWV3KGJ1Zi5idWZmZXIpO1xuXG5cblx0aWYgKG1ldGEudHlwZSA9PT0gJ3ZpZGVvJykge1xuXHRcdHZpZXcuc2V0VWludDE2KDM0LCAwKTtcblx0XHR2aWV3LnNldFVpbnQxNigzNiwgMCk7XG5cdH1cblxuXHRyZXR1cm4gTVA0LmJveChNUDQudHlwZXMudGtoZCwgYnVmKTtcbn1cblxuLy8gTW92aWVIZWFkZXJCb3ggIGRlZmluZXMgb3ZlcmFsbCBpbmZvcm1hdGlvblxuTVA0Lm12aGQgPSBmdW5jdGlvbiAodGltZXNjYWxlLCBkdXJhdGlvbikge1xuXHRyZXR1cm4gTVA0LmJveChNUDQudHlwZXMubXZoZCwgbmV3IFVpbnQ4QXJyYXkoW1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHZlcnNpb24oMCkgKyBmbGFnc1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIGNyZWF0aW9uX3RpbWVcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLCAvLyBtb2RpZmljYXRpb25fdGltZVxuXHRcdCh0aW1lc2NhbGUgPj4+IDI0KSAmIDB4RkYsIC8vIHRpbWVzY2FsZTogNCBieXRlc1xuXHRcdCh0aW1lc2NhbGUgPj4+IDE2KSAmIDB4RkYsXG5cdFx0KHRpbWVzY2FsZSA+Pj4gOCkgJiAweEZGLFxuXHRcdCh0aW1lc2NhbGUpICYgMHhGRixcblx0XHQoZHVyYXRpb24gPj4+IDI0KSAmIDB4RkYsIC8vIGR1cmF0aW9uOiA0IGJ5dGVzXG5cdFx0KGR1cmF0aW9uID4+PiAxNikgJiAweEZGLFxuXHRcdChkdXJhdGlvbiA+Pj4gOCkgJiAweEZGLFxuXHRcdChkdXJhdGlvbikgJiAweEZGLFxuXHRcdDB4MDAsIDB4MDEsIDB4MDAsIDB4MDAsIC8vIFByZWZlcnJlZCByYXRlOiAxLjBcblx0XHQweDAxLCAweDAwLCAweDAwLCAweDAwLCAvLyBQcmVmZXJyZWRWb2x1bWUoMS4wLCAyYnl0ZXMpICsgcmVzZXJ2ZWQoMmJ5dGVzKVxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIHJlc2VydmVkOiA0ICsgNCBieXRlc1xuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG5cdFx0MHgwMCwgMHgwMSwgMHgwMCwgMHgwMCwgLy8gLS0tLWJlZ2luIGNvbXBvc2l0aW9uIG1hdHJpeC0tLS1cblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLFxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcblx0XHQweDAwLCAweDAxLCAweDAwLCAweDAwLFxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLFxuXHRcdDB4NDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1lbmQgY29tcG9zaXRpb24gbWF0cml4LS0tLVxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1iZWdpbiBwcmVfZGVmaW5lZCA2ICogNCBieXRlcy0tLS1cblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLFxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG5cdFx0MHgwMCwgMHgwMCwgMHgwMCwgMHgwMCxcblx0XHQweDAwLCAweDAwLCAweDAwLCAweDAwLFxuXHRcdDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIC8vIC0tLS1lbmQgcHJlX2RlZmluZWQgNiAqIDQgYnl0ZXMtLS0tXG5cdFx0MHhGRiwgMHhGRiwgMHhGRiwgMHhGRiAvLyBuZXh0X3RyYWNrX0lEXG5cdF0pKTtcbn1cblxuXG5NUDQuaW5pdCA9IGZ1bmN0aW9uICgpIHtcblx0Ly8gc2V0IHR5cGUgbmFtZTtcblx0T2JqZWN0XG5cdFx0LmtleXMoTVA0LnR5cGVzKVxuXHRcdC5mb3JFYWNoKHZhbCA9PiB7XG5cdFx0XHQvLyBnZXQgdGhlIFVURi0xNiBjb2RlIGZvcm1hdCBvZiBuYW1lXG5cdFx0XHRNUDQudHlwZXNbdmFsXSA9IFtcblx0XHRcdFx0dmFsLmNoYXJDb2RlQXQoMCksXG5cdFx0XHRcdHZhbC5jaGFyQ29kZUF0KDEpLFxuXHRcdFx0XHR2YWwuY2hhckNvZGVBdCgyKSxcblx0XHRcdFx0dmFsLmNoYXJDb2RlQXQoMylcblx0XHRcdF1cblx0XHR9KVxufVxuXG5NUDQuaW5pdCgpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgTVA0O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL211eC9yZW11eC9saWIvbXA0X2dlbmVyYXRvci5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pdHQoKSB7XG5cdGxldCBhbGwgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5cdHJldHVybiB7XG5cdFx0XG5cdFx0b24odHlwZSwgaGFuZGxlcikge1xuXHRcdFx0KGFsbFt0eXBlXSB8fCAoYWxsW3R5cGVdID0gW10pKS5wdXNoKGhhbmRsZXIpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZW1vdmUgYW4gZXZlbnQgaGFuZGxlciBmb3IgdGhlIGdpdmVuIHR5cGUuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0gIHtTdHJpbmd9IHR5cGVcdFR5cGUgb2YgZXZlbnQgdG8gdW5yZWdpc3RlciBgaGFuZGxlcmAgZnJvbSwgb3IgYFwiKlwiYFxuXHRcdCAqIEBwYXJhbSAge0Z1bmN0aW9ufSBoYW5kbGVyIEhhbmRsZXIgZnVuY3Rpb24gdG8gcmVtb3ZlXG5cdFx0ICogQG1lbWJlck9mIG1pdHRcblx0XHQgKi9cblx0XHRvZmYodHlwZSwgaGFuZGxlcikge1xuXHRcdFx0aWYgKGFsbFt0eXBlXSkge1xuXHRcdFx0XHRhbGxbdHlwZV0uc3BsaWNlKGFsbFt0eXBlXS5pbmRleE9mKGhhbmRsZXIpID4+PiAwLCAxKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0ZW1pdCh0eXBlLCAuLi5ldnQpIHtcblx0XHRcdChhbGxbdHlwZV0gfHwgW10pLnNsaWNlKCkubWFwKChoYW5kbGVyKSA9PiB7IGhhbmRsZXIoLi4uZXZ0KTsgfSk7XG5cdFx0XHQoYWxsWycqJ10gfHwgW10pLnNsaWNlKCkubWFwKChoYW5kbGVyKSA9PiB7IGhhbmRsZXIodHlwZSwgLi4uZXZ0KTsgfSk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2xpYi9taXR0LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==